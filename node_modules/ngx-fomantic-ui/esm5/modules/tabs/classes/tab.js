/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Tab = /** @class */ (function () {
    function Tab(header, content) {
        var _this = this;
        this.id = header.id;
        this.header = header;
        this.content = content;
        // So that the header and content isActive properties are always in sync.
        this.header.isActiveChange
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.content.isActive = _this.isActive; }));
    }
    Object.defineProperty(Tab.prototype, "isActive", {
        // Saves accessing .header.isActive every time.
        get: 
        // Saves accessing .header.isActive every time.
        /**
         * @return {?}
         */
        function () {
            return this.header.isActive;
        },
        set: /**
         * @param {?} active
         * @return {?}
         */
        function (active) {
            // Use `setActiveState` so as not to fire 'external changes' event.
            this.header.setActiveState(active);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "isDisabled", {
        // Saves accessing .header.isDisabled every time.
        get: 
        // Saves accessing .header.isDisabled every time.
        /**
         * @return {?}
         */
        function () {
            return this.header.isDisabled;
        },
        enumerable: true,
        configurable: true
    });
    return Tab;
}());
export { Tab };
if (false) {
    /** @type {?} */
    Tab.prototype.id;
    /** @type {?} */
    Tab.prototype.header;
    /** @type {?} */
    Tab.prototype.content;
    /** @type {?} */
    Tab.prototype.index;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy90YWJzL2NsYXNzZXMvdGFiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQTtJQU1FLGFBQVksTUFBb0IsRUFBRSxPQUFzQjtRQUF4RCxpQkFRQztRQVBDLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2Qix5RUFBeUU7UUFDekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjO2FBQ3ZCLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsUUFBUSxFQUFyQyxDQUFxQyxFQUFDLENBQUM7SUFDNUQsQ0FBQztJQUdELHNCQUFXLHlCQUFRO1FBRG5CLCtDQUErQzs7Ozs7O1FBQy9DO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDOzs7OztRQUVELFVBQW9CLE1BQWU7WUFDakMsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLENBQUM7OztPQUxBO0lBUUQsc0JBQVcsMkJBQVU7UUFEckIsaURBQWlEOzs7Ozs7UUFDakQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBQ0gsVUFBQztBQUFELENBQUMsQUE5QkQsSUE4QkM7Ozs7SUE3QkMsaUJBQWtCOztJQUNsQixxQkFBNEI7O0lBQzVCLHNCQUE4Qjs7SUFDOUIsb0JBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGdWlUYWJIZWFkZXJ9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGFiLWhlYWRlcic7XHJcbmltcG9ydCB7RnVpVGFiQ29udGVudH0gZnJvbSAnLi4vZGlyZWN0aXZlcy90YWItY29udGVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFiIHtcclxuICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICBwdWJsaWMgaGVhZGVyOiBGdWlUYWJIZWFkZXI7XHJcbiAgcHVibGljIGNvbnRlbnQ6IEZ1aVRhYkNvbnRlbnQ7XHJcbiAgcHVibGljIGluZGV4OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGhlYWRlcjogRnVpVGFiSGVhZGVyLCBjb250ZW50OiBGdWlUYWJDb250ZW50KSB7XHJcbiAgICB0aGlzLmlkID0gaGVhZGVyLmlkO1xyXG4gICAgdGhpcy5oZWFkZXIgPSBoZWFkZXI7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgIC8vIFNvIHRoYXQgdGhlIGhlYWRlciBhbmQgY29udGVudCBpc0FjdGl2ZSBwcm9wZXJ0aWVzIGFyZSBhbHdheXMgaW4gc3luYy5cclxuICAgIHRoaXMuaGVhZGVyLmlzQWN0aXZlQ2hhbmdlXHJcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5jb250ZW50LmlzQWN0aXZlID0gdGhpcy5pc0FjdGl2ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBTYXZlcyBhY2Nlc3NpbmcgLmhlYWRlci5pc0FjdGl2ZSBldmVyeSB0aW1lLlxyXG4gIHB1YmxpYyBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFkZXIuaXNBY3RpdmU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGlzQWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xyXG4gICAgLy8gVXNlIGBzZXRBY3RpdmVTdGF0ZWAgc28gYXMgbm90IHRvIGZpcmUgJ2V4dGVybmFsIGNoYW5nZXMnIGV2ZW50LlxyXG4gICAgdGhpcy5oZWFkZXIuc2V0QWN0aXZlU3RhdGUoYWN0aXZlKTtcclxuICB9XHJcblxyXG4gIC8vIFNhdmVzIGFjY2Vzc2luZyAuaGVhZGVyLmlzRGlzYWJsZWQgZXZlcnkgdGltZS5cclxuICBwdWJsaWMgZ2V0IGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFkZXIuaXNEaXNhYmxlZDtcclxuICB9XHJcbn1cclxuIl19