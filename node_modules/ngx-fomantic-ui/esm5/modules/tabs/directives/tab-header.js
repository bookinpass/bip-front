/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
var FuiTabHeader = /** @class */ (function () {
    function FuiTabHeader() {
        this._isActive = false;
        this.isActiveChange = new EventEmitter();
        this.isActiveExternalChange = new EventEmitter();
        this.onActivate = new EventEmitter();
        this.onDeactivate = new EventEmitter();
        this.isDisabled = false;
        this.hasClasses = true;
    }
    Object.defineProperty(FuiTabHeader.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isActive;
        },
        set: /**
         * @param {?} active
         * @return {?}
         */
        function (active) {
            var _this = this;
            /** @type {?} */
            var isActive = active;
            // Only used by @Input(), runs whenever user input changes `isActive`.
            // Run in timeout because `isDisabled` can prohibit user from changing `isActive`.
            // so update is delayed to avoid 'changed after checked' error.
            setTimeout((/**
             * @return {?}
             */
            function () {
                // Only allow change if tab header is not disabled.
                isActive = !_this.isDisabled ? active : false;
                _this.setActiveState(isActive);
                // Fire 'external change' event as user input has occured.
                _this.isActiveExternalChange.emit(isActive);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiTabHeader.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isDisabled;
        },
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            // Only update if value provided is different to current one.
            if (this._isDisabled !== disabled) {
                this._isDisabled = disabled;
                // If now disabled, then tab header must be deactivated.
                if (this.isDisabled) {
                    this.isActive = false;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    // Internally update active state.
    // Internally update active state.
    /**
     * @param {?} active
     * @return {?}
     */
    FuiTabHeader.prototype.setActiveState = 
    // Internally update active state.
    /**
     * @param {?} active
     * @return {?}
     */
    function (active) {
        // If (cast) active value has changed:
        if (!!this._isActive !== active) {
            // Update to the new value.
            this._isActive = active;
            // Fire the appropriate activation event.
            if (active) {
                this.onActivate.emit();
            }
            else {
                this.onDeactivate.emit();
            }
        }
        // Regardless, emit a change to `isActive`, so [(isActive)] works correctly.
        this.isActiveChange.emit(active);
    };
    /**
     * @return {?}
     */
    FuiTabHeader.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.isDisabled) {
            // Activate the tab when clicked, so long as it isn't disabled.
            this.isActive = true;
        }
    };
    FuiTabHeader.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiTabHeader]'
                },] }
    ];
    /** @nocollapse */
    FuiTabHeader.ctorParameters = function () { return []; };
    FuiTabHeader.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.item',] }],
        id: [{ type: Input, args: ['fuiTabHeader',] }],
        isActiveChange: [{ type: Output }],
        onActivate: [{ type: Output, args: ['activate',] }],
        onDeactivate: [{ type: Output, args: ['deactivate',] }],
        isActive: [{ type: HostBinding, args: ['class.active',] }, { type: Input }],
        isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return FuiTabHeader;
}());
export { FuiTabHeader };
if (false) {
    /** @type {?} */
    FuiTabHeader.prototype.hasClasses;
    /** @type {?} */
    FuiTabHeader.prototype.id;
    /** @type {?} */
    FuiTabHeader.prototype.isActiveChange;
    /** @type {?} */
    FuiTabHeader.prototype.isActiveExternalChange;
    /** @type {?} */
    FuiTabHeader.prototype.onActivate;
    /** @type {?} */
    FuiTabHeader.prototype.onDeactivate;
    /**
     * @type {?}
     * @private
     */
    FuiTabHeader.prototype._isActive;
    /**
     * @type {?}
     * @private
     */
    FuiTabHeader.prototype._isDisabled;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvdGFicy9kaXJlY3RpdmVzL3RhYi1oZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVoRztJQXFCRTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUNsRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUxRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDM0MsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTdDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFLRCxzQkFFVyxrQ0FBUTs7OztRQUZuQjtZQUdFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQUVELFVBQW9CLE1BQWU7WUFBbkMsaUJBYUM7O2dCQVpLLFFBQVEsR0FBRyxNQUFNO1lBQ3JCLHNFQUFzRTtZQUN0RSxrRkFBa0Y7WUFDbEYsK0RBQStEO1lBQy9ELFVBQVU7OztZQUFDO2dCQUNULG1EQUFtRDtnQkFDbkQsUUFBUSxHQUFHLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQzdDLEtBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRTlCLDBEQUEwRDtnQkFDMUQsS0FBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUM7OztPQWZBO0lBbUJELHNCQUVXLG9DQUFVOzs7O1FBRnJCO1lBR0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7Ozs7O1FBRUQsVUFBc0IsUUFBaUI7WUFDckMsNkRBQTZEO1lBQzdELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO2dCQUU1Qix3REFBd0Q7Z0JBQ3hELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7aUJBQ3ZCO2FBQ0Y7UUFDSCxDQUFDOzs7T0FaQTtJQWNELGtDQUFrQzs7Ozs7O0lBQzNCLHFDQUFjOzs7Ozs7SUFBckIsVUFBc0IsTUFBZTtRQUNuQyxzQ0FBc0M7UUFDdEMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLEVBQUU7WUFDL0IsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1lBRXhCLHlDQUF5QztZQUN6QyxJQUFJLE1BQU0sRUFBRTtnQkFDVixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDMUI7U0FDRjtRQUVELDRFQUE0RTtRQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBR00sOEJBQU87OztJQURkO1FBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsK0RBQStEO1lBQy9ELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7Z0JBdkdGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7Ozs7NkJBR0UsV0FBVyxTQUFDLFlBQVk7cUJBRXhCLEtBQUssU0FBQyxjQUFjO2lDQUdwQixNQUFNOzZCQUtOLE1BQU0sU0FBQyxVQUFVOytCQUdqQixNQUFNLFNBQUMsWUFBWTsyQkFtQm5CLFdBQVcsU0FBQyxjQUFjLGNBQzFCLEtBQUs7NkJBc0JMLFdBQVcsU0FBQyxnQkFBZ0IsY0FDNUIsS0FBSzswQkFvQ0wsWUFBWSxTQUFDLE9BQU87O0lBT3ZCLG1CQUFDO0NBQUEsQUF4R0QsSUF3R0M7U0FyR1ksWUFBWTs7O0lBRXZCLGtDQUNvQzs7SUFDcEMsMEJBQ2tCOztJQUVsQixzQ0FDNkM7O0lBRTdDLDhDQUFxRDs7SUFFckQsa0NBQ3NDOztJQUV0QyxvQ0FDd0M7Ozs7O0lBZ0J4QyxpQ0FBMkI7Ozs7O0lBdUIzQixtQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2Z1aVRhYkhlYWRlcl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlUYWJIZWFkZXIge1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLml0ZW0nKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG4gIEBJbnB1dCgnZnVpVGFiSGVhZGVyJylcclxuICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICAvLyBFbmFibGVzIHVzZSBvZiBbKGlzQWN0aXZlKV0gc28gc3RhdGUgY2FuIGJlIHNldCB1c2luZyBib29sZWFucy5cclxuICBAT3V0cHV0KClcclxuICBwdWJsaWMgaXNBY3RpdmVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAvLyBGaXJlcyBvbmx5IHdoZW4gYGlzQWN0aXZlYCBjaGFuZ2VzIGR1ZSB0byB1c2VyIGlucHV0LlxyXG4gIHB1YmxpYyBpc0FjdGl2ZUV4dGVybmFsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgLy8gRmlyZXMgd2hlbmV2ZXIgYSB0YWIgaXMgYWN0aXZhdGVkIGhhdmluZyBwcmV2aW91c2x5IGJlZW4gZGVhY3RpdmF0ZWQuXHJcbiAgQE91dHB1dCgnYWN0aXZhdGUnKVxyXG4gIHB1YmxpYyBvbkFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgLy8gRmlyZXMgd2hlbmV2ZXIgYSB0YWIgaXMgZGVhY3RpdmF0ZWQgaGF2aW5nIHByZXZpb3VzbHkgYmVlbiBhY3RpdmF0ZWQuXHJcbiAgQE91dHB1dCgnZGVhY3RpdmF0ZScpXHJcbiAgcHVibGljIG9uRGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzQWN0aXZlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG4gICAgdGhpcy5pc0FjdGl2ZUV4dGVybmFsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG5cclxuICAgIHRoaXMub25BY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICAgIHRoaXMub25EZWFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBJbnRlcm5hbGx5IGtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgdGhlIGhlYWRlciBpcyBhY3RpdmUuXHJcbiAgcHJpdmF0ZSBfaXNBY3RpdmU6IGJvb2xlYW47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aXZlJylcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNBY3RpdmU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGlzQWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xyXG4gICAgbGV0IGlzQWN0aXZlID0gYWN0aXZlO1xyXG4gICAgLy8gT25seSB1c2VkIGJ5IEBJbnB1dCgpLCBydW5zIHdoZW5ldmVyIHVzZXIgaW5wdXQgY2hhbmdlcyBgaXNBY3RpdmVgLlxyXG4gICAgLy8gUnVuIGluIHRpbWVvdXQgYmVjYXVzZSBgaXNEaXNhYmxlZGAgY2FuIHByb2hpYml0IHVzZXIgZnJvbSBjaGFuZ2luZyBgaXNBY3RpdmVgLlxyXG4gICAgLy8gc28gdXBkYXRlIGlzIGRlbGF5ZWQgdG8gYXZvaWQgJ2NoYW5nZWQgYWZ0ZXIgY2hlY2tlZCcgZXJyb3IuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgLy8gT25seSBhbGxvdyBjaGFuZ2UgaWYgdGFiIGhlYWRlciBpcyBub3QgZGlzYWJsZWQuXHJcbiAgICAgIGlzQWN0aXZlID0gIXRoaXMuaXNEaXNhYmxlZCA/IGFjdGl2ZSA6IGZhbHNlO1xyXG4gICAgICB0aGlzLnNldEFjdGl2ZVN0YXRlKGlzQWN0aXZlKTtcclxuXHJcbiAgICAgIC8vIEZpcmUgJ2V4dGVybmFsIGNoYW5nZScgZXZlbnQgYXMgdXNlciBpbnB1dCBoYXMgb2NjdXJlZC5cclxuICAgICAgdGhpcy5pc0FjdGl2ZUV4dGVybmFsQ2hhbmdlLmVtaXQoaXNBY3RpdmUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9pc0Rpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpc2FibGVkJylcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgaXNEaXNhYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0Rpc2FibGVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBpc0Rpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKSB7XHJcbiAgICAvLyBPbmx5IHVwZGF0ZSBpZiB2YWx1ZSBwcm92aWRlZCBpcyBkaWZmZXJlbnQgdG8gY3VycmVudCBvbmUuXHJcbiAgICBpZiAodGhpcy5faXNEaXNhYmxlZCAhPT0gZGlzYWJsZWQpIHtcclxuICAgICAgdGhpcy5faXNEaXNhYmxlZCA9IGRpc2FibGVkO1xyXG5cclxuICAgICAgLy8gSWYgbm93IGRpc2FibGVkLCB0aGVuIHRhYiBoZWFkZXIgbXVzdCBiZSBkZWFjdGl2YXRlZC5cclxuICAgICAgaWYgKHRoaXMuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSW50ZXJuYWxseSB1cGRhdGUgYWN0aXZlIHN0YXRlLlxyXG4gIHB1YmxpYyBzZXRBY3RpdmVTdGF0ZShhY3RpdmU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIC8vIElmIChjYXN0KSBhY3RpdmUgdmFsdWUgaGFzIGNoYW5nZWQ6XHJcbiAgICBpZiAoISF0aGlzLl9pc0FjdGl2ZSAhPT0gYWN0aXZlKSB7XHJcbiAgICAgIC8vIFVwZGF0ZSB0byB0aGUgbmV3IHZhbHVlLlxyXG4gICAgICB0aGlzLl9pc0FjdGl2ZSA9IGFjdGl2ZTtcclxuXHJcbiAgICAgIC8vIEZpcmUgdGhlIGFwcHJvcHJpYXRlIGFjdGl2YXRpb24gZXZlbnQuXHJcbiAgICAgIGlmIChhY3RpdmUpIHtcclxuICAgICAgICB0aGlzLm9uQWN0aXZhdGUuZW1pdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMub25EZWFjdGl2YXRlLmVtaXQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZ2FyZGxlc3MsIGVtaXQgYSBjaGFuZ2UgdG8gYGlzQWN0aXZlYCwgc28gWyhpc0FjdGl2ZSldIHdvcmtzIGNvcnJlY3RseS5cclxuICAgIHRoaXMuaXNBY3RpdmVDaGFuZ2UuZW1pdChhY3RpdmUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQpIHtcclxuICAgICAgLy8gQWN0aXZhdGUgdGhlIHRhYiB3aGVuIGNsaWNrZWQsIHNvIGxvbmcgYXMgaXQgaXNuJ3QgZGlzYWJsZWQuXHJcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=