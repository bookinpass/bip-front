/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, QueryList } from '@angular/core';
import { FuiTabHeader } from '../directives/tab-header';
import { FuiTabContent } from '../directives/tab-content';
import { Tab } from '../classes/tab';
var FuiTabset = /** @class */ (function () {
    function FuiTabset() {
        this.tabs = [];
        this._barrierCount = 0;
    }
    Object.defineProperty(FuiTabset.prototype, "activeTab", {
        // When setting a tab as the currently active tab, it automatically gains
        get: 
        // When setting a tab as the currently active tab, it automatically gains
        /**
         * @return {?}
         */
        function () {
            return this._activeTab;
        },
        // `isActive` status (saves littering `isActive = true` everywhere).
        set: 
        // `isActive` status (saves littering `isActive = true` everywhere).
        /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            this._activeTab = tab;
            tab.isActive = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiTabset.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Fire `internalComponentsUpdated` when the query lists change.
        this._tabHeaders.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.internalComponentsUpdated(); }));
        this._tabContents.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.internalComponentsUpdated(); }));
        // Initially load the tabs.
        this.loadTabs();
    };
    // Activate the first tab in the set.
    // Activate the first tab in the set.
    /**
     * @return {?}
     */
    FuiTabset.prototype.activateFirstTab = 
    // Activate the first tab in the set.
    /**
     * @return {?}
     */
    function () {
        this.activeTab = this.tabs[0];
    };
    // Activates the closest available tab to a given one.
    // Activates the closest available tab to a given one.
    /**
     * @param {?} tab
     * @return {?}
     */
    FuiTabset.prototype.activateClosestTab = 
    // Activates the closest available tab to a given one.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var nextAvailable;
        // When the exited tab's index is higher than all available tabs,
        if (tab.index >= this.tabs.length) {
            // Activate the last tab.
            nextAvailable = this.tabs[this.tabs.length - 1];
        }
        // If that didn't work, try the following cases:
        if (!nextAvailable) {
            if (!this.tabs.find((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t === tab; }))) { // When the exited tab no longer exists,
                // Replace it with a tab at the same index.
                nextAvailable = this.tabs[tab.index];
            }
            else { // Or if the exited tab still exists,
                // Go to the tab immediately to the left.
                nextAvailable = this.tabs[Math.max(tab.index - 1, 0)];
            }
        }
        // However, if the chosen tab is disabled,
        if (nextAvailable.isDisabled) {
            // Activate the closest available tab to it.
            return this.activateClosestTab(nextAvailable);
        }
        this.activeTab = nextAvailable;
    };
    // Fires whenever either the tab headers or tab contents query lists update.
    // Fires whenever either the tab headers or tab contents query lists update.
    /**
     * @private
     * @return {?}
     */
    FuiTabset.prototype.internalComponentsUpdated = 
    // Fires whenever either the tab headers or tab contents query lists update.
    /**
     * @private
     * @return {?}
     */
    function () {
        // We are using a 'counting barrier of n = 2', i.e. the code within only runs after the method is called twice.
        // This is so that both the headers and contents query lists can update before we run code that matches the two up.
        this._barrierCount++;
        if (this._barrierCount === 2) {
            // Reset the barrier so it can be called again.
            this._barrierCount = 0;
            // Update the tabs.
            this.loadTabs();
        }
    };
    // Connects tab headers to tab contents, and creates a tab instance for each pairing.
    // Connects tab headers to tab contents, and creates a tab instance for each pairing.
    /**
     * @private
     * @return {?}
     */
    FuiTabset.prototype.loadTabs = 
    // Connects tab headers to tab contents, and creates a tab instance for each pairing.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // Remove any tabs that no longer have an associated header.
        this.tabs = this.tabs.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return !!_this._tabHeaders.find((/**
         * @param {?} tH
         * @return {?}
         */
        function (tH) { return tH === t.header; })); }));
        this._tabHeaders
            // Filter out the loaded headers with attached tab instances.
            .filter((/**
         * @param {?} tH
         * @return {?}
         */
        function (tH) { return !_this.tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.header === tH; })); }))
            .forEach((/**
         * @param {?} tH
         * @return {?}
         */
        function (tH) {
            /** @type {?} */
            var content = _this._tabContents.find((/**
             * @param {?} tC
             * @return {?}
             */
            function (tC) { return tC.id === tH.id; }));
            if (!content) {
                // Error if an associated tab content cannot be found for the given header.
                throw new Error('A [fuiTabHeader] must have a related [fuiTabContent].');
            }
            // Create a new tab instance for this header & content combo.
            /** @type {?} */
            var tab = new Tab(tH, content);
            // Subscribe to any external changes in the tab header's active state. External changes are triggered by user input.
            tab.header.isActiveExternalChange.subscribe((/**
             * @return {?}
             */
            function () { return _this.onHeaderActiveChanged(tab); }));
            // Add the new instance to the list of tabs.
            _this.tabs.push(tab);
        }));
        // Assign each tab an index (which denotes the order they physically appear in).
        this._tabHeaders
            .forEach((/**
         * @param {?} tH
         * @param {?} i
         * @return {?}
         */
        function (tH, i) {
            /** @type {?} */
            var tab = _this.tabs.find((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.header === tH; }));
            if (tab) {
                tab.index = i;
            }
        }));
        // Sort the tabs by their index.
        this.tabs.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a.index - b.index; }));
        if (!this.activeTab) { // Check if there are no current existing active tabs.
            // If so, we must activate the first available tab.
            this.activateFirstTab();
        }
        else if (!this.tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t === _this.activeTab; }))) { // O'wise check if current active tab has been deleted.
            // If so, we must find the closest.
            // Use `setTimeout` as this causes a 'changed after checked' error o'wise.
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.activateClosestTab(_this.activeTab); }));
        }
        if (this.tabs.length === 0) {
            // Error if there aren't any tabs in the tabset.
            throw new Error('You cannot have no tabs!');
        }
    };
    // Fires whenever a tab header's active state is externally changed.
    // Fires whenever a tab header's active state is externally changed.
    /**
     * @private
     * @param {?} tab
     * @return {?}
     */
    FuiTabset.prototype.onHeaderActiveChanged = 
    // Fires whenever a tab header's active state is externally changed.
    /**
     * @private
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        // If the tab has become activated, but was not previously the active tab:
        if (tab.isActive && this.activeTab !== tab) {
            // Deactivate all of the tabs.
            this.tabs.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t !== tab; })).forEach((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.isActive = false; }));
            // Set the currently active tab to this one.
            this.activeTab = tab;
        }
        // If the tab has become deactivated, but was previously the active tab:
        if (!tab.isActive && this.activeTab === tab) {
            // Activate the closest tab to it.
            this.activateClosestTab(tab);
        }
    };
    FuiTabset.decorators = [
        { type: Component, args: [{
                    selector: 'fui-tabset',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    FuiTabset.ctorParameters = function () { return []; };
    FuiTabset.propDecorators = {
        _tabHeaders: [{ type: ContentChildren, args: [FuiTabHeader,] }],
        _tabContents: [{ type: ContentChildren, args: [FuiTabContent,] }]
    };
    return FuiTabset;
}());
export { FuiTabset };
if (false) {
    /** @type {?} */
    FuiTabset.prototype.tabs;
    /**
     * @type {?}
     * @private
     */
    FuiTabset.prototype._tabHeaders;
    /**
     * @type {?}
     * @private
     */
    FuiTabset.prototype._tabContents;
    /**
     * @type {?}
     * @private
     */
    FuiTabset.prototype._barrierCount;
    /**
     * @type {?}
     * @private
     */
    FuiTabset.prototype._activeTab;
}
//# sourceMappingURL=data:application/json;base64,