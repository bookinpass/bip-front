/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FuiComponentFactory } from '../../../misc/util/internal';
import { ComponentModalConfig, TemplateModalConfig } from '../classes/modal-config';
import { FuiModal } from '../components/modal';
import { Modal } from '../classes/modal-controls';
import { ActiveModal } from '../classes/active-modal';
var FuiModalService = /** @class */ (function () {
    function FuiModalService(_componentFactory) {
        this._componentFactory = _componentFactory;
    }
    /**
     * @template T, U, V
     * @param {?} modal
     * @return {?}
     */
    FuiModalService.prototype.open = /**
     * @template T, U, V
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        // Generate the modal component to be shown.
        /** @type {?} */
        var componentRef = this._componentFactory.createComponent(FuiModal);
        // Shorthand for the created modal component instance.
        /** @type {?} */
        var modalComponent = componentRef.instance;
        if (modal instanceof TemplateModalConfig) {
            // Inject the template into the view.
            this._componentFactory.createView(modalComponent.templateSibling, modal.template, {
                // `let-context`
                $implicit: modal.context,
                // `let-modal="modal"`
                modal: componentRef.instance.controls
            });
        }
        else if (modal instanceof ComponentModalConfig) {
            // Generate the component to be used as the modal content,
            // injecting an instance of `Modal` to be used in the component constructor.
            /** @type {?} */
            var contentComponentRef = this._componentFactory.createComponent(modal.component, [
                {
                    provide: Modal,
                    useValue: new Modal(modalComponent.controls, modal.context)
                }
            ]);
            // Insert the new component into the content of the modal.
            this._componentFactory.attachToView(contentComponentRef, modalComponent.templateSibling);
            // Shorthand for access to the content component's DOM element.
            /** @type {?} */
            var contentElement = (/** @type {?} */ (contentComponentRef.location.nativeElement));
            // Move all of the DOM elements inside the component to the main modal element.
            // This is done so that CSS classes apply correctly. It does stop any custom styles from working however,
            // so other ways may have to be investigated.
            while (contentElement.hasChildNodes() && contentElement.parentElement && contentElement.firstChild) {
                contentElement.parentElement.appendChild(contentElement.removeChild(contentElement.firstChild));
            }
            // Remove the generated component's 'empty shell' from the DOM.
            this._componentFactory.detachFromDocument(contentComponentRef);
        }
        // Attach the new modal component to the application.
        // The component will move itself to the document body for correctl styling.
        this._componentFactory.attachToApplication(componentRef);
        // Initialise the generated modal with the provided config.
        modalComponent.loadConfig(modal);
        // Return an instance of an `ActiveModal`, so the user can control the new modal.
        return new ActiveModal(modal, componentRef);
    };
    FuiModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FuiModalService.ctorParameters = function () { return [
        { type: FuiComponentFactory }
    ]; };
    return FuiModalService;
}());
export { FuiModalService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuiModalService.prototype._componentFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvbW9kYWwvc2VydmljZXMvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsb0JBQW9CLEVBQWUsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRDtJQUVFLHlCQUFvQixpQkFBc0M7UUFBdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFxQjtJQUMxRCxDQUFDOzs7Ozs7SUFFTSw4QkFBSTs7Ozs7SUFBWCxVQUFxQixLQUEyQjs7O1lBRXhDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFpQixRQUFRLENBQUM7OztZQUcvRSxjQUFjLEdBQUcsWUFBWSxDQUFDLFFBQVE7UUFFNUMsSUFBSSxLQUFLLFlBQVksbUJBQW1CLEVBQUU7WUFDeEMscUNBQXFDO1lBQ3JDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFOztnQkFFaEYsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPOztnQkFFeEIsS0FBSyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUTthQUN0QyxDQUFDLENBQUM7U0FDSjthQUFNLElBQUksS0FBSyxZQUFZLG9CQUFvQixFQUFFOzs7O2dCQUcxQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUNoRSxLQUFLLENBQUMsU0FBUyxFQUNmO2dCQUNFO29CQUNFLE9BQU8sRUFBRSxLQUFLO29CQUNkLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUM7aUJBQzVEO2FBQ0YsQ0FDRjtZQUVELDBEQUEwRDtZQUMxRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7O2dCQUduRixjQUFjLEdBQUcsbUJBQUEsbUJBQW1CLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBVztZQUU1RSwrRUFBK0U7WUFDL0UseUdBQXlHO1lBQ3pHLDZDQUE2QztZQUM3QyxPQUFPLGNBQWMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxjQUFjLENBQUMsYUFBYSxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xHLGNBQWMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDakc7WUFDRCwrREFBK0Q7WUFDL0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDaEU7UUFFRCxxREFBcUQ7UUFDckQsNEVBQTRFO1FBQzVFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV6RCwyREFBMkQ7UUFDM0QsY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVqQyxpRkFBaUY7UUFDakYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Z0JBMURGLFVBQVU7Ozs7Z0JBTkgsbUJBQW1COztJQWlFM0Isc0JBQUM7Q0FBQSxBQTNERCxJQTJEQztTQTFEWSxlQUFlOzs7Ozs7SUFDZCw0Q0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Z1aUNvbXBvbmVudEZhY3Rvcnl9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7Q29tcG9uZW50TW9kYWxDb25maWcsIE1vZGFsQ29uZmlnLCBUZW1wbGF0ZU1vZGFsQ29uZmlnfSBmcm9tICcuLi9jbGFzc2VzL21vZGFsLWNvbmZpZyc7XHJcbmltcG9ydCB7RnVpTW9kYWx9IGZyb20gJy4uL2NvbXBvbmVudHMvbW9kYWwnO1xyXG5pbXBvcnQge01vZGFsfSBmcm9tICcuLi9jbGFzc2VzL21vZGFsLWNvbnRyb2xzJztcclxuaW1wb3J0IHtBY3RpdmVNb2RhbH0gZnJvbSAnLi4vY2xhc3Nlcy9hY3RpdmUtbW9kYWwnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnVpTW9kYWxTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5OiBGdWlDb21wb25lbnRGYWN0b3J5KSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3BlbjxULCBVLCBWPihtb2RhbDogTW9kYWxDb25maWc8VCwgVSwgVj4pOiBBY3RpdmVNb2RhbDxULCBVLCBWPiB7XHJcbiAgICAvLyBHZW5lcmF0ZSB0aGUgbW9kYWwgY29tcG9uZW50IHRvIGJlIHNob3duLlxyXG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5fY29tcG9uZW50RmFjdG9yeS5jcmVhdGVDb21wb25lbnQ8RnVpTW9kYWw8VSwgVj4+KEZ1aU1vZGFsKTtcclxuXHJcbiAgICAvLyBTaG9ydGhhbmQgZm9yIHRoZSBjcmVhdGVkIG1vZGFsIGNvbXBvbmVudCBpbnN0YW5jZS5cclxuICAgIGNvbnN0IG1vZGFsQ29tcG9uZW50ID0gY29tcG9uZW50UmVmLmluc3RhbmNlO1xyXG5cclxuICAgIGlmIChtb2RhbCBpbnN0YW5jZW9mIFRlbXBsYXRlTW9kYWxDb25maWcpIHtcclxuICAgICAgLy8gSW5qZWN0IHRoZSB0ZW1wbGF0ZSBpbnRvIHRoZSB2aWV3LlxyXG4gICAgICB0aGlzLl9jb21wb25lbnRGYWN0b3J5LmNyZWF0ZVZpZXcobW9kYWxDb21wb25lbnQudGVtcGxhdGVTaWJsaW5nLCBtb2RhbC50ZW1wbGF0ZSwge1xyXG4gICAgICAgIC8vIGBsZXQtY29udGV4dGBcclxuICAgICAgICAkaW1wbGljaXQ6IG1vZGFsLmNvbnRleHQsXHJcbiAgICAgICAgLy8gYGxldC1tb2RhbD1cIm1vZGFsXCJgXHJcbiAgICAgICAgbW9kYWw6IGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb250cm9sc1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAobW9kYWwgaW5zdGFuY2VvZiBDb21wb25lbnRNb2RhbENvbmZpZykge1xyXG4gICAgICAvLyBHZW5lcmF0ZSB0aGUgY29tcG9uZW50IHRvIGJlIHVzZWQgYXMgdGhlIG1vZGFsIGNvbnRlbnQsXHJcbiAgICAgIC8vIGluamVjdGluZyBhbiBpbnN0YW5jZSBvZiBgTW9kYWxgIHRvIGJlIHVzZWQgaW4gdGhlIGNvbXBvbmVudCBjb25zdHJ1Y3Rvci5cclxuICAgICAgY29uc3QgY29udGVudENvbXBvbmVudFJlZiA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuY3JlYXRlQ29tcG9uZW50KFxyXG4gICAgICAgIG1vZGFsLmNvbXBvbmVudCxcclxuICAgICAgICBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE1vZGFsLFxyXG4gICAgICAgICAgICB1c2VWYWx1ZTogbmV3IE1vZGFsKG1vZGFsQ29tcG9uZW50LmNvbnRyb2xzLCBtb2RhbC5jb250ZXh0KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIEluc2VydCB0aGUgbmV3IGNvbXBvbmVudCBpbnRvIHRoZSBjb250ZW50IG9mIHRoZSBtb2RhbC5cclxuICAgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeS5hdHRhY2hUb1ZpZXcoY29udGVudENvbXBvbmVudFJlZiwgbW9kYWxDb21wb25lbnQudGVtcGxhdGVTaWJsaW5nKTtcclxuXHJcbiAgICAgIC8vIFNob3J0aGFuZCBmb3IgYWNjZXNzIHRvIHRoZSBjb250ZW50IGNvbXBvbmVudCdzIERPTSBlbGVtZW50LlxyXG4gICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGNvbnRlbnRDb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCBhcyBFbGVtZW50O1xyXG5cclxuICAgICAgLy8gTW92ZSBhbGwgb2YgdGhlIERPTSBlbGVtZW50cyBpbnNpZGUgdGhlIGNvbXBvbmVudCB0byB0aGUgbWFpbiBtb2RhbCBlbGVtZW50LlxyXG4gICAgICAvLyBUaGlzIGlzIGRvbmUgc28gdGhhdCBDU1MgY2xhc3NlcyBhcHBseSBjb3JyZWN0bHkuIEl0IGRvZXMgc3RvcCBhbnkgY3VzdG9tIHN0eWxlcyBmcm9tIHdvcmtpbmcgaG93ZXZlcixcclxuICAgICAgLy8gc28gb3RoZXIgd2F5cyBtYXkgaGF2ZSB0byBiZSBpbnZlc3RpZ2F0ZWQuXHJcbiAgICAgIHdoaWxlIChjb250ZW50RWxlbWVudC5oYXNDaGlsZE5vZGVzKCkgJiYgY29udGVudEVsZW1lbnQucGFyZW50RWxlbWVudCAmJiBjb250ZW50RWxlbWVudC5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgY29udGVudEVsZW1lbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50RWxlbWVudC5yZW1vdmVDaGlsZChjb250ZW50RWxlbWVudC5maXJzdENoaWxkKSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gUmVtb3ZlIHRoZSBnZW5lcmF0ZWQgY29tcG9uZW50J3MgJ2VtcHR5IHNoZWxsJyBmcm9tIHRoZSBET00uXHJcbiAgICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuZGV0YWNoRnJvbURvY3VtZW50KGNvbnRlbnRDb21wb25lbnRSZWYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEF0dGFjaCB0aGUgbmV3IG1vZGFsIGNvbXBvbmVudCB0byB0aGUgYXBwbGljYXRpb24uXHJcbiAgICAvLyBUaGUgY29tcG9uZW50IHdpbGwgbW92ZSBpdHNlbGYgdG8gdGhlIGRvY3VtZW50IGJvZHkgZm9yIGNvcnJlY3RsIHN0eWxpbmcuXHJcbiAgICB0aGlzLl9jb21wb25lbnRGYWN0b3J5LmF0dGFjaFRvQXBwbGljYXRpb24oY29tcG9uZW50UmVmKTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXNlIHRoZSBnZW5lcmF0ZWQgbW9kYWwgd2l0aCB0aGUgcHJvdmlkZWQgY29uZmlnLlxyXG4gICAgbW9kYWxDb21wb25lbnQubG9hZENvbmZpZyhtb2RhbCk7XHJcblxyXG4gICAgLy8gUmV0dXJuIGFuIGluc3RhbmNlIG9mIGFuIGBBY3RpdmVNb2RhbGAsIHNvIHRoZSB1c2VyIGNhbiBjb250cm9sIHRoZSBuZXcgbW9kYWwuXHJcbiAgICByZXR1cm4gbmV3IEFjdGl2ZU1vZGFsKG1vZGFsLCBjb21wb25lbnRSZWYpO1xyXG4gIH1cclxufVxyXG4iXX0=