/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { KeyCode, FuiComponentFactory, Util } from '../../../misc/util/internal';
import { Transition, TransitionController, TransitionDirection } from '../../transition/internal';
import { ModalControls } from '../classes/modal-controls';
import { ModalConfig, ModalSize } from '../classes/modal-config';
/**
 * @template T, U
 */
var FuiModal = /** @class */ (function () {
    function FuiModal(_renderer, _element, _componentFactory) {
        var _this = this;
        this._renderer = _renderer;
        this._element = _element;
        this._componentFactory = _componentFactory;
        // Initialise with default configuration from `ModalConfig` (to avoid writing defaults twice).
        /** @type {?} */
        var config = new ModalConfig();
        this.loadConfig(config);
        // Event emitters for each of the possible modal outcomes.
        this.onApprove = new EventEmitter();
        this.onDeny = new EventEmitter();
        this.onDismiss = new EventEmitter();
        // Initialise controls with actions for the `approve` and `deny` cases.
        this.controls = new ModalControls((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.dismiss((/**
         * @return {?}
         */
        function () { return _this.onApprove.emit(res); })); }), (/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.dismiss((/**
         * @return {?}
         */
        function () { return _this.onDeny.emit(res); })); }));
        // Internal variable initialisation.
        this.dimBackground = false;
        this._isClosing = false;
        this.transitionController = new TransitionController(false);
    }
    Object.defineProperty(FuiModal.prototype, "approve", {
        get: /**
         * @return {?}
         */
        function () {
            return this.controls.approve;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiModal.prototype, "deny", {
        get: /**
         * @return {?}
         */
        function () {
            return this.controls.deny;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiModal.prototype, "dynamicClasses", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var classes = {};
            if (this.size) {
                classes[this.size] = true;
            }
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiModal.prototype, "isFullScreen", {
        // Value to deny with when closing via `isClosable`.
        get: 
        // Value to deny with when closing via `isClosable`.
        /**
         * @return {?}
         */
        function () {
            return this._isFullScreen;
        },
        set: /**
         * @param {?} fullScreen
         * @return {?}
         */
        function (fullScreen) {
            this._isFullScreen = Util.DOM.parseBooleanAttribute(fullScreen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiModal.prototype, "mustScroll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mustScroll;
        },
        set: /**
         * @param {?} mustScroll
         * @return {?}
         */
        function (mustScroll) {
            this._mustScroll = mustScroll;
            // 'Cache' value in _mustAlwaysScroll so that if `true`, _mustScroll isn't ever auto-updated.
            this._mustAlwaysScroll = mustScroll;
            this.updateScroll();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiModal.prototype, "isInverted", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isInverted;
        },
        set: /**
         * @param {?} inverted
         * @return {?}
         */
        function (inverted) {
            this._isInverted = Util.DOM.parseBooleanAttribute(inverted);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiModal.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Transition the modal to be visible.
        this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.In));
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.dimBackground = true; }));
    };
    /**
     * @return {?}
     */
    FuiModal.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Move the modal to the document body to ensure correct scrolling.
        this._originalContainer = this._element.nativeElement.parentNode;
        (/** @type {?} */ (document.querySelector('body'))).appendChild(this._element.nativeElement);
        // Remove the #templateSibling element from the DOM to fix bottom border styles.
        /** @type {?} */
        var templateElement = (/** @type {?} */ (this.templateSibling.element.nativeElement));
        if (templateElement.parentNode) {
            templateElement.parentNode.removeChild(templateElement);
        }
        /** @type {?} */
        var element = (/** @type {?} */ (this._modalElement.nativeElement));
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.updateScroll(); }));
        // Focus any element with [autofocus] attribute.
        /** @type {?} */
        var autoFocus = (/** @type {?} */ (element.querySelector('[autofocus]')));
        if (autoFocus) {
            // Autofocus after the browser has had time to process other event handlers.
            setTimeout((/**
             * @return {?}
             */
            function () { return autoFocus.focus(); }), 10);
            // Try to focus again when the modal has opened so that autofocus works in IE11.
            setTimeout((/**
             * @return {?}
             */
            function () { return autoFocus.focus(); }), this.transitionDuration);
        }
    };
    // Updates the modal with the specified configuration.
    // Updates the modal with the specified configuration.
    /**
     * @template V
     * @param {?} config
     * @return {?}
     */
    FuiModal.prototype.loadConfig = 
    // Updates the modal with the specified configuration.
    /**
     * @template V
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.isClosable = config.isClosable;
        this.closeResult = config.closeResult;
        this.size = config.size;
        this.isFullScreen = config.isFullScreen;
        this.isBasic = config.isBasic;
        this.isInverted = config.isInverted;
        this.isCentered = config.isCentered;
        this.mustScroll = config.mustScroll;
        this.transition = config.transition;
        this.transitionDuration = config.transitionDuration;
    };
    // Closes the modal with a 'deny' outcome, using the specified default reason.
    // Closes the modal with a 'deny' outcome, using the specified default reason.
    /**
     * @return {?}
     */
    FuiModal.prototype.close = 
    // Closes the modal with a 'deny' outcome, using the specified default reason.
    /**
     * @return {?}
     */
    function () {
        if (this.isClosable) {
            // If we are allowed to close, fire the deny result with the default value.
            this.deny(this.closeResult);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiModal.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Makes sense here, as the modal shouldn't be attached to any DOM element.
        e.stopPropagation();
    };
    // Document listener is fine here because nobody will have enough modals open.
    // Document listener is fine here because nobody will have enough modals open.
    /**
     * @param {?} e
     * @return {?}
     */
    FuiModal.prototype.onDocumentKeyUp = 
    // Document listener is fine here because nobody will have enough modals open.
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.keyCode === KeyCode.Escape) {
            // Close automatically covers case of `!isClosable`, so check not needed.
            this.close();
        }
    };
    /**
     * @return {?}
     */
    FuiModal.prototype.onDocumentResize = /**
     * @return {?}
     */
    function () {
        this.updateScroll();
    };
    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.
    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.
    /**
     * @private
     * @param {?=} callback
     * @return {?}
     */
    FuiModal.prototype.dismiss = 
    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.
    /**
     * @private
     * @param {?=} callback
     * @return {?}
     */
    function (callback) {
        var _this = this;
        if (callback === void 0) { callback = (/**
         * @return {?}
         */
        function () {
        }); }
        // If we aren't currently closing,
        if (!this._isClosing) {
            this._isClosing = true;
            // Transition the modal to be invisible.
            this.dimBackground = false;
            this.transitionController.stopAll();
            this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.Out, (/**
             * @return {?}
             */
            function () {
                // When done, move the modal back to its original location, emit a dismiss event, and fire the callback.
                if (_this._originalContainer) {
                    _this._originalContainer.appendChild(_this._element.nativeElement);
                }
                _this.onDismiss.emit();
                callback();
            })));
        }
    };
    // Decides whether the modal needs to reposition to allow scrolling.
    // Decides whether the modal needs to reposition to allow scrolling.
    /**
     * @private
     * @return {?}
     */
    FuiModal.prototype.updateScroll = 
    // Decides whether the modal needs to reposition to allow scrolling.
    /**
     * @private
     * @return {?}
     */
    function () {
        // _mustAlwaysScroll works by stopping _mustScroll from being automatically updated, so it stays `true`.
        if (!this._mustAlwaysScroll && this._modalElement) {
            // Fomantic UI modal margin and dimmer padding are 1rem, which is relative to the global font size, so for compatibility:
            /** @type {?} */
            var fontSize = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));
            /** @type {?} */
            var margin = fontSize * 2;
            /** @type {?} */
            var element = (/** @type {?} */ (this._modalElement.nativeElement));
            // The modal must scroll if the window height is smaller than the modal height + both margins.
            this._mustScroll = window.innerHeight < element.clientHeight + margin * 2;
        }
    };
    FuiModal.decorators = [
        { type: Component, args: [{
                    selector: 'fui-modal',
                    template: "\n<!-- Page dimmer for modal background. -->\n<fui-modal-dimmer [ngClass]=\"{'top aligned': !isCentered}\"\n                  [class.inverted]=\"isInverted\"\n                  [(isDimmed)]=\"dimBackground\"\n                  [transitionDuration]=\"transitionDuration\"\n                  (click)=\"close()\">\n\n    <!-- Modal component, with transition component attached -->\n    <div class=\"ui modal\"\n         [fuiTransition]=\"transitionController\"\n         [class.active]=\"transitionController?.isVisible\"\n         [class.fullscreen]=\"isFullScreen\"\n         [class.basic]=\"isBasic\"\n         [class.scrolling]=\"mustScroll\"\n         [class.inverted]=\"isInverted\"\n         [ngClass]=\"dynamicClasses\"\n         (click)=\"onClick($event)\"\n         #modal>\n\n        <!-- Configurable close icon -->\n        <i class=\"close icon\" *ngIf=\"isClosable\" (click)=\"close()\"></i>\n        <!-- <ng-content> so that <fui-modal> can be used as a normal component. -->\n        <ng-content></ng-content>\n        <!-- @ViewChild reference so we can insert elements beside this div. -->\n        <div #templateSibling></div>\n    </div>\n</fui-modal-dimmer>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FuiModal.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: FuiComponentFactory }
    ]; };
    FuiModal.propDecorators = {
        isClosable: [{ type: Input }],
        closeResult: [{ type: Input }],
        onApprove: [{ type: Output, args: ['approved',] }],
        onDeny: [{ type: Output, args: ['denied',] }],
        onDismiss: [{ type: Output, args: ['dismissed',] }],
        size: [{ type: Input }],
        isCentered: [{ type: Input }],
        isBasic: [{ type: Input }],
        transition: [{ type: Input }],
        transitionDuration: [{ type: Input }],
        templateSibling: [{ type: ViewChild, args: ['templateSibling', { read: ViewContainerRef, static: true },] }],
        _modalElement: [{ type: ViewChild, args: ['modal', { static: false },] }],
        isFullScreen: [{ type: Input }],
        mustScroll: [{ type: Input }],
        isInverted: [{ type: Input }],
        onDocumentKeyUp: [{ type: HostListener, args: ['document:keyup', ['$event'],] }],
        onDocumentResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return FuiModal;
}());
export { FuiModal };
if (false) {
    /** @type {?} */
    FuiModal.prototype.isClosable;
    /** @type {?} */
    FuiModal.prototype.closeResult;
    /** @type {?} */
    FuiModal.prototype.controls;
    /** @type {?} */
    FuiModal.prototype.onApprove;
    /** @type {?} */
    FuiModal.prototype.onDeny;
    /** @type {?} */
    FuiModal.prototype.onDismiss;
    /** @type {?} */
    FuiModal.prototype.size;
    /** @type {?} */
    FuiModal.prototype.isCentered;
    /** @type {?} */
    FuiModal.prototype.isBasic;
    /** @type {?} */
    FuiModal.prototype.transitionController;
    /** @type {?} */
    FuiModal.prototype.transition;
    /** @type {?} */
    FuiModal.prototype.transitionDuration;
    /** @type {?} */
    FuiModal.prototype.dimBackground;
    /** @type {?} */
    FuiModal.prototype.templateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._modalElement;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._mustAlwaysScroll;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isClosing;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._originalContainer;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isFullScreen;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._mustScroll;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isInverted;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._componentFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL21vZGFsL2NvbXBvbmVudHMvbW9kYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWtCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRyxPQUFPLEVBQUMsVUFBVSxFQUFFLG9CQUFvQixFQUFFLG1CQUFtQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEcsT0FBTyxFQUFDLGFBQWEsRUFBYyxNQUFNLDJCQUEyQixDQUFDO0FBQ3JFLE9BQU8sRUFBQyxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFFL0Q7SUFpRkUsa0JBQW9CLFNBQW9CLEVBQVUsUUFBb0IsRUFBVSxpQkFBc0M7UUFBdEgsaUJBbUJDO1FBbkJtQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7OztZQUU5RyxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQW1CO1FBQ2pELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFeEIsMERBQTBEO1FBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTFDLHVFQUF1RTtRQUN2RSxJQUFJLENBQUMsUUFB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aWV3SW5pdCxcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgUmVuZGVyZXIyLFxyXG4gIFZpZXdDaGlsZCxcclxuICBWaWV3Q29udGFpbmVyUmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SUR5bmFtaWNDbGFzc2VzLCBLZXlDb2RlLCBGdWlDb21wb25lbnRGYWN0b3J5LCBVdGlsfSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge1RyYW5zaXRpb24sIFRyYW5zaXRpb25Db250cm9sbGVyLCBUcmFuc2l0aW9uRGlyZWN0aW9ufSBmcm9tICcuLi8uLi90cmFuc2l0aW9uL2ludGVybmFsJztcclxuaW1wb3J0IHtNb2RhbENvbnRyb2xzLCBNb2RhbFJlc3VsdH0gZnJvbSAnLi4vY2xhc3Nlcy9tb2RhbC1jb250cm9scyc7XHJcbmltcG9ydCB7TW9kYWxDb25maWcsIE1vZGFsU2l6ZX0gZnJvbSAnLi4vY2xhc3Nlcy9tb2RhbC1jb25maWcnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktbW9kYWwnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjwhLS0gUGFnZSBkaW1tZXIgZm9yIG1vZGFsIGJhY2tncm91bmQuIC0tPlxyXG48ZnVpLW1vZGFsLWRpbW1lciBbbmdDbGFzc109XCJ7J3RvcCBhbGlnbmVkJzogIWlzQ2VudGVyZWR9XCJcclxuICAgICAgICAgICAgICAgICAgW2NsYXNzLmludmVydGVkXT1cImlzSW52ZXJ0ZWRcIlxyXG4gICAgICAgICAgICAgICAgICBbKGlzRGltbWVkKV09XCJkaW1CYWNrZ3JvdW5kXCJcclxuICAgICAgICAgICAgICAgICAgW3RyYW5zaXRpb25EdXJhdGlvbl09XCJ0cmFuc2l0aW9uRHVyYXRpb25cIlxyXG4gICAgICAgICAgICAgICAgICAoY2xpY2spPVwiY2xvc2UoKVwiPlxyXG5cclxuICAgIDwhLS0gTW9kYWwgY29tcG9uZW50LCB3aXRoIHRyYW5zaXRpb24gY29tcG9uZW50IGF0dGFjaGVkIC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cInVpIG1vZGFsXCJcclxuICAgICAgICAgW2Z1aVRyYW5zaXRpb25dPVwidHJhbnNpdGlvbkNvbnRyb2xsZXJcIlxyXG4gICAgICAgICBbY2xhc3MuYWN0aXZlXT1cInRyYW5zaXRpb25Db250cm9sbGVyPy5pc1Zpc2libGVcIlxyXG4gICAgICAgICBbY2xhc3MuZnVsbHNjcmVlbl09XCJpc0Z1bGxTY3JlZW5cIlxyXG4gICAgICAgICBbY2xhc3MuYmFzaWNdPVwiaXNCYXNpY1wiXHJcbiAgICAgICAgIFtjbGFzcy5zY3JvbGxpbmddPVwibXVzdFNjcm9sbFwiXHJcbiAgICAgICAgIFtjbGFzcy5pbnZlcnRlZF09XCJpc0ludmVydGVkXCJcclxuICAgICAgICAgW25nQ2xhc3NdPVwiZHluYW1pY0NsYXNzZXNcIlxyXG4gICAgICAgICAoY2xpY2spPVwib25DbGljaygkZXZlbnQpXCJcclxuICAgICAgICAgI21vZGFsPlxyXG5cclxuICAgICAgICA8IS0tIENvbmZpZ3VyYWJsZSBjbG9zZSBpY29uIC0tPlxyXG4gICAgICAgIDxpIGNsYXNzPVwiY2xvc2UgaWNvblwiICpuZ0lmPVwiaXNDbG9zYWJsZVwiIChjbGljayk9XCJjbG9zZSgpXCI+PC9pPlxyXG4gICAgICAgIDwhLS0gPG5nLWNvbnRlbnQ+IHNvIHRoYXQgPGZ1aS1tb2RhbD4gY2FuIGJlIHVzZWQgYXMgYSBub3JtYWwgY29tcG9uZW50LiAtLT5cclxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICAgICAgPCEtLSBAVmlld0NoaWxkIHJlZmVyZW5jZSBzbyB3ZSBjYW4gaW5zZXJ0IGVsZW1lbnRzIGJlc2lkZSB0aGlzIGRpdi4gLS0+XHJcbiAgICAgICAgPGRpdiAjdGVtcGxhdGVTaWJsaW5nPjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvZnVpLW1vZGFsLWRpbW1lcj5cclxuYCxcclxuICBzdHlsZXM6IFtgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aU1vZGFsPFQsIFU+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQElucHV0KClcclxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG1vZGFsIGNhbiBiZSBjbG9zZWQgd2l0aCBhIGNsb3NlIGJ1dHRvbiwgY2xpY2tpbmcgb3V0c2lkZSwgb3IgdGhlIGVzY2FwZSBrZXkuXHJcbiAgcHVibGljIGlzQ2xvc2FibGU6IGJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICAvLyBWYWx1ZSB0byBkZW55IHdpdGggd2hlbiBjbG9zaW5nIHZpYSBgaXNDbG9zYWJsZWAuXHJcbiAgcHVibGljIGNsb3NlUmVzdWx0OiBVO1xyXG4gIC8vIFNlcGFyYXRlIGNsYXNzIGZvciB0aGUgYGFwcHJvdmVgIGFuZCBgZGVueWAgbWV0aG9kcyB0byBzdXBwb3J0IHBhc3NpbmcgaW50byBjb21wb25lbnRzLlxyXG4gIHB1YmxpYyBjb250cm9sczogTW9kYWxDb250cm9sczxULCBVPjtcclxuICAvLyBGaXJlcyB3aGVuIHRoZSBtb2RhbCBjbG9zZXMsIGFmdGVyIGBhcHByb3ZlYCBoYXMgYmVlbiBjYWxsZWQuXHJcbiAgQE91dHB1dCgnYXBwcm92ZWQnKVxyXG4gIHB1YmxpYyBvbkFwcHJvdmU6IEV2ZW50RW1pdHRlcjxUPjtcclxuICAvLyBGaXJlcyB3aGVuIHRoZSBtb2RhbCBjbG9zZXMsIGFmdGVyIGBkZW55YCBoYXMgYmVlbiBjYWxsZWQuXHJcbiAgQE91dHB1dCgnZGVuaWVkJylcclxuICBwdWJsaWMgb25EZW55OiBFdmVudEVtaXR0ZXI8VT47XHJcbiAgLy8gRmlyZXMgd2hlbiB0aGUgbW9kYWwgY2xvc2VzLlxyXG4gIEBPdXRwdXQoJ2Rpc21pc3NlZCcpXHJcbiAgcHVibGljIG9uRGlzbWlzczogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG4gIC8vIFNpemUgdXNlZCB0byBkaXNwbGF5IHRoZSBtb2RhbC5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzaXplOiBNb2RhbFNpemU7XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNDZW50ZXJlZDogYm9vbGVhbjtcclxuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgbW9kYWwgaGFzIGJhc2ljIHN0eWxlcyBhcHBsaWVkLlxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGlzQmFzaWM6IGJvb2xlYW47XHJcbiAgcHVibGljIHRyYW5zaXRpb25Db250cm9sbGVyOiBUcmFuc2l0aW9uQ29udHJvbGxlcjtcclxuICAvLyBUcmFuc2l0aW9uIHRvIGRpc3BsYXkgbW9kYWwgd2l0aC5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uOiBzdHJpbmc7XHJcbiAgLy8gRHVyYXRpb24gb2YgdGhlIG1vZGFsICYgZGltbWVyIHRyYW5zaXRpb25zLlxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyO1xyXG4gIC8vIFdoZXRoZXIgb3Igbm90IHRoZSBiYWNrcm91bmQgZGltbWVyIGlzIGFjdGl2ZS5cclxuICBwdWJsaWMgZGltQmFja2dyb3VuZDogYm9vbGVhbjtcclxuICAvLyBgVmlld0NvbnRhaW5lclJlZmAgZm9yIHRoZSBlbGVtZW50IHRoZSB0ZW1wbGF0ZSBnZXRzIGluamVjdGVkIGFzIGEgc2libGluZyBvZi5cclxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVNpYmxpbmcnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlfSlcclxuICBwdWJsaWMgdGVtcGxhdGVTaWJsaW5nOiBWaWV3Q29udGFpbmVyUmVmO1xyXG4gIEBWaWV3Q2hpbGQoJ21vZGFsJywge3N0YXRpYzogZmFsc2V9KVxyXG4gIHByaXZhdGUgX21vZGFsRWxlbWVudDogRWxlbWVudFJlZjtcclxuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgbW9kYWwgc2hvdWxkIGFsd2F5cyBkaXNwbGF5IGEgc2Nyb2xsYmFyLlxyXG4gIHByaXZhdGUgX211c3RBbHdheXNTY3JvbGw6IGJvb2xlYW47XHJcbiAgLy8gVHJ1ZSBhZnRlciBgYXBwcm92ZWAgb3IgYGRlbnlgIGhhcyBiZWVuIGNhbGxlZC5cclxuICBwcml2YXRlIF9pc0Nsb3Npbmc6IGJvb2xlYW47XHJcbiAgLy8gUGFyZW50IGVsZW1lbnQgb2YgbW9kYWwgYmVmb3JlIHJlbG9jYXRpb24gdG8gZG9jdW1lbnQgYm9keS5cclxuICBwcml2YXRlIF9vcmlnaW5hbENvbnRhaW5lcj86IEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgX2NvbXBvbmVudEZhY3Rvcnk6IEZ1aUNvbXBvbmVudEZhY3RvcnkpIHtcclxuICAgIC8vIEluaXRpYWxpc2Ugd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZnJvbSBgTW9kYWxDb25maWdgICh0byBhdm9pZCB3cml0aW5nIGRlZmF1bHRzIHR3aWNlKS5cclxuICAgIGNvbnN0IGNvbmZpZyA9IG5ldyBNb2RhbENvbmZpZzx1bmRlZmluZWQsIFQsIFU+KCk7XHJcbiAgICB0aGlzLmxvYWRDb25maWcoY29uZmlnKTtcclxuXHJcbiAgICAvLyBFdmVudCBlbWl0dGVycyBmb3IgZWFjaCBvZiB0aGUgcG9zc2libGUgbW9kYWwgb3V0Y29tZXMuXHJcbiAgICB0aGlzLm9uQXBwcm92ZSA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcclxuICAgIHRoaXMub25EZW55ID0gbmV3IEV2ZW50RW1pdHRlcjxVPigpO1xyXG4gICAgdGhpcy5vbkRpc21pc3MgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGlzZSBjb250cm9scyB3aXRoIGFjdGlvbnMgZm9yIHRoZSBgYXBwcm92ZWAgYW5kIGBkZW55YCBjYXNlcy5cclxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgTW9kYWxDb250cm9sczxULCBVPihcclxuICAgICAgcmVzID0+IHRoaXMuZGlzbWlzcygoKSA9PiB0aGlzLm9uQXBwcm92ZS5lbWl0KHJlcykpLFxyXG4gICAgICByZXMgPT4gdGhpcy5kaXNtaXNzKCgpID0+IHRoaXMub25EZW55LmVtaXQocmVzKSkpO1xyXG5cclxuICAgIC8vIEludGVybmFsIHZhcmlhYmxlIGluaXRpYWxpc2F0aW9uLlxyXG4gICAgdGhpcy5kaW1CYWNrZ3JvdW5kID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc0Nsb3NpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMudHJhbnNpdGlvbkNvbnRyb2xsZXIgPSBuZXcgVHJhbnNpdGlvbkNvbnRyb2xsZXIoZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBhcHByb3ZlKCk6IE1vZGFsUmVzdWx0PFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLmFwcHJvdmU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRlbnkoKTogTW9kYWxSZXN1bHQ8VT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbHMuZGVueTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZHluYW1pY0NsYXNzZXMoKTogSUR5bmFtaWNDbGFzc2VzIHtcclxuICAgIGNvbnN0IGNsYXNzZXM6IElEeW5hbWljQ2xhc3NlcyA9IHt9O1xyXG4gICAgaWYgKHRoaXMuc2l6ZSkge1xyXG4gICAgICBjbGFzc2VzW3RoaXMuc2l6ZV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICAvLyBXaGV0aGVyIHRoZSBtb2RhbCB0YWtlcyB1cCB0aGUgZnVsbCB3aWR0aCBvZiB0aGUgc2NyZWVuLlxyXG4gIHByaXZhdGUgX2lzRnVsbFNjcmVlbjogYm9vbGVhbjtcclxuXHJcbiAgLy8gVmFsdWUgdG8gZGVueSB3aXRoIHdoZW4gY2xvc2luZyB2aWEgYGlzQ2xvc2FibGVgLlxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBpc0Z1bGxTY3JlZW4oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNGdWxsU2NyZWVuO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBpc0Z1bGxTY3JlZW4oZnVsbFNjcmVlbjogYm9vbGVhbikge1xyXG4gICAgdGhpcy5faXNGdWxsU2NyZWVuID0gVXRpbC5ET00ucGFyc2VCb29sZWFuQXR0cmlidXRlKGZ1bGxTY3JlZW4pO1xyXG4gIH1cclxuXHJcbiAgLy8gV2hldGhlciB0aGUgbW9kYWwgY3VycmVudGx5IGlzIGRpc3BsYXlpbmcgYSBzY3JvbGxiYXIuXHJcbiAgcHJpdmF0ZSBfbXVzdFNjcm9sbDogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IG11c3RTY3JvbGwoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fbXVzdFNjcm9sbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgbXVzdFNjcm9sbChtdXN0U2Nyb2xsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9tdXN0U2Nyb2xsID0gbXVzdFNjcm9sbDtcclxuICAgIC8vICdDYWNoZScgdmFsdWUgaW4gX211c3RBbHdheXNTY3JvbGwgc28gdGhhdCBpZiBgdHJ1ZWAsIF9tdXN0U2Nyb2xsIGlzbid0IGV2ZXIgYXV0by11cGRhdGVkLlxyXG4gICAgdGhpcy5fbXVzdEFsd2F5c1Njcm9sbCA9IG11c3RTY3JvbGw7XHJcbiAgICB0aGlzLnVwZGF0ZVNjcm9sbCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gV2hldGhlciB0aGUgbW9kYWwgc2hvd3MgYWdhaW5zdCBhIGxpZ2h0IGJhY2tncm91bmQuXHJcbiAgcHJpdmF0ZSBfaXNJbnZlcnRlZDogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IGlzSW52ZXJ0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNJbnZlcnRlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgaXNJbnZlcnRlZChpbnZlcnRlZDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5faXNJbnZlcnRlZCA9IFV0aWwuRE9NLnBhcnNlQm9vbGVhbkF0dHJpYnV0ZShpbnZlcnRlZCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAvLyBUcmFuc2l0aW9uIHRoZSBtb2RhbCB0byBiZSB2aXNpYmxlLlxyXG4gICAgdGhpcy50cmFuc2l0aW9uQ29udHJvbGxlci5hbmltYXRlKG5ldyBUcmFuc2l0aW9uKHRoaXMudHJhbnNpdGlvbiwgdGhpcy50cmFuc2l0aW9uRHVyYXRpb24sIFRyYW5zaXRpb25EaXJlY3Rpb24uSW4pKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5kaW1CYWNrZ3JvdW5kID0gdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgLy8gTW92ZSB0aGUgbW9kYWwgdG8gdGhlIGRvY3VtZW50IGJvZHkgdG8gZW5zdXJlIGNvcnJlY3Qgc2Nyb2xsaW5nLlxyXG4gICAgdGhpcy5fb3JpZ2luYWxDb250YWluZXIgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSEuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcclxuICAgIC8vIFJlbW92ZSB0aGUgI3RlbXBsYXRlU2libGluZyBlbGVtZW50IGZyb20gdGhlIERPTSB0byBmaXggYm90dG9tIGJvcmRlciBzdHlsZXMuXHJcbiAgICBjb25zdCB0ZW1wbGF0ZUVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlU2libGluZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgYXMgRWxlbWVudDtcclxuICAgIGlmICh0ZW1wbGF0ZUVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wbGF0ZUVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9tb2RhbEVsZW1lbnQubmF0aXZlRWxlbWVudCBhcyBFbGVtZW50O1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVNjcm9sbCgpKTtcclxuXHJcbiAgICAvLyBGb2N1cyBhbnkgZWxlbWVudCB3aXRoIFthdXRvZm9jdXNdIGF0dHJpYnV0ZS5cclxuICAgIGNvbnN0IGF1dG9Gb2N1cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10nKSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XHJcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XHJcbiAgICAgIC8vIEF1dG9mb2N1cyBhZnRlciB0aGUgYnJvd3NlciBoYXMgaGFkIHRpbWUgdG8gcHJvY2VzcyBvdGhlciBldmVudCBoYW5kbGVycy5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiBhdXRvRm9jdXMuZm9jdXMoKSwgMTApO1xyXG4gICAgICAvLyBUcnkgdG8gZm9jdXMgYWdhaW4gd2hlbiB0aGUgbW9kYWwgaGFzIG9wZW5lZCBzbyB0aGF0IGF1dG9mb2N1cyB3b3JrcyBpbiBJRTExLlxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IGF1dG9Gb2N1cy5mb2N1cygpLCB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBVcGRhdGVzIHRoZSBtb2RhbCB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlndXJhdGlvbi5cclxuICBwdWJsaWMgbG9hZENvbmZpZzxWPihjb25maWc6IE1vZGFsQ29uZmlnPFYsIFQsIFU+KTogdm9pZCB7XHJcbiAgICB0aGlzLmlzQ2xvc2FibGUgPSBjb25maWcuaXNDbG9zYWJsZTtcclxuICAgIHRoaXMuY2xvc2VSZXN1bHQgPSBjb25maWcuY2xvc2VSZXN1bHQ7XHJcblxyXG4gICAgdGhpcy5zaXplID0gY29uZmlnLnNpemU7XHJcbiAgICB0aGlzLmlzRnVsbFNjcmVlbiA9IGNvbmZpZy5pc0Z1bGxTY3JlZW47XHJcbiAgICB0aGlzLmlzQmFzaWMgPSBjb25maWcuaXNCYXNpYztcclxuICAgIHRoaXMuaXNJbnZlcnRlZCA9IGNvbmZpZy5pc0ludmVydGVkO1xyXG4gICAgdGhpcy5pc0NlbnRlcmVkID0gY29uZmlnLmlzQ2VudGVyZWQ7XHJcblxyXG4gICAgdGhpcy5tdXN0U2Nyb2xsID0gY29uZmlnLm11c3RTY3JvbGw7XHJcblxyXG4gICAgdGhpcy50cmFuc2l0aW9uID0gY29uZmlnLnRyYW5zaXRpb247XHJcbiAgICB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGNvbmZpZy50cmFuc2l0aW9uRHVyYXRpb247XHJcbiAgfVxyXG5cclxuICAvLyBDbG9zZXMgdGhlIG1vZGFsIHdpdGggYSAnZGVueScgb3V0Y29tZSwgdXNpbmcgdGhlIHNwZWNpZmllZCBkZWZhdWx0IHJlYXNvbi5cclxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pc0Nsb3NhYmxlKSB7XHJcbiAgICAgIC8vIElmIHdlIGFyZSBhbGxvd2VkIHRvIGNsb3NlLCBmaXJlIHRoZSBkZW55IHJlc3VsdCB3aXRoIHRoZSBkZWZhdWx0IHZhbHVlLlxyXG4gICAgICB0aGlzLmRlbnkodGhpcy5jbG9zZVJlc3VsdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb25DbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAvLyBNYWtlcyBzZW5zZSBoZXJlLCBhcyB0aGUgbW9kYWwgc2hvdWxkbid0IGJlIGF0dGFjaGVkIHRvIGFueSBET00gZWxlbWVudC5cclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvLyBEb2N1bWVudCBsaXN0ZW5lciBpcyBmaW5lIGhlcmUgYmVjYXVzZSBub2JvZHkgd2lsbCBoYXZlIGVub3VnaCBtb2RhbHMgb3Blbi5cclxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXl1cCcsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uRG9jdW1lbnRLZXlVcChlOiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XHJcbiAgICBpZiAoZS5rZXlDb2RlID09PSBLZXlDb2RlLkVzY2FwZSkge1xyXG4gICAgICAvLyBDbG9zZSBhdXRvbWF0aWNhbGx5IGNvdmVycyBjYXNlIG9mIGAhaXNDbG9zYWJsZWAsIHNvIGNoZWNrIG5vdCBuZWVkZWQuXHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnKVxyXG4gIHB1YmxpYyBvbkRvY3VtZW50UmVzaXplKCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGRhdGVTY3JvbGwoKTtcclxuICB9XHJcblxyXG4gIC8vIERpc21pc3NlcyB0aGUgbW9kYWwgd2l0aCBhIHRyYW5zaXRpb24sIGZpcmluZyB0aGUgY2FsbGJhY2sgYWZ0ZXIgdGhlIG1vZGFsIGhhcyBmaW5pc2hlZCB0cmFuc2l0aW9uaW5nLlxyXG4gIHByaXZhdGUgZGlzbWlzcyhjYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHtcclxuICB9KTogdm9pZCB7XHJcbiAgICAvLyBJZiB3ZSBhcmVuJ3QgY3VycmVudGx5IGNsb3NpbmcsXHJcbiAgICBpZiAoIXRoaXMuX2lzQ2xvc2luZykge1xyXG4gICAgICB0aGlzLl9pc0Nsb3NpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgLy8gVHJhbnNpdGlvbiB0aGUgbW9kYWwgdG8gYmUgaW52aXNpYmxlLlxyXG4gICAgICB0aGlzLmRpbUJhY2tncm91bmQgPSBmYWxzZTtcclxuICAgICAgdGhpcy50cmFuc2l0aW9uQ29udHJvbGxlci5zdG9wQWxsKCk7XHJcbiAgICAgIHRoaXMudHJhbnNpdGlvbkNvbnRyb2xsZXIuYW5pbWF0ZShcclxuICAgICAgICBuZXcgVHJhbnNpdGlvbih0aGlzLnRyYW5zaXRpb24sIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uLCBUcmFuc2l0aW9uRGlyZWN0aW9uLk91dCwgKCkgPT4ge1xyXG4gICAgICAgICAgLy8gV2hlbiBkb25lLCBtb3ZlIHRoZSBtb2RhbCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBsb2NhdGlvbiwgZW1pdCBhIGRpc21pc3MgZXZlbnQsIGFuZCBmaXJlIHRoZSBjYWxsYmFjay5cclxuICAgICAgICAgIGlmICh0aGlzLl9vcmlnaW5hbENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5hbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5vbkRpc21pc3MuZW1pdCgpO1xyXG4gICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBEZWNpZGVzIHdoZXRoZXIgdGhlIG1vZGFsIG5lZWRzIHRvIHJlcG9zaXRpb24gdG8gYWxsb3cgc2Nyb2xsaW5nLlxyXG4gIHByaXZhdGUgdXBkYXRlU2Nyb2xsKCk6IHZvaWQge1xyXG5cclxuICAgIC8vIF9tdXN0QWx3YXlzU2Nyb2xsIHdvcmtzIGJ5IHN0b3BwaW5nIF9tdXN0U2Nyb2xsIGZyb20gYmVpbmcgYXV0b21hdGljYWxseSB1cGRhdGVkLCBzbyBpdCBzdGF5cyBgdHJ1ZWAuXHJcbiAgICBpZiAoIXRoaXMuX211c3RBbHdheXNTY3JvbGwgJiYgdGhpcy5fbW9kYWxFbGVtZW50KSB7XHJcblxyXG4gICAgICAvLyBGb21hbnRpYyBVSSBtb2RhbCBtYXJnaW4gYW5kIGRpbW1lciBwYWRkaW5nIGFyZSAxcmVtLCB3aGljaCBpcyByZWxhdGl2ZSB0byB0aGUgZ2xvYmFsIGZvbnQgc2l6ZSwgc28gZm9yIGNvbXBhdGliaWxpdHk6XHJcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpKTtcclxuICAgICAgY29uc3QgbWFyZ2luID0gZm9udFNpemUgKiAyO1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fbW9kYWxFbGVtZW50Lm5hdGl2ZUVsZW1lbnQgYXMgRWxlbWVudDtcclxuXHJcbiAgICAgIC8vIFRoZSBtb2RhbCBtdXN0IHNjcm9sbCBpZiB0aGUgd2luZG93IGhlaWdodCBpcyBzbWFsbGVyIHRoYW4gdGhlIG1vZGFsIGhlaWdodCArIGJvdGggbWFyZ2lucy5cclxuICAgICAgdGhpcy5fbXVzdFNjcm9sbCA9IHdpbmRvdy5pbm5lckhlaWdodCA8IGVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgbWFyZ2luICogMjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19