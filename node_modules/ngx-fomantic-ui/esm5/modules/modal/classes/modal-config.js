/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/** @type {?} */
export var ModalSize = {
    Mini: (/** @type {?} */ ('mini')),
    Tiny: (/** @type {?} */ ('tiny')),
    Small: (/** @type {?} */ ('small')),
    Normal: (/** @type {?} */ ('normal')),
    Large: (/** @type {?} */ ('large'))
};
// Stores a basic set of configuration options for a modal.
/**
 * @template T, U, V
 */
var 
// Stores a basic set of configuration options for a modal.
/**
 * @template T, U, V
 */
ModalConfig = /** @class */ (function () {
    function ModalConfig(context, isClosable) {
        if (context === void 0) { context = undefined; }
        if (isClosable === void 0) { isClosable = true; }
        // Initialise with default values.
        this.isClosable = isClosable;
        this.context = context;
        this.size = ModalSize.Normal;
        this.isFullScreen = false;
        this.isBasic = false;
        this.isInverted = false;
        this.isCentered = true;
        this.mustScroll = false;
        this.transition = 'scale';
        this.transitionDuration = 500;
    }
    return ModalConfig;
}());
// Stores a basic set of configuration options for a modal.
/**
 * @template T, U, V
 */
export { ModalConfig };
if (false) {
    /** @type {?} */
    ModalConfig.prototype.isClosable;
    /** @type {?} */
    ModalConfig.prototype.closeResult;
    /** @type {?} */
    ModalConfig.prototype.context;
    /** @type {?} */
    ModalConfig.prototype.size;
    /** @type {?} */
    ModalConfig.prototype.isFullScreen;
    /** @type {?} */
    ModalConfig.prototype.isBasic;
    /** @type {?} */
    ModalConfig.prototype.isInverted;
    /** @type {?} */
    ModalConfig.prototype.isCentered;
    /** @type {?} */
    ModalConfig.prototype.mustScroll;
    /** @type {?} */
    ModalConfig.prototype.transition;
    /** @type {?} */
    ModalConfig.prototype.transitionDuration;
}
// Used when creating a modal from a `TemplateRef`.
/**
 * @template T, U, V
 */
var 
// Used when creating a modal from a `TemplateRef`.
/**
 * @template T, U, V
 */
TemplateModalConfig = /** @class */ (function (_super) {
    tslib_1.__extends(TemplateModalConfig, _super);
    function TemplateModalConfig(template, context, isClosable) {
        if (context === void 0) { context = undefined; }
        if (isClosable === void 0) { isClosable = true; }
        var _this = _super.call(this, context, isClosable) || this;
        _this.template = template;
        return _this;
    }
    return TemplateModalConfig;
}(ModalConfig));
// Used when creating a modal from a `TemplateRef`.
/**
 * @template T, U, V
 */
export { TemplateModalConfig };
if (false) {
    /** @type {?} */
    TemplateModalConfig.prototype.template;
}
// Used when creating a modal from an existing component.
/**
 * @template T, U, V
 */
var 
// Used when creating a modal from an existing component.
/**
 * @template T, U, V
 */
ComponentModalConfig = /** @class */ (function (_super) {
    tslib_1.__extends(ComponentModalConfig, _super);
    function ComponentModalConfig(component, context, isClosable) {
        if (context === void 0) { context = undefined; }
        if (isClosable === void 0) { isClosable = true; }
        var _this = _super.call(this, context, isClosable) || this;
        _this.component = component;
        return _this;
    }
    return ComponentModalConfig;
}(ModalConfig));
// Used when creating a modal from an existing component.
/**
 * @template T, U, V
 */
export { ComponentModalConfig };
if (false) {
    /** @type {?} */
    ComponentModalConfig.prototype.component;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9tb2RhbC9jbGFzc2VzL21vZGFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxNQUFNLEtBQU8sU0FBUyxHQUFHO0lBQ3ZCLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWE7SUFDekIsSUFBSSxFQUFFLG1CQUFBLE1BQU0sRUFBYTtJQUN6QixLQUFLLEVBQUUsbUJBQUEsT0FBTyxFQUFhO0lBQzNCLE1BQU0sRUFBRSxtQkFBQSxRQUFRLEVBQWE7SUFDN0IsS0FBSyxFQUFFLG1CQUFBLE9BQU8sRUFBYTtDQUM1Qjs7Ozs7QUFHRDs7Ozs7O0lBNEJFLHFCQUFZLE9BQWtDLEVBQUUsVUFBMEI7UUFBOUQsd0JBQUEsRUFBQSxtQkFBa0M7UUFBRSwyQkFBQSxFQUFBLGlCQUEwQjtRQUN4RSxrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUM7SUFDaEMsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQzs7Ozs7Ozs7SUExQ0MsaUNBQTJCOztJQUUzQixrQ0FBc0I7O0lBR3RCLDhCQUFtQjs7SUFHbkIsMkJBQXVCOztJQUV2QixtQ0FBNkI7O0lBRTdCLDhCQUF3Qjs7SUFFeEIsaUNBQTJCOztJQUUzQixpQ0FBMkI7O0lBRzNCLGlDQUEyQjs7SUFHM0IsaUNBQTBCOztJQUUxQix5Q0FBa0M7Ozs7OztBQXFCcEM7Ozs7OztJQUEwRSwrQ0FBb0I7SUFHNUYsNkJBQVksUUFBZ0MsRUFBRSxPQUFrQyxFQUFFLFVBQTBCO1FBQTlELHdCQUFBLEVBQUEsbUJBQWtDO1FBQUUsMkJBQUEsRUFBQSxpQkFBMEI7UUFBNUcsWUFDRSxrQkFBTSxPQUFPLEVBQUUsVUFBVSxDQUFDLFNBRzNCO1FBREMsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7O0lBQzNCLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUFSRCxDQUEwRSxXQUFXLEdBUXBGOzs7Ozs7OztJQVBDLHVDQUF3Qzs7Ozs7O0FBVTFDOzs7Ozs7SUFBMkUsZ0RBQW9CO0lBRzdGLDhCQUFZLFNBQW9CLEVBQUUsT0FBa0MsRUFBRSxVQUEwQjtRQUE5RCx3QkFBQSxFQUFBLG1CQUFrQztRQUFFLDJCQUFBLEVBQUEsaUJBQTBCO1FBQWhHLFlBQ0Usa0JBQU0sT0FBTyxFQUFFLFVBQVUsQ0FBQyxTQUczQjtRQURDLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDOztJQUM3QixDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBUkQsQ0FBMkUsV0FBVyxHQVFyRjs7Ozs7Ozs7SUFQQyx5Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R5cGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge01vZGFsVGVtcGxhdGV9IGZyb20gJy4vbW9kYWwtdGVtcGxhdGUnO1xyXG5cclxuZXhwb3J0IHR5cGUgTW9kYWxTaXplID0gJ21pbmknIHwgJ3RpbnknIHwgJ3NtYWxsJyB8ICdub3JtYWwnIHwgJ2xhcmdlJztcclxuXHJcbmV4cG9ydCBjb25zdCBNb2RhbFNpemUgPSB7XHJcbiAgTWluaTogJ21pbmknIGFzIE1vZGFsU2l6ZSxcclxuICBUaW55OiAndGlueScgYXMgTW9kYWxTaXplLFxyXG4gIFNtYWxsOiAnc21hbGwnIGFzIE1vZGFsU2l6ZSxcclxuICBOb3JtYWw6ICdub3JtYWwnIGFzIE1vZGFsU2l6ZSxcclxuICBMYXJnZTogJ2xhcmdlJyBhcyBNb2RhbFNpemVcclxufTtcclxuXHJcbi8vIFN0b3JlcyBhIGJhc2ljIHNldCBvZiBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGEgbW9kYWwuXHJcbmV4cG9ydCBjbGFzcyBNb2RhbENvbmZpZzxULCBVID0gdW5kZWZpbmVkLCBWID0gdW5kZWZpbmVkPiB7XHJcbiAgLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBtb2RhbCBjYW4gYmUgY2xvc2VkIHdpdGggYSBjbG9zZSBidXR0b24sIGNsaWNraW5nIG91dHNpZGUsIG9yIHRoZSBlc2NhcGUga2V5LlxyXG4gIHB1YmxpYyBpc0Nsb3NhYmxlOiBib29sZWFuO1xyXG4gIC8vIFZhbHVlIHRvIGRlbnkgd2l0aCB3aGVuIGNsb3NpbmcgdmlhIGBpc0Nsb3NhYmxlYC5cclxuICBwdWJsaWMgY2xvc2VSZXN1bHQ6IFY7XHJcblxyXG4gIC8vIERhdGEgdG8gcGFzcyB0byB0aGUgbW9kYWwgaW5zdGFuY2Ugd2hlbiBvcGVuZWQuXHJcbiAgcHVibGljIGNvbnRleHQ/OiBUO1xyXG5cclxuICAvLyBTaXplIHVzZWQgdG8gZGlzcGxheSB0aGUgbW9kYWwuXHJcbiAgcHVibGljIHNpemU6IE1vZGFsU2l6ZTtcclxuICAvLyBXaGV0aGVyIHRoZSBtb2RhbCB0YWtlcyB1cCB0aGUgZnVsbCB3aWR0aCBvZiB0aGUgc2NyZWVuLlxyXG4gIHB1YmxpYyBpc0Z1bGxTY3JlZW46IGJvb2xlYW47XHJcbiAgLy8gV2hldGhlciBvciBub3QgdGhlIG1vZGFsIGhhcyBiYXNpYyBzdHlsZXMgYXBwbGllZC5cclxuICBwdWJsaWMgaXNCYXNpYzogYm9vbGVhbjtcclxuICAvLyBXaGV0aGVyIHRoZSBtb2RhbCBzaG93cyBhZ2FpbnN0IGEgbGlnaHQgYmFja2dyb3VuZC5cclxuICBwdWJsaWMgaXNJbnZlcnRlZDogYm9vbGVhbjtcclxuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgbW9kYWwgc2hvdWxkIGJlIHBsYWNlZCBpbiB0aGUgY2VudGVyIG9mIHRoZSBwYWdlLlxyXG4gIHB1YmxpYyBpc0NlbnRlcmVkOiBib29sZWFuO1xyXG5cclxuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgbW9kYWwgc2hvdWxkIGFsd2F5cyBkaXNwbGF5IGEgc2Nyb2xsYmFyLlxyXG4gIHB1YmxpYyBtdXN0U2Nyb2xsOiBib29sZWFuO1xyXG5cclxuICAvLyBUcmFuc2l0aW9uIHRvIGRpc3BsYXkgbW9kYWwgd2l0aC5cclxuICBwdWJsaWMgdHJhbnNpdGlvbjogc3RyaW5nO1xyXG4gIC8vIER1cmF0aW9uIG9mIHRoZSBtb2RhbCAmIGRpbW1lciB0cmFuc2l0aW9ucy5cclxuICBwdWJsaWMgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIGlzQ2xvc2FibGU6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAvLyBJbml0aWFsaXNlIHdpdGggZGVmYXVsdCB2YWx1ZXMuXHJcbiAgICB0aGlzLmlzQ2xvc2FibGUgPSBpc0Nsb3NhYmxlO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuXHJcbiAgICB0aGlzLnNpemUgPSBNb2RhbFNpemUuTm9ybWFsO1xyXG4gICAgdGhpcy5pc0Z1bGxTY3JlZW4gPSBmYWxzZTtcclxuICAgIHRoaXMuaXNCYXNpYyA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0ludmVydGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzQ2VudGVyZWQgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMubXVzdFNjcm9sbCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMudHJhbnNpdGlvbiA9ICdzY2FsZSc7XHJcbiAgICB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiA9IDUwMDtcclxuICB9XHJcbn1cclxuXHJcbi8vIFVzZWQgd2hlbiBjcmVhdGluZyBhIG1vZGFsIGZyb20gYSBgVGVtcGxhdGVSZWZgLlxyXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVNb2RhbENvbmZpZzxULCBVID0gdW5kZWZpbmVkLCBWID0gdW5kZWZpbmVkPiBleHRlbmRzIE1vZGFsQ29uZmlnPFQsIFUsIFY+IHtcclxuICBwdWJsaWMgdGVtcGxhdGU6IE1vZGFsVGVtcGxhdGU8VCwgVSwgVj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBNb2RhbFRlbXBsYXRlPFQsIFUsIFY+LCBjb250ZXh0OiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBpc0Nsb3NhYmxlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgc3VwZXIoY29udGV4dCwgaXNDbG9zYWJsZSk7XHJcblxyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gVXNlZCB3aGVuIGNyZWF0aW5nIGEgbW9kYWwgZnJvbSBhbiBleGlzdGluZyBjb21wb25lbnQuXHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRNb2RhbENvbmZpZzxULCBVID0gdW5kZWZpbmVkLCBWID0gdW5kZWZpbmVkPiBleHRlbmRzIE1vZGFsQ29uZmlnPFQsIFUsIFY+IHtcclxuICBwdWJsaWMgY29tcG9uZW50OiBUeXBlPGFueT47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbXBvbmVudDogVHlwZTxhbnk+LCBjb250ZXh0OiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBpc0Nsb3NhYmxlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgc3VwZXIoY29udGV4dCwgaXNDbG9zYWJsZSk7XHJcblxyXG4gICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==