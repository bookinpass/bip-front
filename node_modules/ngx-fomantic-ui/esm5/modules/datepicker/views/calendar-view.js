/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, QueryList, ViewChildren } from '@angular/core';
import { KeyCode } from '../../../misc/util/internal';
import { FuiCalendarItem } from '../directives/calendar-item';
import { CalendarService } from '../services/calendar.service';
/** @enum {number} */
var CalendarViewType = {
    Year: 0,
    Month: 1,
    Date: 2,
    Hour: 3,
    Minute: 4,
};
export { CalendarViewType };
CalendarViewType[CalendarViewType.Year] = 'Year';
CalendarViewType[CalendarViewType.Month] = 'Month';
CalendarViewType[CalendarViewType.Date] = 'Date';
CalendarViewType[CalendarViewType.Hour] = 'Hour';
CalendarViewType[CalendarViewType.Minute] = 'Minute';
/**
 * @abstract
 */
var CalendarView = /** @class */ (function () {
    function CalendarView(renderer, viewType, ranges) {
        var _this = this;
        this._type = viewType;
        this.ranges = ranges;
        this._documentKeyDownListener = renderer.listen('document', 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.onDocumentKeyDown(e); }));
    }
    Object.defineProperty(CalendarView.prototype, "currentDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.currentDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarView.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.selectedDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarView.prototype, "service", {
        get: /**
         * @return {?}
         */
        function () {
            return this._service;
        },
        set: /**
         * @param {?} service
         * @return {?}
         */
        function (service) {
            var _this = this;
            this._service = service;
            this.ranges.loadService(service);
            this.service.onManualUpdate = (/**
             * @return {?}
             */
            function () {
                _this.ranges.refresh();
                delete _this._highlightedItem;
                _this.autoHighlight();
            });
        },
        enumerable: true,
        configurable: true
    });
    // Template Methods
    // Template Methods
    /**
     * @param {?} item
     * @return {?}
     */
    CalendarView.prototype.setDate = 
    // Template Methods
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.service.changeDate(item.date, this._type);
    };
    /**
     * @return {?}
     */
    CalendarView.prototype.zoomOut = /**
     * @return {?}
     */
    function () {
        this.service.zoomOut(this._type);
    };
    // Keyboard Control
    // Keyboard Control
    /**
     * @return {?}
     */
    CalendarView.prototype.ngAfterViewInit = 
    // Keyboard Control
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._renderedItems.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.onRenderedItemsChanged(); }));
        this.onRenderedItemsChanged();
    };
    /**
     * @return {?}
     */
    CalendarView.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._documentKeyDownListener();
    };
    /**
     * @private
     * @return {?}
     */
    CalendarView.prototype.onRenderedItemsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._renderedItems.forEach((/**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            return i.onFocussed.subscribe((/**
             * @param {?} hasFocus
             * @return {?}
             */
            function (hasFocus) {
                if (hasFocus) {
                    _this.highlightItem(i.item);
                }
            }));
        }));
        this.autoHighlight();
        this.highlightItem(this._highlightedItem);
    };
    /**
     * @private
     * @return {?}
     */
    CalendarView.prototype.autoHighlight = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var date = this.selectedDate && this.ranges.current.containsDate(this.selectedDate) ? this.selectedDate : this.currentDate;
        if (this._highlightedItem && this.ranges.current.containsDate(this._highlightedItem.date)) {
            date = this._highlightedItem.date;
        }
        /** @type {?} */
        var initiallyHighlighted = this.ranges.current.items.find((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return _this.ranges.dateComparer.equal(i.date, date); }));
        if (initiallyHighlighted && !initiallyHighlighted.isDisabled) {
            this._highlightedItem = initiallyHighlighted;
        }
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    CalendarView.prototype.highlightItem = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this._renderedItems.forEach((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i.hasFocus = false; }));
            /** @type {?} */
            var rendered = this._renderedItems.find((/**
             * @param {?} ri
             * @return {?}
             */
            function (ri) { return ri.item === item; }));
            if (rendered && !rendered.hasFocus) {
                rendered.hasFocus = true;
                rendered.changeDetector.detectChanges();
            }
            this._highlightedItem = item;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    CalendarView.prototype.onDocumentKeyDown = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._highlightedItem && e.keyCode === KeyCode.Enter) {
            this.setDate(this._highlightedItem);
            return;
        }
        if (!this._highlightedItem) {
            this.autoHighlight();
        }
        /** @type {?} */
        var index = this.ranges.current.findIndex(this._highlightedItem);
        /** @type {?} */
        var isMovingForward = true;
        /** @type {?} */
        var delta = 0;
        switch (e.keyCode) {
            case KeyCode.Right:
                delta += 1;
                break;
            case KeyCode.Left:
                delta -= 1;
                isMovingForward = false;
                break;
            case KeyCode.Down:
                delta += this.ranges.columns;
                break;
            case KeyCode.Up:
                delta -= this.ranges.columns;
                isMovingForward = false;
                break;
            default:
                return;
        }
        // Stop these keypresses being captured elsewhere.
        e.preventDefault();
        /** @type {?} */
        var nextItem = this.ranges.current.items[index + delta];
        if (nextItem && nextItem.isDisabled) {
            return;
        }
        if (nextItem && !nextItem.isOutsideRange) {
            return this.highlightItem(nextItem);
        }
        if (nextItem && nextItem.isOutsideRange) {
            if (index + delta >= this.ranges.current.inRange.length) {
                isMovingForward = true;
            }
        }
        if (!nextItem) {
            /** @type {?} */
            var adjustedIndex = this.ranges.current.findIndex(this._highlightedItem);
            /** @type {?} */
            var nextItems = this.ranges.calc(isMovingForward).inRange;
            if (isMovingForward) {
                adjustedIndex -= this.ranges.current.inRange.length;
            }
            else {
                adjustedIndex += nextItems.length;
            }
            nextItem = nextItems[adjustedIndex + delta];
            if (nextItem.isDisabled) {
                return;
            }
        }
        this.ranges.move(isMovingForward);
        this._highlightedItem = this.ranges.current.find(nextItem);
    };
    CalendarView.propDecorators = {
        _renderedItems: [{ type: ViewChildren, args: [FuiCalendarItem,] }],
        service: [{ type: Input }]
    };
    return CalendarView;
}());
export { CalendarView };
if (false) {
    /** @type {?} */
    CalendarView.prototype.ranges;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._type;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._renderedItems;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._highlightedItem;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._documentKeyDownListener;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._service;
}
//# sourceMappingURL=data:application/json;base64,