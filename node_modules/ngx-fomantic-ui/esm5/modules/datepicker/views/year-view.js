/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision, DateUtil, Util } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
var CalendarRangeYearService = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarRangeYearService, _super);
    function CalendarRangeYearService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    CalendarRangeYearService.prototype.configureItem = /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    function (item, baseDate) {
        item.humanReadable = Util.String.padLeft(item.date.getFullYear().toString(), 4, '0');
        item.isOutsideRange = item.date.getFullYear() >= this.calcStart(baseDate).getFullYear() + 10;
    };
    return CalendarRangeYearService;
}(CalendarRangeService));
export { CalendarRangeYearService };
var FuiCalendarYearView = /** @class */ (function (_super) {
    tslib_1.__extends(FuiCalendarYearView, _super);
    function FuiCalendarYearView(renderer) {
        return _super.call(this, renderer, CalendarViewType.Year, new CalendarRangeYearService(DatePrecision.Decade, 4, 3)) || this;
    }
    Object.defineProperty(FuiCalendarYearView.prototype, "decadeStart", {
        get: /**
         * @return {?}
         */
        function () {
            return DateUtil
                .startOf(DatePrecision.Decade, DateUtil.clone(this.service.currentDate))
                .getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} year
     * @return {?}
     */
    FuiCalendarYearView.prototype.pad = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        return Util.String.padLeft(year.toString(), 4, '0');
    };
    FuiCalendarYearView.decorators = [
        { type: Component, args: [{
                    selector: 'fui-calendar-year-view',
                    template: "\n<table class=\"ui celled center aligned unstackable table three column year\">\n<thead>\n    <tr>\n        <th colspan=\"3\">\n            <fui-calendar-view-title [ranges]=\"ranges\" (zoomOut)=\"zoomOut()\">\n                {{ pad(decadeStart) }} - {{ pad(decadeStart + 10) }}\n            </fui-calendar-view-title>\n        </th>\n    </tr>\n</thead>\n<tbody>\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\n        <td class=\"link\"\n            *ngFor=\"let item of group\"\n            [calendarItem]=\"item\"\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\n        </td>\n    </tr>\n</tbody>\n</table>\n"
                }] }
    ];
    /** @nocollapse */
    FuiCalendarYearView.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return FuiCalendarYearView;
}(CalendarView));
export { FuiCalendarYearView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhci12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL3ZpZXdzL3llYXItdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFFLE9BQU8sRUFBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUV4RTtJQUE4QyxvREFBb0I7SUFBbEU7O0lBS0EsQ0FBQzs7Ozs7O0lBSlEsZ0RBQWE7Ozs7O0lBQXBCLFVBQXFCLElBQWtCLEVBQUUsUUFBYztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUMvRixDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBOEMsb0JBQW9CLEdBS2pFOztBQUVEO0lBeUJ5QywrQ0FBWTtJQUNuRCw2QkFBWSxRQUFtQjtlQUM3QixrQkFBTSxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksd0JBQXdCLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQUVELHNCQUFXLDRDQUFXOzs7O1FBQXRCO1lBQ0UsT0FBTyxRQUFRO2lCQUNaLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDdkUsV0FBVyxFQUFFLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7Ozs7O0lBRU0saUNBQUc7Ozs7SUFBVixVQUFXLElBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7O2dCQXRDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsUUFBUSxFQUFFLHdvQkFxQlg7aUJBQ0E7Ozs7Z0JBckNrQixTQUFTOztJQW9ENUIsMEJBQUM7Q0FBQSxBQXZDRCxDQXlCeUMsWUFBWSxHQWNwRDtTQWRZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RhdGVQcmVjaXNpb24sIERhdGVVdGlsLCBVdGlsfSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge0NhbGVuZGFyVmlldywgQ2FsZW5kYXJWaWV3VHlwZX0gZnJvbSAnLi9jYWxlbmRhci12aWV3JztcclxuaW1wb3J0IHtDYWxlbmRhckl0ZW19IGZyb20gJy4uL2RpcmVjdGl2ZXMvY2FsZW5kYXItaXRlbSc7XHJcbmltcG9ydCB7Q2FsZW5kYXJSYW5nZVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2NhbGVuZGFyLXJhbmdlLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyUmFuZ2VZZWFyU2VydmljZSBleHRlbmRzIENhbGVuZGFyUmFuZ2VTZXJ2aWNlIHtcclxuICBwdWJsaWMgY29uZmlndXJlSXRlbShpdGVtOiBDYWxlbmRhckl0ZW0sIGJhc2VEYXRlOiBEYXRlKTogdm9pZCB7XHJcbiAgICBpdGVtLmh1bWFuUmVhZGFibGUgPSBVdGlsLlN0cmluZy5wYWRMZWZ0KGl0ZW0uZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCksIDQsICcwJyk7XHJcbiAgICBpdGVtLmlzT3V0c2lkZVJhbmdlID0gaXRlbS5kYXRlLmdldEZ1bGxZZWFyKCkgPj0gdGhpcy5jYWxjU3RhcnQoYmFzZURhdGUpLmdldEZ1bGxZZWFyKCkgKyAxMDtcclxuICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWNhbGVuZGFyLXllYXItdmlldycsXHJcbiAgdGVtcGxhdGU6IGBcclxuPHRhYmxlIGNsYXNzPVwidWkgY2VsbGVkIGNlbnRlciBhbGlnbmVkIHVuc3RhY2thYmxlIHRhYmxlIHRocmVlIGNvbHVtbiB5ZWFyXCI+XHJcbjx0aGVhZD5cclxuICAgIDx0cj5cclxuICAgICAgICA8dGggY29sc3Bhbj1cIjNcIj5cclxuICAgICAgICAgICAgPGZ1aS1jYWxlbmRhci12aWV3LXRpdGxlIFtyYW5nZXNdPVwicmFuZ2VzXCIgKHpvb21PdXQpPVwiem9vbU91dCgpXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBwYWQoZGVjYWRlU3RhcnQpIH19IC0ge3sgcGFkKGRlY2FkZVN0YXJ0ICsgMTApIH19XHJcbiAgICAgICAgICAgIDwvZnVpLWNhbGVuZGFyLXZpZXctdGl0bGU+XHJcbiAgICAgICAgPC90aD5cclxuICAgIDwvdHI+XHJcbjwvdGhlYWQ+XHJcbjx0Ym9keT5cclxuICAgIDx0ciAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgcmFuZ2VzLmN1cnJlbnQuZ3JvdXBlZEl0ZW1zXCI+XHJcbiAgICAgICAgPHRkIGNsYXNzPVwibGlua1wiXHJcbiAgICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGdyb3VwXCJcclxuICAgICAgICAgICAgW2NhbGVuZGFySXRlbV09XCJpdGVtXCJcclxuICAgICAgICAgICAgKGNsaWNrKT1cInNldERhdGUoaXRlbSlcIj57eyBpdGVtLmh1bWFuUmVhZGFibGUgfX1cclxuICAgICAgICA8L3RkPlxyXG4gICAgPC90cj5cclxuPC90Ym9keT5cclxuPC90YWJsZT5cclxuYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpQ2FsZW5kYXJZZWFyVmlldyBleHRlbmRzIENhbGVuZGFyVmlldyB7XHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgc3VwZXIocmVuZGVyZXIsIENhbGVuZGFyVmlld1R5cGUuWWVhciwgbmV3IENhbGVuZGFyUmFuZ2VZZWFyU2VydmljZShEYXRlUHJlY2lzaW9uLkRlY2FkZSwgNCwgMykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkZWNhZGVTdGFydCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIERhdGVVdGlsXHJcbiAgICAgIC5zdGFydE9mKERhdGVQcmVjaXNpb24uRGVjYWRlLCBEYXRlVXRpbC5jbG9uZSh0aGlzLnNlcnZpY2UuY3VycmVudERhdGUpKVxyXG4gICAgICAuZ2V0RnVsbFllYXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwYWQoeWVhcjogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBVdGlsLlN0cmluZy5wYWRMZWZ0KHllYXIudG9TdHJpbmcoKSwgNCwgJzAnKTtcclxuICB9XHJcbn1cclxuIl19