/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision, DateUtil } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
import { DateParser } from '../classes/date-parser';
var CalendarRangeDateService = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarRangeDateService, _super);
    function CalendarRangeDateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} start
     * @return {?}
     */
    CalendarRangeDateService.prototype.calcStart = /**
     * @param {?} start
     * @return {?}
     */
    function (start) {
        /** @type {?} */
        var monthStart = DateUtil.startOf(DatePrecision.Month, DateUtil.clone(start));
        monthStart.setDate((1 - monthStart.getDay() + this.service.firstDayOfWeek - 7) % 7);
        return monthStart;
    };
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    CalendarRangeDateService.prototype.configureItem = /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    function (item, baseDate) {
        item.humanReadable = item.date.getDate().toString();
        item.isOutsideRange = item.date.getMonth() !== baseDate.getMonth();
        item.isSelectable = item.isDisabled;
    };
    return CalendarRangeDateService;
}(CalendarRangeService));
export { CalendarRangeDateService };
var FuiCalendarDateView = /** @class */ (function (_super) {
    tslib_1.__extends(FuiCalendarDateView, _super);
    function FuiCalendarDateView(renderer) {
        return _super.call(this, renderer, CalendarViewType.Date, new CalendarRangeDateService(DatePrecision.Month, 6, 7)) || this;
    }
    Object.defineProperty(FuiCalendarDateView.prototype, "days", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var days = this.service.localeValues.weekdaysNarrow;
            return days.map((/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) { return days[(i + _this.service.firstDayOfWeek) % days.length]; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiCalendarDateView.prototype, "date", {
        get: /**
         * @return {?}
         */
        function () {
            return new DateParser(this.service.localeValues.formats.month, this.service.localeValues).format(this.currentDate);
        },
        enumerable: true,
        configurable: true
    });
    FuiCalendarDateView.decorators = [
        { type: Component, args: [{
                    selector: 'fui-calendar-date-view',
                    template: "\n<table class=\"ui celled center aligned unstackable table seven column day\">\n<thead>\n    <tr>\n        <th colspan=\"7\">\n            <fui-calendar-view-title [ranges]=\"ranges\" (zoomOut)=\"zoomOut()\">\n                {{ date }}\n            </fui-calendar-view-title>\n        </th>\n    </tr>\n    <tr>\n        <th *ngFor=\"let day of days\">{{ day }}</th>\n    </tr>\n</thead>\n<tbody>\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\n        <td class=\"link\"\n            *ngFor=\"let item of group\"\n            [calendarItem]=\"item\"\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\n        </td>\n    </tr>\n</tbody>\n</table>\n"
                }] }
    ];
    /** @nocollapse */
    FuiCalendarDateView.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return FuiCalendarDateView;
}(CalendarView));
export { FuiCalendarDateView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL3ZpZXdzL2RhdGUtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFcEUsT0FBTyxFQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUVsRDtJQUE4QyxvREFBb0I7SUFBbEU7O0lBWUEsQ0FBQzs7Ozs7SUFYUSw0Q0FBUzs7OztJQUFoQixVQUFpQixLQUFXOztZQUNwQixVQUFVLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0UsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBRU0sZ0RBQWE7Ozs7O0lBQXBCLFVBQXFCLElBQWtCLEVBQUUsUUFBYztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUNILCtCQUFDO0FBQUQsQ0FBQyxBQVpELENBQThDLG9CQUFvQixHQVlqRTs7QUFFRDtJQTRCeUMsK0NBQVk7SUFDbkQsNkJBQVksUUFBbUI7ZUFDN0Isa0JBQU0sUUFBUSxFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRCxzQkFBVyxxQ0FBSTs7OztRQUFmO1lBQUEsaUJBR0M7O2dCQUZPLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjO1lBQ3JELE9BQU8sSUFBSSxDQUFDLEdBQUc7Ozs7O1lBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFyRCxDQUFxRCxFQUFDLENBQUM7UUFDbkYsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyxxQ0FBSTs7OztRQUFmO1lBQ0UsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNySCxDQUFDOzs7T0FBQTs7Z0JBeENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUseXFCQXdCWDtpQkFDQTs7OztnQkFoRGtCLFNBQVM7O0lBOEQ1QiwwQkFBQztDQUFBLEFBekNELENBNEJ5QyxZQUFZLEdBYXBEO1NBYlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RGF0ZVByZWNpc2lvbiwgRGF0ZVV0aWx9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7Q2FsZW5kYXJJdGVtfSBmcm9tICcuLi9kaXJlY3RpdmVzL2NhbGVuZGFyLWl0ZW0nO1xyXG5pbXBvcnQge0NhbGVuZGFyVmlldywgQ2FsZW5kYXJWaWV3VHlwZX0gZnJvbSAnLi9jYWxlbmRhci12aWV3JztcclxuaW1wb3J0IHtDYWxlbmRhclJhbmdlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY2FsZW5kYXItcmFuZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7RGF0ZVBhcnNlcn0gZnJvbSAnLi4vY2xhc3Nlcy9kYXRlLXBhcnNlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJSYW5nZURhdGVTZXJ2aWNlIGV4dGVuZHMgQ2FsZW5kYXJSYW5nZVNlcnZpY2Uge1xyXG4gIHB1YmxpYyBjYWxjU3RhcnQoc3RhcnQ6IERhdGUpOiBEYXRlIHtcclxuICAgIGNvbnN0IG1vbnRoU3RhcnQgPSBEYXRlVXRpbC5zdGFydE9mKERhdGVQcmVjaXNpb24uTW9udGgsIERhdGVVdGlsLmNsb25lKHN0YXJ0KSk7XHJcbiAgICBtb250aFN0YXJ0LnNldERhdGUoKDEgLSBtb250aFN0YXJ0LmdldERheSgpICsgdGhpcy5zZXJ2aWNlLmZpcnN0RGF5T2ZXZWVrIC0gNykgJSA3KTtcclxuICAgIHJldHVybiBtb250aFN0YXJ0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNvbmZpZ3VyZUl0ZW0oaXRlbTogQ2FsZW5kYXJJdGVtLCBiYXNlRGF0ZTogRGF0ZSk6IHZvaWQge1xyXG4gICAgaXRlbS5odW1hblJlYWRhYmxlID0gaXRlbS5kYXRlLmdldERhdGUoKS50b1N0cmluZygpO1xyXG4gICAgaXRlbS5pc091dHNpZGVSYW5nZSA9IGl0ZW0uZGF0ZS5nZXRNb250aCgpICE9PSBiYXNlRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgaXRlbS5pc1NlbGVjdGFibGUgPSBpdGVtLmlzRGlzYWJsZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1jYWxlbmRhci1kYXRlLXZpZXcnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjx0YWJsZSBjbGFzcz1cInVpIGNlbGxlZCBjZW50ZXIgYWxpZ25lZCB1bnN0YWNrYWJsZSB0YWJsZSBzZXZlbiBjb2x1bW4gZGF5XCI+XHJcbjx0aGVhZD5cclxuICAgIDx0cj5cclxuICAgICAgICA8dGggY29sc3Bhbj1cIjdcIj5cclxuICAgICAgICAgICAgPGZ1aS1jYWxlbmRhci12aWV3LXRpdGxlIFtyYW5nZXNdPVwicmFuZ2VzXCIgKHpvb21PdXQpPVwiem9vbU91dCgpXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBkYXRlIH19XHJcbiAgICAgICAgICAgIDwvZnVpLWNhbGVuZGFyLXZpZXctdGl0bGU+XHJcbiAgICAgICAgPC90aD5cclxuICAgIDwvdHI+XHJcbiAgICA8dHI+XHJcbiAgICAgICAgPHRoICpuZ0Zvcj1cImxldCBkYXkgb2YgZGF5c1wiPnt7IGRheSB9fTwvdGg+XHJcbiAgICA8L3RyPlxyXG48L3RoZWFkPlxyXG48dGJvZHk+XHJcbiAgICA8dHIgKm5nRm9yPVwibGV0IGdyb3VwIG9mIHJhbmdlcy5jdXJyZW50Lmdyb3VwZWRJdGVtc1wiPlxyXG4gICAgICAgIDx0ZCBjbGFzcz1cImxpbmtcIlxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBncm91cFwiXHJcbiAgICAgICAgICAgIFtjYWxlbmRhckl0ZW1dPVwiaXRlbVwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZXREYXRlKGl0ZW0pXCI+e3sgaXRlbS5odW1hblJlYWRhYmxlIH19XHJcbiAgICAgICAgPC90ZD5cclxuICAgIDwvdHI+XHJcbjwvdGJvZHk+XHJcbjwvdGFibGU+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aUNhbGVuZGFyRGF0ZVZpZXcgZXh0ZW5kcyBDYWxlbmRhclZpZXcge1xyXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyLCBDYWxlbmRhclZpZXdUeXBlLkRhdGUsIG5ldyBDYWxlbmRhclJhbmdlRGF0ZVNlcnZpY2UoRGF0ZVByZWNpc2lvbi5Nb250aCwgNiwgNykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkYXlzKCk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGRheXMgPSB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzLndlZWtkYXlzTmFycm93O1xyXG4gICAgcmV0dXJuIGRheXMubWFwKChkLCBpKSA9PiBkYXlzWyhpICsgdGhpcy5zZXJ2aWNlLmZpcnN0RGF5T2ZXZWVrKSAlIGRheXMubGVuZ3RoXSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRhdGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZVBhcnNlcih0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzLmZvcm1hdHMubW9udGgsIHRoaXMuc2VydmljZS5sb2NhbGVWYWx1ZXMpLmZvcm1hdCh0aGlzLmN1cnJlbnREYXRlKTtcclxuICB9XHJcbn1cclxuIl19