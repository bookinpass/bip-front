/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
import { DateParser } from '../classes/date-parser';
var CalendarRangeMonthService = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarRangeMonthService, _super);
    function CalendarRangeMonthService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    CalendarRangeMonthService.prototype.configureItem = /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    function (item, baseDate) {
        item.humanReadable = this.service.localeValues.monthsShort[item.date.getMonth()];
        item.isOutsideRange = false;
    };
    return CalendarRangeMonthService;
}(CalendarRangeService));
export { CalendarRangeMonthService };
var FuiCalendarMonthView = /** @class */ (function (_super) {
    tslib_1.__extends(FuiCalendarMonthView, _super);
    function FuiCalendarMonthView(renderer) {
        return _super.call(this, renderer, CalendarViewType.Month, new CalendarRangeMonthService(DatePrecision.Year, 4, 3)) || this;
    }
    Object.defineProperty(FuiCalendarMonthView.prototype, "year", {
        get: /**
         * @return {?}
         */
        function () {
            return new DateParser(this.service.localeValues.formats.year, this.service.localeValues).format(this.currentDate);
        },
        enumerable: true,
        configurable: true
    });
    FuiCalendarMonthView.decorators = [
        { type: Component, args: [{
                    selector: 'fui-calendar-month-view',
                    template: "\n<table class=\"ui celled center aligned unstackable table three column month\">\n<thead>\n    <tr>\n        <th colspan=\"3\">\n            <fui-calendar-view-title [ranges]=\"ranges\" (zoomOut)=\"zoomOut()\">\n                {{ year }}\n            </fui-calendar-view-title>\n        </th>\n    </tr>\n</thead>\n<tbody>\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\n        <td class=\"link\"\n            *ngFor=\"let item of group\"\n            [calendarItem]=\"item\"\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\n        </td>\n    </tr>\n</tbody>\n</table>\n"
                }] }
    ];
    /** @nocollapse */
    FuiCalendarMonthView.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return FuiCalendarMonthView;
}(CalendarView));
export { FuiCalendarMonthView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtdmlldy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZGF0ZXBpY2tlci92aWV3cy9tb250aC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFbEQ7SUFBK0MscURBQW9CO0lBQW5FOztJQUtBLENBQUM7Ozs7OztJQUpRLGlEQUFhOzs7OztJQUFwQixVQUFxQixJQUFrQixFQUFFLFFBQWM7UUFDckQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUFMRCxDQUErQyxvQkFBb0IsR0FLbEU7O0FBRUQ7SUF5QjBDLGdEQUFZO0lBQ3BELDhCQUFZLFFBQW1CO2VBQzdCLGtCQUFNLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSx5QkFBeUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRUQsc0JBQVcsc0NBQUk7Ozs7UUFBZjtZQUNFLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEgsQ0FBQzs7O09BQUE7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFLCtsQkFxQlg7aUJBQ0E7Ozs7Z0JBdENrQixTQUFTOztJQStDNUIsMkJBQUM7Q0FBQSxBQWpDRCxDQXlCMEMsWUFBWSxHQVFyRDtTQVJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RhdGVQcmVjaXNpb259IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7Q2FsZW5kYXJWaWV3LCBDYWxlbmRhclZpZXdUeXBlfSBmcm9tICcuL2NhbGVuZGFyLXZpZXcnO1xyXG5pbXBvcnQge0NhbGVuZGFySXRlbX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9jYWxlbmRhci1pdGVtJztcclxuaW1wb3J0IHtDYWxlbmRhclJhbmdlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY2FsZW5kYXItcmFuZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7RGF0ZVBhcnNlcn0gZnJvbSAnLi4vY2xhc3Nlcy9kYXRlLXBhcnNlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJSYW5nZU1vbnRoU2VydmljZSBleHRlbmRzIENhbGVuZGFyUmFuZ2VTZXJ2aWNlIHtcclxuICBwdWJsaWMgY29uZmlndXJlSXRlbShpdGVtOiBDYWxlbmRhckl0ZW0sIGJhc2VEYXRlOiBEYXRlKTogdm9pZCB7XHJcbiAgICBpdGVtLmh1bWFuUmVhZGFibGUgPSB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzLm1vbnRoc1Nob3J0W2l0ZW0uZGF0ZS5nZXRNb250aCgpXTtcclxuICAgIGl0ZW0uaXNPdXRzaWRlUmFuZ2UgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWNhbGVuZGFyLW1vbnRoLXZpZXcnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjx0YWJsZSBjbGFzcz1cInVpIGNlbGxlZCBjZW50ZXIgYWxpZ25lZCB1bnN0YWNrYWJsZSB0YWJsZSB0aHJlZSBjb2x1bW4gbW9udGhcIj5cclxuPHRoZWFkPlxyXG4gICAgPHRyPlxyXG4gICAgICAgIDx0aCBjb2xzcGFuPVwiM1wiPlxyXG4gICAgICAgICAgICA8ZnVpLWNhbGVuZGFyLXZpZXctdGl0bGUgW3Jhbmdlc109XCJyYW5nZXNcIiAoem9vbU91dCk9XCJ6b29tT3V0KClcIj5cclxuICAgICAgICAgICAgICAgIHt7IHllYXIgfX1cclxuICAgICAgICAgICAgPC9mdWktY2FsZW5kYXItdmlldy10aXRsZT5cclxuICAgICAgICA8L3RoPlxyXG4gICAgPC90cj5cclxuPC90aGVhZD5cclxuPHRib2R5PlxyXG4gICAgPHRyICpuZ0Zvcj1cImxldCBncm91cCBvZiByYW5nZXMuY3VycmVudC5ncm91cGVkSXRlbXNcIj5cclxuICAgICAgICA8dGQgY2xhc3M9XCJsaW5rXCJcclxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZ3JvdXBcIlxyXG4gICAgICAgICAgICBbY2FsZW5kYXJJdGVtXT1cIml0ZW1cIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwic2V0RGF0ZShpdGVtKVwiPnt7IGl0ZW0uaHVtYW5SZWFkYWJsZSB9fVxyXG4gICAgICAgIDwvdGQ+XHJcbiAgICA8L3RyPlxyXG48L3Rib2R5PlxyXG48L3RhYmxlPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlDYWxlbmRhck1vbnRoVmlldyBleHRlbmRzIENhbGVuZGFyVmlldyB7XHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgc3VwZXIocmVuZGVyZXIsIENhbGVuZGFyVmlld1R5cGUuTW9udGgsIG5ldyBDYWxlbmRhclJhbmdlTW9udGhTZXJ2aWNlKERhdGVQcmVjaXNpb24uWWVhciwgNCwgMykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB5ZWFyKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gbmV3IERhdGVQYXJzZXIodGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy5mb3JtYXRzLnllYXIsIHRoaXMuc2VydmljZS5sb2NhbGVWYWx1ZXMpLmZvcm1hdCh0aGlzLmN1cnJlbnREYXRlKTtcclxuICB9XHJcbn1cclxuIl19