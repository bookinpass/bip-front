/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { format, parse } from 'date-fns';
import * as defaultLocale from 'date-fns/locale/en';
/**
 * @record
 */
function IDateFnsLocaleValues() { }
/**
 * @record
 */
function IDateFnsHelperOptions() { }
if (false) {
    /** @type {?} */
    IDateFnsHelperOptions.prototype.type;
}
/**
 * @record
 */
function IDateFnsCustomLocale() { }
if (false) {
    /** @type {?} */
    IDateFnsCustomLocale.prototype.localize;
    /** @type {?} */
    IDateFnsCustomLocale.prototype.match;
    /** @type {?|undefined} */
    IDateFnsCustomLocale.prototype.options;
}
/**
 * @param {?} values
 * @param {?} defaultType
 * @param {?=} indexCallback
 * @return {?}
 */
function buildLocalizeFn(values, defaultType, indexCallback) {
    return (/**
     * @param {?} dirtyIndex
     * @param {?=} __1
     * @return {?}
     */
    function (dirtyIndex, _a) {
        var type = (_a === void 0 ? { type: defaultType } : _a).type;
        /** @type {?} */
        var index = indexCallback ? indexCallback(dirtyIndex) : dirtyIndex;
        return values["" + type][index];
    });
}
/**
 * @param {?} values
 * @param {?} defaultType
 * @return {?}
 */
function buildLocalizeArrayFn(values, defaultType) {
    return (/**
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var type = (_a === void 0 ? { type: defaultType } : _a).type;
        return values["" + type];
    });
}
/**
 * @param {?} patterns
 * @param {?} defaultType
 * @return {?}
 */
function buildMatchFn(patterns, defaultType) {
    return (/**
     * @param {?} dirtyString
     * @param {?=} __1
     * @return {?}
     */
    function (dirtyString, _a) {
        var type = (_a === void 0 ? { type: defaultType } : _a).type;
        return dirtyString.match("^(" + patterns["" + type].join('|') + ")");
    });
}
/**
 * @param {?} patterns
 * @param {?} defaultType
 * @return {?}
 */
function buildParseFn(patterns, defaultType) {
    return (/**
     * @param {?} __0
     * @param {?=} __1
     * @return {?}
     */
    function (_a, _b) {
        var _c = tslib_1.__read(_a, 2), result = _c[1];
        var type = (_b === void 0 ? { type: defaultType } : _b).type;
        return (patterns["" + type] || patterns[defaultType])
            .map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return new RegExp("^" + p); }))
            .findIndex((/**
         * @param {?} pattern
         * @return {?}
         */
        function (pattern) { return pattern.test(result); }));
    });
}
var DateFnsParser = /** @class */ (function () {
    function DateFnsParser(locale) {
        this._weekStartsOn = (/** @type {?} */ (locale.firstDayOfWeek));
        /** @type {?} */
        var weekdayValues = {
            long: locale.weekdays,
            short: locale.weekdaysShort,
            narrow: locale.weekdaysNarrow
        };
        /** @type {?} */
        var monthValues = {
            long: locale.months,
            short: locale.monthsShort
        };
        /** @type {?} */
        var timeOfDayValues = {
            long: locale.timesOfDay,
            uppercase: locale.timesOfDayUppercase,
            lowercase: locale.timesOfDayLowercase
        };
        /** @type {?} */
        var timeOfDayMatchValues = {
            long: locale.timesOfDay,
            short: locale.timesOfDayUppercase.concat(locale.timesOfDayLowercase)
        };
        this._locale = (/** @type {?} */ (defaultLocale));
        this._locale.localize = tslib_1.__assign({}, this._locale.localize, {
            weekday: buildLocalizeFn(weekdayValues, 'long'),
            weekdays: buildLocalizeArrayFn(weekdayValues, 'long'),
            month: buildLocalizeFn(monthValues, 'long'),
            months: buildLocalizeArrayFn(monthValues, 'long'),
            timeOfDay: buildLocalizeFn(timeOfDayValues, 'long', (/**
             * @param {?} hours
             * @return {?}
             */
            function (hours) {
                return hours / 12 >= 1 ? 1 : 0;
            })),
            timesOfDay: buildLocalizeArrayFn(timeOfDayValues, 'long')
        });
        this._locale.match = tslib_1.__assign({}, this._locale.match, {
            weekdays: buildMatchFn(weekdayValues, 'long'),
            weekday: buildParseFn(weekdayValues, 'long'),
            months: buildMatchFn(monthValues, 'long'),
            month: buildParseFn(monthValues, 'long'),
            timesOfDay: buildMatchFn(timeOfDayMatchValues, 'long'),
            timeOfDay: buildParseFn(timeOfDayMatchValues, 'long')
        });
    }
    Object.defineProperty(DateFnsParser.prototype, "_config", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return {
                weekStartsOn: this._weekStartsOn,
                locale: this._locale
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} d
     * @param {?} f
     * @return {?}
     */
    DateFnsParser.prototype.format = /**
     * @param {?} d
     * @param {?} f
     * @return {?}
     */
    function (d, f) {
        return format(d, f, this._config);
    };
    /**
     * @param {?} dS
     * @param {?} f
     * @param {?} bD
     * @return {?}
     */
    DateFnsParser.prototype.parse = /**
     * @param {?} dS
     * @param {?} f
     * @param {?} bD
     * @return {?}
     */
    function (dS, f, bD) {
        return parse(dS, this._config);
    };
    return DateFnsParser;
}());
export { DateFnsParser };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateFnsParser.prototype._weekStartsOn;
    /**
     * @type {?}
     * @private
     */
    DateFnsParser.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,