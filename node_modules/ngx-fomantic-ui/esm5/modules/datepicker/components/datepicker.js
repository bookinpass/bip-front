/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, HostListener } from '@angular/core';
import { CalendarService } from './../services/calendar.service';
import { DatetimeConfig } from '../classes/calendar-config';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
/** @type {?} */
export var DatepickerMode = {
    Year: (/** @type {?} */ ('year')),
    Month: (/** @type {?} */ ('month')),
    Date: (/** @type {?} */ ('date')),
    Datetime: (/** @type {?} */ ('datetime')),
    Time: (/** @type {?} */ ('time'))
};
var FuiDatepicker = /** @class */ (function () {
    function FuiDatepicker(localizationService) {
        this.service = new CalendarService(new DatetimeConfig(), localizationService.get().datepicker);
        this.hasClasses = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDatepicker.prototype.onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
    };
    FuiDatepicker.decorators = [
        { type: Component, args: [{
                    selector: 'fui-datepicker',
                    template: "\n<ng-container [ngSwitch]=\"service.currentView\">\n    <fui-calendar-year-view [service]=\"service\" *ngSwitchCase=\"0\"></fui-calendar-year-view>\n    <fui-calendar-month-view [service]=\"service\" *ngSwitchCase=\"1\"></fui-calendar-month-view>\n    <fui-calendar-date-view [service]=\"service\" *ngSwitchCase=\"2\"></fui-calendar-date-view>\n    <fui-calendar-hour-view [service]=\"service\" *ngSwitchCase=\"3\"></fui-calendar-hour-view>\n    <fui-calendar-minute-view [service]=\"service\" *ngSwitchCase=\"4\"></fui-calendar-minute-view>\n</ng-container>\n",
                    styles: ["\n:host {\n    user-select: none;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    FuiDatepicker.ctorParameters = function () { return [
        { type: FuiLocalizationService }
    ]; };
    FuiDatepicker.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['class.calendar',] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return FuiDatepicker;
}());
export { FuiDatepicker };
if (false) {
    /** @type {?} */
    FuiDatepicker.prototype.hasClasses;
    /** @type {?} */
    FuiDatepicker.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZGF0ZXBpY2tlci9jb21wb25lbnRzL2RhdGVwaWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDBDQUEwQyxDQUFDOztBQUloRixNQUFNLEtBQU8sY0FBYyxHQUFHO0lBQzVCLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0lBQzlCLEtBQUssRUFBRSxtQkFBQSxPQUFPLEVBQWtCO0lBQ2hDLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0lBQzlCLFFBQVEsRUFBRSxtQkFBQSxVQUFVLEVBQWtCO0lBQ3RDLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0NBQy9CO0FBRUQ7SUF5QkUsdUJBQVksbUJBQTJDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxjQUFjLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7OztJQUdNLG1DQUFXOzs7O0lBRGxCLFVBQ21CLENBQWE7UUFDOUIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7O2dCQWxDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLG1qQkFRWDs2QkFDVSx3Q0FJVjtpQkFDQTs7OztnQkE1Qk8sc0JBQXNCOzs7NkJBOEIzQixXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsY0FBYyxjQUMxQixXQUFXLFNBQUMsZ0JBQWdCOzhCQVc1QixZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQUl2QyxvQkFBQztDQUFBLEFBbkNELElBbUNDO1NBbEJZLGFBQWE7OztJQUN4QixtQ0FHb0M7O0lBRXBDLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDYWxlbmRhclNlcnZpY2V9IGZyb20gJy4vLi4vc2VydmljZXMvY2FsZW5kYXIuc2VydmljZSc7XHJcbmltcG9ydCB7RGF0ZXRpbWVDb25maWd9IGZyb20gJy4uL2NsYXNzZXMvY2FsZW5kYXItY29uZmlnJztcclxuaW1wb3J0IHtGdWlMb2NhbGl6YXRpb25TZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9iZWhhdmlvcnMvbG9jYWxpemF0aW9uL2ludGVybmFsJztcclxuXHJcbmV4cG9ydCB0eXBlIERhdGVwaWNrZXJNb2RlID0gJ3llYXInIHwgJ21vbnRoJyB8ICdkYXRlJyB8ICdkYXRldGltZScgfCAndGltZSc7XHJcblxyXG5leHBvcnQgY29uc3QgRGF0ZXBpY2tlck1vZGUgPSB7XHJcbiAgWWVhcjogJ3llYXInIGFzIERhdGVwaWNrZXJNb2RlLFxyXG4gIE1vbnRoOiAnbW9udGgnIGFzIERhdGVwaWNrZXJNb2RlLFxyXG4gIERhdGU6ICdkYXRlJyBhcyBEYXRlcGlja2VyTW9kZSxcclxuICBEYXRldGltZTogJ2RhdGV0aW1lJyBhcyBEYXRlcGlja2VyTW9kZSxcclxuICBUaW1lOiAndGltZScgYXMgRGF0ZXBpY2tlck1vZGVcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWRhdGVwaWNrZXInLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cInNlcnZpY2UuY3VycmVudFZpZXdcIj5cclxuICAgIDxmdWktY2FsZW5kYXIteWVhci12aWV3IFtzZXJ2aWNlXT1cInNlcnZpY2VcIiAqbmdTd2l0Y2hDYXNlPVwiMFwiPjwvZnVpLWNhbGVuZGFyLXllYXItdmlldz5cclxuICAgIDxmdWktY2FsZW5kYXItbW9udGgtdmlldyBbc2VydmljZV09XCJzZXJ2aWNlXCIgKm5nU3dpdGNoQ2FzZT1cIjFcIj48L2Z1aS1jYWxlbmRhci1tb250aC12aWV3PlxyXG4gICAgPGZ1aS1jYWxlbmRhci1kYXRlLXZpZXcgW3NlcnZpY2VdPVwic2VydmljZVwiICpuZ1N3aXRjaENhc2U9XCIyXCI+PC9mdWktY2FsZW5kYXItZGF0ZS12aWV3PlxyXG4gICAgPGZ1aS1jYWxlbmRhci1ob3VyLXZpZXcgW3NlcnZpY2VdPVwic2VydmljZVwiICpuZ1N3aXRjaENhc2U9XCIzXCI+PC9mdWktY2FsZW5kYXItaG91ci12aWV3PlxyXG4gICAgPGZ1aS1jYWxlbmRhci1taW51dGUtdmlldyBbc2VydmljZV09XCJzZXJ2aWNlXCIgKm5nU3dpdGNoQ2FzZT1cIjRcIj48L2Z1aS1jYWxlbmRhci1taW51dGUtdmlldz5cclxuPC9uZy1jb250YWluZXI+XHJcbmAsXHJcbiAgc3R5bGVzOiBbYFxyXG46aG9zdCB7XHJcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcclxufVxyXG5gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpRGF0ZXBpY2tlciB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2FsZW5kYXInKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgc2VydmljZTogQ2FsZW5kYXJTZXJ2aWNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb25TZXJ2aWNlOiBGdWlMb2NhbGl6YXRpb25TZXJ2aWNlKSB7XHJcbiAgICB0aGlzLnNlcnZpY2UgPSBuZXcgQ2FsZW5kYXJTZXJ2aWNlKG5ldyBEYXRldGltZUNvbmZpZygpLCBsb2NhbGl6YXRpb25TZXJ2aWNlLmdldCgpLmRhdGVwaWNrZXIpO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbk1vdXNlRG93bihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==