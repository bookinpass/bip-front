/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, HostBinding, HostListener, Input, Renderer2 } from '@angular/core';
import { DateUtil } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { PopupTrigger } from '../../popup/internal';
import { FuiDatepickerDirective, FuiDatepickerDirectiveValueAccessor } from './datepicker.directive';
import { DateParser, InternalDateParser } from '../classes/date-parser';
var FuiDatepickerInputDirective = /** @class */ (function () {
    function FuiDatepickerInputDirective(datepicker, valueAccessor, _renderer, _element, localizationService) {
        var _this = this;
        this.datepicker = datepicker;
        this.valueAccessor = valueAccessor;
        this._renderer = _renderer;
        this._element = _element;
        this.useNativeOnMobile = true;
        this.fallbackActive = false;
        // Whenever the datepicker value updates, update the input text alongside it.
        this.datepicker.onSelectedDateChange.subscribe((/**
         * @return {?}
         */
        function () {
            return _this.updateValue(_this.selectedDateString);
        }));
        localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        function () {
            return _this.updateValue(_this.selectedDateString);
        }));
    }
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "parser", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.fallbackActive) {
                return new InternalDateParser(this.datepicker.mode, this.datepicker.localeValues);
            }
            return new DateParser(this.datepicker.localeValues.formats[this.datepicker.mode], this.datepicker.localeValues);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "selectedDateString", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.datepicker.selectedDate) {
                return this.parser.format(this.datepicker.selectedDate);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.fallbackActive) {
                return this.datepicker.config.fallback;
            }
            return 'text';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.fallbackActive && this.datepicker.maxDate) {
                // Since HTML doesn't use a date object max is somewhat tricky.
                // Our Datepicker will always choose the 1st date on the provided precision,
                // meaning anything below the maxDate will work, hence endOf.
                /** @type {?} */
                var max = DateUtil.endOf(this.datepicker.config.precision, DateUtil.clone(this.datepicker.maxDate));
                return this.parser.format(max);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.fallbackActive && this.datepicker.minDate) {
                // Since HTML doesn't use a date object min is somewhat tricky.
                // We use 1 minute before the next date at the configured precision since
                // our Datepicker picks the first available date at that precision.
                /** @type {?} */
                var min = DateUtil.clone(this.datepicker.minDate);
                return this.parser.format(min);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "useNativeOnMobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._useNativeOnMobile;
        },
        set: /**
         * @param {?} fallback
         * @return {?}
         */
        function (fallback) {
            this._useNativeOnMobile = fallback;
            /** @type {?} */
            var isOnMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(navigator.userAgent);
            this.fallbackActive = this.useNativeOnMobile && isOnMobile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerInputDirective.prototype, "fallbackActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fallbackActive;
        },
        set: /**
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this._fallbackActive = active;
            // If the fallback is active, then the trigger must be manual so the datepicker never opens.
            this.datepicker.popup.config.trigger = this.fallbackActive ? PopupTrigger.Manual : PopupTrigger.Focus;
            // Update the input value (this will insert the `T` as required).
            this.updateValue(this.selectedDateString);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    FuiDatepickerInputDirective.prototype.typeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._lastUpdateTyped = true;
        this._currentInputValue = value;
        if (!value) {
            // Delete the selected date if no date was entered manually.
            return this.datepicker.writeValue(undefined);
        }
        /** @type {?} */
        var parsed = this.parser.parse(value, this.datepicker.selectedDate);
        if (!isNaN(parsed.getTime()) && value === this.parser.format(parsed)) {
            return this.datepicker.writeValue(parsed);
        }
        return this.datepicker.writeValue(undefined);
    };
    /**
     * @return {?}
     */
    FuiDatepickerInputDirective.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.valueAccessor.onTouched();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FuiDatepickerInputDirective.prototype.updateValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Only update the current value if it is different to what it's being updated to.
        // This is so that the editing position isn't changed when manually typing the date.
        if (!this._lastUpdateTyped) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value || '');
        }
        this._lastUpdateTyped = false;
    };
    FuiDatepickerInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[fuiDatepicker]'
                },] }
    ];
    /** @nocollapse */
    FuiDatepickerInputDirective.ctorParameters = function () { return [
        { type: FuiDatepickerDirective, decorators: [{ type: Host }] },
        { type: FuiDatepickerDirectiveValueAccessor, decorators: [{ type: Host }] },
        { type: Renderer2 },
        { type: ElementRef },
        { type: FuiLocalizationService }
    ]; };
    FuiDatepickerInputDirective.propDecorators = {
        type: [{ type: HostBinding, args: ['attr.type',] }],
        max: [{ type: HostBinding, args: ['attr.max',] }],
        min: [{ type: HostBinding, args: ['attr.min',] }],
        useNativeOnMobile: [{ type: Input, args: ['pickerUseNativeOnMobile',] }],
        typeValue: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }]
    };
    return FuiDatepickerInputDirective;
}());
export { FuiDatepickerInputDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._currentInputValue;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._lastUpdateTyped;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._useNativeOnMobile;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._fallbackActive;
    /** @type {?} */
    FuiDatepickerInputDirective.prototype.datepicker;
    /** @type {?} */
    FuiDatepickerInputDirective.prototype.valueAccessor;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,