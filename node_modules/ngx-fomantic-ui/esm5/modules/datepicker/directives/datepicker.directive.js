/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2 } from '@angular/core';
import { CustomValidator, customValidatorFactory, CustomValueAccessor, customValueAccessorFactory, KeyCode, PositioningPlacement, FuiComponentFactory } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { PopupConfig, PopupTrigger, FuiPopupComponentController } from '../../popup/internal';
import { DatepickerMode, FuiDatepicker } from '../components/datepicker';
import { DateConfig, DatetimeConfig, MonthConfig, TimeConfig, YearConfig } from '../classes/calendar-config';
var FuiDatepickerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FuiDatepickerDirective, _super);
    function FuiDatepickerDirective(renderer, element, componentFactory, localizationService) {
        var _this = _super.call(this, renderer, element, componentFactory, FuiDatepicker, new PopupConfig({
            trigger: PopupTrigger.Focus,
            placement: PositioningPlacement.BottomLeft,
            transition: 'scale',
            transitionDuration: 200
        })) || this;
        _this.localizationService = localizationService;
        // This ensures the popup is drawn correctly (i.e. no border).
        _this._renderer.addClass(_this.popup.elementRef.nativeElement, 'ui');
        _this._renderer.addClass(_this.popup.elementRef.nativeElement, 'calendar');
        _this.onLocaleUpdate();
        _this.localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        function () { return _this.onLocaleUpdate(); }));
        _this.onSelectedDateChange = new EventEmitter();
        _this.onValidatorChange = new EventEmitter();
        _this.mode = DatepickerMode.Datetime;
        return _this;
    }
    Object.defineProperty(FuiDatepickerDirective.prototype, "placement", {
        set: /**
         * @param {?} placement
         * @return {?}
         */
        function (placement) {
            this.popup.config.placement = placement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerDirective.prototype, "transition", {
        set: /**
         * @param {?} transition
         * @return {?}
         */
        function (transition) {
            this.popup.config.transition = transition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerDirective.prototype, "transitionDuration", {
        set: /**
         * @param {?} duration
         * @return {?}
         */
        function (duration) {
            this.popup.config.transitionDuration = duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerDirective.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDate;
        },
        set: /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._selectedDate = date;
            this.onSelectedDateChange.emit(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerDirective.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        set: /**
         * @param {?} mode
         * @return {?}
         */
        function (mode) {
            this._mode = mode || DatepickerMode.Datetime;
            switch (this._mode) {
                case DatepickerMode.Year:
                    this.config = new YearConfig();
                    break;
                case DatepickerMode.Month:
                    this.config = new MonthConfig();
                    break;
                case DatepickerMode.Date:
                default:
                    this.config = new DateConfig();
                    break;
                case DatepickerMode.Datetime:
                    this.config = new DatetimeConfig();
                    break;
                case DatepickerMode.Time:
                    this.config = new TimeConfig();
                    break;
            }
            this.writeValue(this.selectedDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDatepickerDirective.prototype, "localeValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localizationService.override(this._localeValues, this.localeOverrides);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiDatepickerDirective.prototype.popupOnOpen = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.componentInstance) {
            this.componentInstance.service.config = this.config;
            this.componentInstance.service.localeValues = this.localeValues;
            this.componentInstance.service.currentDate = this.initialDate || new Date();
            this.componentInstance.service.selectedDate = this.selectedDate;
            this.componentInstance.service.maxDate = this.maxDate;
            this.componentInstance.service.minDate = this.minDate;
            if (this.firstDayOfWeek != undefined) {
                this.componentInstance.service.firstDayOfWeek = this.firstDayOfWeek;
            }
            this.componentInstance.service.reset();
            this.componentInstance.service.onDateChange.subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.selectedDate = d;
                _this.close();
            }));
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    FuiDatepickerDirective.prototype.ngOnChanges = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var maxDate = _a.maxDate, minDate = _a.minDate, mode = _a.mode;
        if (maxDate || minDate || mode) {
            this.onValidatorChange.emit();
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    FuiDatepickerDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var value = c.value;
        if (value != undefined) {
            // We post process the min & max date because sometimes this puts the date outside of the allowed range.
            if (this.minDate && value < this.minDate) {
                return { fuiMinDate: { required: this.minDate, actual: value } };
            }
            if (this.maxDate && value > this.maxDate) {
                return { fuiMaxDate: { required: this.maxDate, actual: value } };
            }
        }
        // Angular expects null
        // tslint:disable-next-line:no-null-keyword
        return null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FuiDatepickerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedDate = value;
        if (this.componentInstance) {
            this.componentInstance.service.selectedDate = value;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDatepickerDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.keyCode === KeyCode.Escape) {
            this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FuiDatepickerDirective.prototype.onLocaleUpdate = /**
     * @private
     * @return {?}
     */
    function () {
        this._localeValues = this.localizationService.get().datepicker;
    };
    FuiDatepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiDatepicker]',
                    providers: [customValidatorFactory(FuiDatepickerDirective)]
                },] }
    ];
    /** @nocollapse */
    FuiDatepickerDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: FuiComponentFactory },
        { type: FuiLocalizationService }
    ]; };
    FuiDatepickerDirective.propDecorators = {
        initialDate: [{ type: Input, args: ['pickerInitialDate',] }],
        maxDate: [{ type: Input, args: ['pickerMaxDate',] }],
        minDate: [{ type: Input, args: ['pickerMinDate',] }],
        firstDayOfWeek: [{ type: Input, args: ['pickerFirstDayOfWeek',] }],
        localeOverrides: [{ type: Input, args: ['pickerLocaleOverrides',] }],
        onSelectedDateChange: [{ type: Output, args: ['pickerSelectedDateChange',] }],
        onValidatorChange: [{ type: Output, args: ['pickerValidatorChange',] }],
        placement: [{ type: Input, args: ['pickerPlacement',] }],
        transition: [{ type: Input, args: ['pickerTransition',] }],
        transitionDuration: [{ type: Input, args: ['pickerTransitionDuration',] }],
        mode: [{ type: Input, args: ['pickerMode',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return FuiDatepickerDirective;
}(FuiPopupComponentController));
export { FuiDatepickerDirective };
if (false) {
    /** @type {?} */
    FuiDatepickerDirective.prototype.config;
    /** @type {?} */
    FuiDatepickerDirective.prototype.initialDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.maxDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.minDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.firstDayOfWeek;
    /** @type {?} */
    FuiDatepickerDirective.prototype.localeOverrides;
    /** @type {?} */
    FuiDatepickerDirective.prototype.onSelectedDateChange;
    /** @type {?} */
    FuiDatepickerDirective.prototype.onValidatorChange;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._selectedDate;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._localeValues;
    /** @type {?} */
    FuiDatepickerDirective.prototype.localizationService;
}
var FuiDatepickerDirectiveValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiDatepickerDirectiveValueAccessor, _super);
    function FuiDatepickerDirectiveValueAccessor(host) {
        var _this = _super.call(this, host) || this;
        _this.host = host;
        return _this;
    }
    FuiDatepickerDirectiveValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiDatepicker]',
                    host: { '(pickerSelectedDateChange)': 'onChange($event)' },
                    providers: [customValueAccessorFactory(FuiDatepickerDirectiveValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiDatepickerDirectiveValueAccessor.ctorParameters = function () { return [
        { type: FuiDatepickerDirective }
    ]; };
    return FuiDatepickerDirectiveValueAccessor;
}(CustomValueAccessor));
export { FuiDatepickerDirectiveValueAccessor };
if (false) {
    /** @type {?} */
    FuiDatepickerDirectiveValueAccessor.prototype.host;
}
var FuiDatepickerDirectiveValidator = /** @class */ (function (_super) {
    tslib_1.__extends(FuiDatepickerDirectiveValidator, _super);
    function FuiDatepickerDirectiveValidator(host) {
        var _this = _super.call(this, host) || this;
        _this.host = host;
        return _this;
    }
    FuiDatepickerDirectiveValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiDatepicker]',
                    host: { '(pickerValidatorChange)': 'onValidatorChange()' },
                    providers: [customValidatorFactory(FuiDatepickerDirectiveValidator)]
                },] }
    ];
    /** @nocollapse */
    FuiDatepickerDirectiveValidator.ctorParameters = function () { return [
        { type: FuiDatepickerDirective }
    ]; };
    return FuiDatepickerDirectiveValidator;
}(CustomValidator));
export { FuiDatepickerDirectiveValidator };
if (false) {
    /** @type {?} */
    FuiDatepickerDirectiveValidator.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,