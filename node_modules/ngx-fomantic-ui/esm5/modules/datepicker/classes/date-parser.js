/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DateFnsParser } from '../helpers/date-fns';
var DateParser = /** @class */ (function () {
    function DateParser(format, locale) {
        this._format = format;
        this._parser = new DateFnsParser(locale);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    DateParser.prototype.format = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._parser.format(date, this._format);
    };
    /**
     * @param {?} dateString
     * @param {?=} baseDate
     * @return {?}
     */
    DateParser.prototype.parse = /**
     * @param {?} dateString
     * @param {?=} baseDate
     * @return {?}
     */
    function (dateString, baseDate) {
        if (baseDate === void 0) { baseDate = new Date(); }
        return this._parser.parse(dateString, this._format, baseDate);
    };
    return DateParser;
}());
export { DateParser };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateParser.prototype._format;
    /**
     * @type {?}
     * @private
     */
    DateParser.prototype._parser;
}
var InternalDateParser = /** @class */ (function (_super) {
    tslib_1.__extends(InternalDateParser, _super);
    function InternalDateParser(mode, locale) {
        var _this = this;
        /** @type {?} */
        var internalFormats = {
            time: 'HH:mm',
            datetime: 'YYYY-MM-DDTHH:mm',
            date: 'YYYY-MM-DD',
            month: 'YYYY-MM',
            year: 'YYYY'
        };
        _this = _super.call(this, internalFormats[mode], locale) || this;
        return _this;
    }
    return InternalDateParser;
}(DateParser));
export { InternalDateParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2RhdGVwaWNrZXIvY2xhc3Nlcy9kYXRlLXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUdsRDtJQUlFLG9CQUFZLE1BQWMsRUFBRSxNQUErQjtRQUN6RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRU0sMkJBQU07Ozs7SUFBYixVQUFjLElBQVU7UUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7OztJQUVNLDBCQUFLOzs7OztJQUFaLFVBQWEsVUFBa0IsRUFBRSxRQUEyQjtRQUEzQix5QkFBQSxFQUFBLGVBQXFCLElBQUksRUFBRTtRQUMxRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUFoQkQsSUFnQkM7Ozs7Ozs7SUFmQyw2QkFBd0I7Ozs7O0lBQ3hCLDZCQUErQjs7QUFnQmpDO0lBQXdDLDhDQUFVO0lBQ2hELDRCQUFZLElBQW9CLEVBQUUsTUFBK0I7UUFBakUsaUJBVUM7O1lBVE8sZUFBZSxHQUFtQztZQUN0RCxJQUFJLEVBQUUsT0FBTztZQUNiLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsSUFBSSxFQUFFLE1BQU07U0FDYjtRQUVELFFBQUEsa0JBQU0sZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFDOztJQUN2QyxDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBWkQsQ0FBd0MsVUFBVSxHQVlqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0ZXBpY2tlck1vZGV9IGZyb20gJy4uL2NvbXBvbmVudHMvZGF0ZXBpY2tlcic7XHJcbmltcG9ydCB7RGF0ZUZuc1BhcnNlcn0gZnJvbSAnLi4vaGVscGVycy9kYXRlLWZucyc7XHJcbmltcG9ydCB7SURhdGVwaWNrZXJGb3JtYXRzTG9jYWxlVmFsdWVzLCBJRGF0ZXBpY2tlckxvY2FsZVZhbHVlc30gZnJvbSAnLi4vLi4vLi4vYmVoYXZpb3JzL2xvY2FsaXphdGlvbi9pbnRlcm5hbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZVBhcnNlciB7XHJcbiAgcHJpdmF0ZSBfZm9ybWF0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfcGFyc2VyOiBEYXRlRm5zUGFyc2VyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihmb3JtYXQ6IHN0cmluZywgbG9jYWxlOiBJRGF0ZXBpY2tlckxvY2FsZVZhbHVlcykge1xyXG4gICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xyXG4gICAgdGhpcy5fcGFyc2VyID0gbmV3IERhdGVGbnNQYXJzZXIobG9jYWxlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmb3JtYXQoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VyLmZvcm1hdChkYXRlLCB0aGlzLl9mb3JtYXQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhcnNlKGRhdGVTdHJpbmc6IHN0cmluZywgYmFzZURhdGU6IERhdGUgPSBuZXcgRGF0ZSgpKTogRGF0ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VyLnBhcnNlKGRhdGVTdHJpbmcsIHRoaXMuX2Zvcm1hdCwgYmFzZURhdGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludGVybmFsRGF0ZVBhcnNlciBleHRlbmRzIERhdGVQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKG1vZGU6IERhdGVwaWNrZXJNb2RlLCBsb2NhbGU6IElEYXRlcGlja2VyTG9jYWxlVmFsdWVzKSB7XHJcbiAgICBjb25zdCBpbnRlcm5hbEZvcm1hdHM6IElEYXRlcGlja2VyRm9ybWF0c0xvY2FsZVZhbHVlcyA9IHtcclxuICAgICAgdGltZTogJ0hIOm1tJyxcclxuICAgICAgZGF0ZXRpbWU6ICdZWVlZLU1NLUREVEhIOm1tJyxcclxuICAgICAgZGF0ZTogJ1lZWVktTU0tREQnLFxyXG4gICAgICBtb250aDogJ1lZWVktTU0nLFxyXG4gICAgICB5ZWFyOiAnWVlZWSdcclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoaW50ZXJuYWxGb3JtYXRzW21vZGVdLCBsb2NhbGUpO1xyXG4gIH1cclxufVxyXG4iXX0=