/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CalendarMode } from '../services/calendar.service';
import { DateMappings, DatetimeMappings, MonthMappings, TimeMappings, YearMappings } from './calendar-mappings';
import { DatePrecision, DateUtil } from '../../../misc/util/internal';
/**
 * @abstract
 */
var /**
 * @abstract
 */
CalendarConfig = /** @class */ (function () {
    function CalendarConfig(mode, precision, mappings, fallback) {
        this.mode = mode;
        this.precision = precision;
        this.mappings = mappings;
        this.fallback = fallback;
    }
    /**
     * @param {?} providedDate
     * @return {?}
     */
    CalendarConfig.prototype.updateBounds = /**
     * @param {?} providedDate
     * @return {?}
     */
    function (providedDate) {
        this.dateMinBound = DateUtil.startOf(DatePrecision.Year, new Date(), true);
        this.dateMinBound.setFullYear(0);
    };
    return CalendarConfig;
}());
/**
 * @abstract
 */
export { CalendarConfig };
if (false) {
    /** @type {?} */
    CalendarConfig.prototype.mode;
    /** @type {?} */
    CalendarConfig.prototype.precision;
    /** @type {?} */
    CalendarConfig.prototype.mappings;
    /** @type {?} */
    CalendarConfig.prototype.fallback;
    /** @type {?} */
    CalendarConfig.prototype.dateMinBound;
    /** @type {?} */
    CalendarConfig.prototype.dateMaxBound;
}
var DateConfigBase = /** @class */ (function (_super) {
    tslib_1.__extends(DateConfigBase, _super);
    function DateConfigBase(precision, mappings, fallback) {
        return _super.call(this, CalendarMode.DateOnly, precision, mappings, fallback) || this;
    }
    return DateConfigBase;
}(CalendarConfig));
export { DateConfigBase };
var YearConfig = /** @class */ (function (_super) {
    tslib_1.__extends(YearConfig, _super);
    function YearConfig() {
        return _super.call(this, DatePrecision.Year, new YearMappings(), 'number') || this;
    }
    return YearConfig;
}(DateConfigBase));
export { YearConfig };
var MonthConfig = /** @class */ (function (_super) {
    tslib_1.__extends(MonthConfig, _super);
    function MonthConfig() {
        return _super.call(this, DatePrecision.Month, new MonthMappings(), 'month') || this;
    }
    return MonthConfig;
}(DateConfigBase));
export { MonthConfig };
var DateConfig = /** @class */ (function (_super) {
    tslib_1.__extends(DateConfig, _super);
    function DateConfig() {
        return _super.call(this, DatePrecision.Date, new DateMappings(), 'date') || this;
    }
    return DateConfig;
}(DateConfigBase));
export { DateConfig };
var DatetimeConfig = /** @class */ (function (_super) {
    tslib_1.__extends(DatetimeConfig, _super);
    function DatetimeConfig() {
        return _super.call(this, CalendarMode.Both, DatePrecision.Minute, new DatetimeMappings(), 'datetime-local') || this;
    }
    return DatetimeConfig;
}(CalendarConfig));
export { DatetimeConfig };
var TimeConfig = /** @class */ (function (_super) {
    tslib_1.__extends(TimeConfig, _super);
    function TimeConfig() {
        return _super.call(this, CalendarMode.TimeOnly, DatePrecision.Minute, new TimeMappings(), 'time') || this;
    }
    /**
     * @param {?} providedDate
     * @return {?}
     */
    TimeConfig.prototype.updateBounds = /**
     * @param {?} providedDate
     * @return {?}
     */
    function (providedDate) {
        this.dateMaxBound = DateUtil.endOf(DatePrecision.Date, DateUtil.clone(providedDate));
        this.dateMinBound = DateUtil.previous(DatePrecision.Date, DateUtil.clone(this.dateMaxBound));
    };
    return TimeConfig;
}(CalendarConfig));
export { TimeConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL2NsYXNzZXMvY2FsZW5kYXItY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBbUIsWUFBWSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEksT0FBTyxFQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUVwRTs7OztJQVVFLHdCQUFZLElBQWtCLEVBQUUsU0FBd0IsRUFBRSxRQUEwQixFQUFFLFFBQWdCO1FBQ3BHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU0scUNBQVk7Ozs7SUFBbkIsVUFBb0IsWUFBa0I7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBckJELElBcUJDOzs7Ozs7O0lBcEJDLDhCQUEwQjs7SUFDMUIsbUNBQWdDOztJQUNoQyxrQ0FBa0M7O0lBRWxDLGtDQUF3Qjs7SUFFeEIsc0NBQTJCOztJQUMzQixzQ0FBMkI7O0FBZTdCO0lBQW9DLDBDQUFjO0lBQ2hELHdCQUFZLFNBQXdCLEVBQUUsUUFBMEIsRUFBRSxRQUFnQjtlQUNoRixrQkFBTSxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO0lBQzdELENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFKRCxDQUFvQyxjQUFjLEdBSWpEOztBQUVEO0lBQWdDLHNDQUFjO0lBQzVDO2VBQ0Usa0JBQ0UsYUFBYSxDQUFDLElBQUksRUFDbEIsSUFBSSxZQUFZLEVBQUUsRUFDbEIsUUFBUSxDQUFDO0lBQ2IsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQVBELENBQWdDLGNBQWMsR0FPN0M7O0FBRUQ7SUFBaUMsdUNBQWM7SUFDN0M7ZUFDRSxrQkFDRSxhQUFhLENBQUMsS0FBSyxFQUNuQixJQUFJLGFBQWEsRUFBRSxFQUNuQixPQUFPLENBQUM7SUFDWixDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBUEQsQ0FBaUMsY0FBYyxHQU85Qzs7QUFFRDtJQUFnQyxzQ0FBYztJQUM1QztlQUNFLGtCQUNFLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLElBQUksWUFBWSxFQUFFLEVBQ2xCLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUFQRCxDQUFnQyxjQUFjLEdBTzdDOztBQUVEO0lBQW9DLDBDQUFjO0lBQ2hEO2VBQ0Usa0JBQ0UsWUFBWSxDQUFDLElBQUksRUFDakIsYUFBYSxDQUFDLE1BQU0sRUFDcEIsSUFBSSxnQkFBZ0IsRUFBRSxFQUN0QixnQkFBZ0IsQ0FBQztJQUNyQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBUkQsQ0FBb0MsY0FBYyxHQVFqRDs7QUFFRDtJQUFnQyxzQ0FBYztJQUM1QztlQUNFLGtCQUNFLFlBQVksQ0FBQyxRQUFRLEVBQ3JCLGFBQWEsQ0FBQyxNQUFNLEVBQ3BCLElBQUksWUFBWSxFQUFFLEVBQ2xCLE1BQU0sQ0FBQztJQUNYLENBQUM7Ozs7O0lBRU0saUNBQVk7Ozs7SUFBbkIsVUFBb0IsWUFBa0I7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQWJELENBQWdDLGNBQWMsR0FhN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NhbGVuZGFyTW9kZX0gZnJvbSAnLi4vc2VydmljZXMvY2FsZW5kYXIuc2VydmljZSc7XHJcbmltcG9ydCB7Q2FsZW5kYXJNYXBwaW5ncywgRGF0ZU1hcHBpbmdzLCBEYXRldGltZU1hcHBpbmdzLCBNb250aE1hcHBpbmdzLCBUaW1lTWFwcGluZ3MsIFllYXJNYXBwaW5nc30gZnJvbSAnLi9jYWxlbmRhci1tYXBwaW5ncyc7XHJcbmltcG9ydCB7RGF0ZVByZWNpc2lvbiwgRGF0ZVV0aWx9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FsZW5kYXJDb25maWcge1xyXG4gIHB1YmxpYyBtb2RlOiBDYWxlbmRhck1vZGU7XHJcbiAgcHVibGljIHByZWNpc2lvbjogRGF0ZVByZWNpc2lvbjtcclxuICBwdWJsaWMgbWFwcGluZ3M6IENhbGVuZGFyTWFwcGluZ3M7XHJcblxyXG4gIHB1YmxpYyBmYWxsYmFjazogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgZGF0ZU1pbkJvdW5kPzogRGF0ZTtcclxuICBwdWJsaWMgZGF0ZU1heEJvdW5kPzogRGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IobW9kZTogQ2FsZW5kYXJNb2RlLCBwcmVjaXNpb246IERhdGVQcmVjaXNpb24sIG1hcHBpbmdzOiBDYWxlbmRhck1hcHBpbmdzLCBmYWxsYmFjazogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgdGhpcy5wcmVjaXNpb24gPSBwcmVjaXNpb247XHJcbiAgICB0aGlzLm1hcHBpbmdzID0gbWFwcGluZ3M7XHJcbiAgICB0aGlzLmZhbGxiYWNrID0gZmFsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlQm91bmRzKHByb3ZpZGVkRGF0ZTogRGF0ZSk6IHZvaWQge1xyXG4gICAgdGhpcy5kYXRlTWluQm91bmQgPSBEYXRlVXRpbC5zdGFydE9mKERhdGVQcmVjaXNpb24uWWVhciwgbmV3IERhdGUoKSwgdHJ1ZSk7XHJcbiAgICB0aGlzLmRhdGVNaW5Cb3VuZC5zZXRGdWxsWWVhcigwKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlQ29uZmlnQmFzZSBleHRlbmRzIENhbGVuZGFyQ29uZmlnIHtcclxuICBjb25zdHJ1Y3RvcihwcmVjaXNpb246IERhdGVQcmVjaXNpb24sIG1hcHBpbmdzOiBDYWxlbmRhck1hcHBpbmdzLCBmYWxsYmFjazogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihDYWxlbmRhck1vZGUuRGF0ZU9ubHksIHByZWNpc2lvbiwgbWFwcGluZ3MsIGZhbGxiYWNrKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBZZWFyQ29uZmlnIGV4dGVuZHMgRGF0ZUNvbmZpZ0Jhc2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXHJcbiAgICAgIERhdGVQcmVjaXNpb24uWWVhcixcclxuICAgICAgbmV3IFllYXJNYXBwaW5ncygpLFxyXG4gICAgICAnbnVtYmVyJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9udGhDb25maWcgZXh0ZW5kcyBEYXRlQ29uZmlnQmFzZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgRGF0ZVByZWNpc2lvbi5Nb250aCxcclxuICAgICAgbmV3IE1vbnRoTWFwcGluZ3MoKSxcclxuICAgICAgJ21vbnRoJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZUNvbmZpZyBleHRlbmRzIERhdGVDb25maWdCYXNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBEYXRlUHJlY2lzaW9uLkRhdGUsXHJcbiAgICAgIG5ldyBEYXRlTWFwcGluZ3MoKSxcclxuICAgICAgJ2RhdGUnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRldGltZUNvbmZpZyBleHRlbmRzIENhbGVuZGFyQ29uZmlnIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBDYWxlbmRhck1vZGUuQm90aCxcclxuICAgICAgRGF0ZVByZWNpc2lvbi5NaW51dGUsXHJcbiAgICAgIG5ldyBEYXRldGltZU1hcHBpbmdzKCksXHJcbiAgICAgICdkYXRldGltZS1sb2NhbCcpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVDb25maWcgZXh0ZW5kcyBDYWxlbmRhckNvbmZpZyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgQ2FsZW5kYXJNb2RlLlRpbWVPbmx5LFxyXG4gICAgICBEYXRlUHJlY2lzaW9uLk1pbnV0ZSxcclxuICAgICAgbmV3IFRpbWVNYXBwaW5ncygpLFxyXG4gICAgICAndGltZScpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZUJvdW5kcyhwcm92aWRlZERhdGU6IERhdGUpOiB2b2lkIHtcclxuICAgIHRoaXMuZGF0ZU1heEJvdW5kID0gRGF0ZVV0aWwuZW5kT2YoRGF0ZVByZWNpc2lvbi5EYXRlLCBEYXRlVXRpbC5jbG9uZShwcm92aWRlZERhdGUpKTtcclxuICAgIHRoaXMuZGF0ZU1pbkJvdW5kID0gRGF0ZVV0aWwucHJldmlvdXMoRGF0ZVByZWNpc2lvbi5EYXRlLCBEYXRlVXRpbC5jbG9uZSh0aGlzLmRhdGVNYXhCb3VuZCkpO1xyXG4gIH1cclxufVxyXG4iXX0=