/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, QueryList } from '@angular/core';
import { HandledEvent, KeyCode } from '../../../misc/util/internal';
import { DropdownAutoCloseType, DropdownService } from '../services/dropdown.service';
import { FuiDropdownMenu } from './dropdown-menu';
var FuiDropdown = /** @class */ (function () {
    function FuiDropdown(_element) {
        var _this = this;
        this._element = _element;
        this.service = new DropdownService();
        this.service.isOpenChange.subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.service.isOpen) {
                _this._element.nativeElement.focus();
            }
        }));
    }
    Object.defineProperty(FuiDropdown.prototype, "isOpenChange", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isOpenChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            // This is to ensure nested dropdowns don't get made bold.
            return this.service.isOpen && !this.service.isNested;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "isOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isOpen;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // If we are opening the dropdown, we want to always open its parents.
            this.service.setOpenState(value, !!value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isDisabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.service.setDisabledState(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "autoClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.autoCloseMode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.service.autoCloseMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "children", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            // @ContentChildren includes the current element by default.
            return this._children.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c !== _this; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdown.prototype, "tabIndex", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isDisabled || this.service.isNested) {
                // If disabled, remove from tabindex.
                return undefined;
            }
            if (this._tabIndex != undefined) {
                // If custom tabindex, default to that.
                return this._tabIndex;
            }
            // Otherwise, return default of 0.
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiDropdown.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._menu) {
            throw new Error('You must set [fuiDropdownMenu] on the menu element.');
        }
        this._menu.service = this.service;
        this._menu.parentElement = this._element;
        this.childrenUpdated();
        this._children.changes
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.childrenUpdated(); }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDropdown.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            this.service.toggleOpenState();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDropdown.prototype.onFocusOut = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.externallyClose();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDropdown.prototype.onKeypress = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Block the keyboard event from being fired on parent dropdowns.
        if (!e.eventHandled) {
            if (e.keyCode === KeyCode.Enter) {
                e.eventHandled = true;
                this.service.setOpenState(true);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    FuiDropdown.prototype.childrenUpdated = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // Reregister child dropdowns each time the menu content changes.
        this.children
            .map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.service; }))
            .forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return _this.service.registerChild(s); }));
    };
    /**
     * @private
     * @return {?}
     */
    FuiDropdown.prototype.externallyClose = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.service.autoCloseMode === DropdownAutoCloseType.ItemClick ||
            this.service.autoCloseMode === DropdownAutoCloseType.OutsideClick) {
            // No need to reflect in parent since they are also bound to document.
            this.service.setOpenState(false);
        }
    };
    FuiDropdown.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiDropdown]'
                },] }
    ];
    /** @nocollapse */
    FuiDropdown.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FuiDropdown.propDecorators = {
        _menu: [{ type: ContentChild, args: [FuiDropdownMenu, { static: false },] }],
        isOpenChange: [{ type: Output }],
        isActive: [{ type: HostBinding, args: ['class.active',] }],
        isOpen: [{ type: Input }],
        isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        autoClose: [{ type: Input }],
        _children: [{ type: ContentChildren, args: [FuiDropdown, { descendants: true },] }],
        _tabIndex: [{ type: Input, args: ['tabindex',] }],
        tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }],
        onKeypress: [{ type: HostListener, args: ['keypress', ['$event'],] }]
    };
    return FuiDropdown;
}());
export { FuiDropdown };
if (false) {
    /** @type {?} */
    FuiDropdown.prototype.service;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._menu;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._children;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,