/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ContentChild, ContentChildren, Directive, ElementRef, forwardRef, HostListener, Input, QueryList, Renderer2 } from '@angular/core';
import { FuiTransition, Transition, TransitionController, TransitionDirection } from '../../transition/internal';
import { KeyCode } from '../../../misc/util/internal';
import { DropdownAutoCloseType } from '../services/dropdown.service';
// Polyfill for IE
import 'element-closest';
var FuiDropdownMenuItem = /** @class */ (function () {
    function FuiDropdownMenuItem(_renderer, element) {
        this._renderer = _renderer;
        this.element = element;
        this.isSelected = false;
        this.selectedClass = 'selected';
    }
    Object.defineProperty(FuiDropdownMenuItem.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            // We must use nativeElement as Angular doesn't have a way of reading class information.
            /** @type {?} */
            var element = (/** @type {?} */ (this.element.nativeElement));
            return element.classList.contains('disabled');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenuItem.prototype, "hasChildDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.childDropdownMenu;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenuItem.prototype, "isSelected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isSelected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Renderer is used to enable a dynamic class name.
            if (value) {
                this._renderer.addClass(this.element.nativeElement, this.selectedClass);
            }
            else {
                this._renderer.removeClass(this.element.nativeElement, this.selectedClass);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiDropdownMenuItem.prototype.performClick = /**
     * @return {?}
     */
    function () {
        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
        this.element.nativeElement.click();
    };
    FuiDropdownMenuItem.decorators = [
        { type: Directive, args: [{
                    // We must attach to every '.item' as Angular doesn't support > selectors.
                    selector: '.item'
                },] }
    ];
    /** @nocollapse */
    FuiDropdownMenuItem.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FuiDropdownMenuItem.propDecorators = {
        childDropdownMenu: [{ type: ContentChild, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return FuiDropdownMenu; })), { static: false },] }]
    };
    return FuiDropdownMenuItem;
}());
export { FuiDropdownMenuItem };
if (false) {
    /** @type {?} */
    FuiDropdownMenuItem.prototype.selectedClass;
    /** @type {?} */
    FuiDropdownMenuItem.prototype.childDropdownMenu;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenuItem.prototype._isSelected;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenuItem.prototype._renderer;
    /** @type {?} */
    FuiDropdownMenuItem.prototype.element;
}
var FuiDropdownMenu = /** @class */ (function (_super) {
    tslib_1.__extends(FuiDropdownMenu, _super);
    function FuiDropdownMenu(renderer, element, changeDetector) {
        var _this = _super.call(this, renderer, element, changeDetector) || this;
        // Initialise transition functionality.
        _this._transitionController = new TransitionController(false);
        _this.setTransitionController(_this._transitionController);
        _this.menuTransition = 'slide down';
        _this.menuTransitionDuration = 200;
        _this.menuAutoSelectFirst = false;
        _this.menuSelectedItemClass = 'selected';
        // In case the dropdown menu is destroyed before it has a chance to be fully initialised.
        _this._parentKeyDownListener = (/**
         * @return {?}
         */
        function () {
        });
        return _this;
    }
    Object.defineProperty(FuiDropdownMenu.prototype, "parentElement", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._parentKeyDownListener = this._renderer
                .listen(value.nativeElement, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                return _this.onParentKeyDown(e);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenu.prototype, "items", {
        set: /**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._itemsQueryOverride = items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenu.prototype, "service", {
        get: /**
         * @return {?}
         */
        function () {
            return this._service;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._service = value;
            /** @type {?} */
            var previousIsOpen = this._service.isOpen;
            this._service.isOpenChange.subscribe((/**
             * @param {?} isOpen
             * @return {?}
             */
            function (isOpen) {
                if (isOpen !== previousIsOpen) {
                    // Only run transitions if the open state has changed.
                    _this._transitionController.stopAll();
                    _this._transitionController.animate(new Transition(_this.menuTransition, _this.menuTransitionDuration, TransitionDirection.Either, (/**
                     * @return {?}
                     */
                    function () { return _this._service.isAnimating = false; })));
                }
                if (!isOpen) {
                    // Reset the item selections when a nested item is selected to avoid incosistent open states.
                    if (_this.selectedItems.length > 1) {
                        _this.resetSelection();
                    }
                }
                previousIsOpen = isOpen;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenu.prototype, "_itemsQuery", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._itemsQueryOverride || this._itemsQueryInternal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiDropdownMenu.prototype, "_items", {
        // Get the list of items, ignoring those that are disabled.
        get: 
        // Get the list of items, ignoring those that are disabled.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this._itemsQuery.filter((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return !i.isDisabled; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDropdownMenu.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            if (this._service.autoCloseMode === DropdownAutoCloseType.ItemClick) {
                /** @type {?} */
                var target = (/** @type {?} */ (e.target));
                if (this._element.nativeElement.contains(target.closest('.item')) && !/input|textarea/i.test(target.tagName)) {
                    // Once an item is selected, we can close the entire dropdown.
                    this._service.setOpenState(false, true);
                }
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiDropdownMenu.prototype.onParentKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Only the root dropdown (i.e. not nested dropdowns) is responsible for keeping track of the currently selected item.
        if (this._service && this._service.isOpen && !this._service.isNested) {
            // Stop document events like scrolling while open.
            /** @type {?} */
            var target = (/** @type {?} */ (e.target));
            if (!/input/i.test(target.tagName) &&
                [KeyCode.Escape, KeyCode.Enter, KeyCode.Up, KeyCode.Down, KeyCode.Left, KeyCode.Right].find((/**
                 * @param {?} kC
                 * @return {?}
                 */
                function (kC) { return kC === e.keyCode; }))) {
                e.preventDefault();
            }
            // Gets the top selected item from the stack.
            var _a = tslib_1.__read(this.selectedItems.slice(-1), 1), selected = _a[0];
            // Keeping track of the menu containing the currently selected element allows us to easily determine its siblings.
            /** @type {?} */
            var selectedContainer = this;
            if (this.selectedItems.length >= 2) {
                var _b = tslib_1.__read(this.selectedItems.slice(-2), 1), selectedParent = _b[0];
                selectedContainer = selectedParent.childDropdownMenu;
            }
            switch (e.keyCode) {
                // Escape : close the entire dropdown.
                case KeyCode.Escape: {
                    this._service.setOpenState(false);
                    break;
                }
                // Down : select the next item below the current one, or the 1st if none selected.
                case KeyCode.Down:
                // Up : select the next item above the current one, or the 1st if none selected.
                case KeyCode.Up: {
                    this.selectedItems.pop();
                    this.selectedItems.push(selectedContainer.updateSelection(selected, e.keyCode));
                    // Prevent default regardless of whether we are in an input, to stop jumping to the start or end of the query string.
                    e.preventDefault();
                    break;
                }
                // Enter : if the item doesn't contain a nested dropdown, 'click' it. Otherwise, fall through to 'Right' action.
                case KeyCode.Enter: {
                    if (selected && !selected.hasChildDropdown) {
                        selected.performClick();
                        break;
                    }
                }
                // falls through
                // Right : if the selected item contains a nested dropdown, open the dropdown & select the 1st item.
                case KeyCode.Right: {
                    if (selected && selected.hasChildDropdown) {
                        selected.childDropdownMenu.service.setOpenState(true);
                        this.selectedItems.push(selected.childDropdownMenu.updateSelection(selected, e.keyCode));
                    }
                    break;
                }
                // Left : if the selected item is in a nested dropdown, close it and select the containing item.
                case KeyCode.Left: {
                    if (this.selectedItems.length >= 2) {
                        this.selectedItems.pop();
                        var _c = tslib_1.__read(this.selectedItems.slice(-1), 1), selectedParent = _c[0];
                        selectedParent.childDropdownMenu.service.setOpenState(false);
                        selectedParent.isSelected = true;
                    }
                    break;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    FuiDropdownMenu.prototype.resetSelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectedItems = [];
        this._items.forEach((/**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            i.selectedClass = _this.menuSelectedItemClass;
            i.isSelected = false;
        }));
        if (this.menuAutoSelectFirst && this._items.length > 0) {
            // Autoselect 1st item if required & possible.
            this._items[0].isSelected = true;
            this.scrollToItem(this._items[0]);
            this.selectedItems.push(this._itemsQuery.first);
        }
    };
    // Determines the item to next be selected, based on the keyboard input & the currently selected item.
    // Determines the item to next be selected, based on the keyboard input & the currently selected item.
    /**
     * @param {?} selectedItem
     * @param {?} keyCode
     * @return {?}
     */
    FuiDropdownMenu.prototype.updateSelection = 
    // Determines the item to next be selected, based on the keyboard input & the currently selected item.
    /**
     * @param {?} selectedItem
     * @param {?} keyCode
     * @return {?}
     */
    function (selectedItem, keyCode) {
        if (selectedItem) {
            // Remove the selected status on the previously selected item.
            selectedItem.isSelected = false;
        }
        /** @type {?} */
        var selectedIndex = this._items
            .findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i === selectedItem; }));
        /** @type {?} */
        var newSelection;
        switch (keyCode) {
            case KeyCode.Enter:
            case KeyCode.Right:
            case KeyCode.Down:
                selectedIndex += 1;
                break;
            case KeyCode.Up:
                if (selectedIndex === -1) {
                    // If none are selected, select the 1st item. Should this be `this.items.last - 1`?
                    selectedIndex = 0;
                    break;
                }
                selectedIndex -= 1;
                break;
        }
        // Select the item at the updated index. The || is to stop us selecting past the start or end of the item list.
        newSelection = this._items[selectedIndex] || selectedItem;
        if (newSelection) {
            // Set the selected status on the newly selected item.
            newSelection.isSelected = true;
            // Set the current scroll position to the location of the newly selected item.
            this.scrollToItem(newSelection);
        }
        return newSelection;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FuiDropdownMenu.prototype.scrollToItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var menu = this._element.nativeElement;
        /** @type {?} */
        var selectedRect = item.element.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var menuRect = menu.getBoundingClientRect();
        /** @type {?} */
        var scrollAmount = 0;
        if (selectedRect.bottom > menuRect.bottom) {
            scrollAmount = selectedRect.bottom - menuRect.bottom;
        }
        if (selectedRect.top < menuRect.top) {
            scrollAmount = selectedRect.top - menuRect.top;
        }
        menu.scrollTop += Math.round(scrollAmount);
    };
    /**
     * @return {?}
     */
    FuiDropdownMenu.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.onItemsChanged();
        this._itemsQuery.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.onItemsChanged(); }));
    };
    /**
     * @return {?}
     */
    FuiDropdownMenu.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._parentKeyDownListener();
    };
    /**
     * @private
     * @return {?}
     */
    FuiDropdownMenu.prototype.onItemsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        // We use `_items` rather than `items` in case one or more have become disabled.
        this.resetSelection();
    };
    FuiDropdownMenu.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiDropdownMenu]'
                },] }
    ];
    /** @nocollapse */
    FuiDropdownMenu.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    FuiDropdownMenu.propDecorators = {
        menuTransition: [{ type: Input }],
        menuTransitionDuration: [{ type: Input }],
        menuAutoSelectFirst: [{ type: Input }],
        menuSelectedItemClass: [{ type: Input }],
        _itemsQueryInternal: [{ type: ContentChildren, args: [FuiDropdownMenuItem,] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FuiDropdownMenu;
}(FuiTransition));
export { FuiDropdownMenu };
if (false) {
    /** @type {?} */
    FuiDropdownMenu.prototype.menuTransition;
    /** @type {?} */
    FuiDropdownMenu.prototype.menuTransitionDuration;
    /** @type {?} */
    FuiDropdownMenu.prototype.selectedItems;
    /** @type {?} */
    FuiDropdownMenu.prototype.menuAutoSelectFirst;
    /** @type {?} */
    FuiDropdownMenu.prototype.menuSelectedItemClass;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenu.prototype._transitionController;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenu.prototype._itemsQueryInternal;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenu.prototype._itemsQueryOverride;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenu.prototype._parentKeyDownListener;
    /**
     * @type {?}
     * @private
     */
    FuiDropdownMenu.prototype._service;
}
//# sourceMappingURL=data:application/json;base64,