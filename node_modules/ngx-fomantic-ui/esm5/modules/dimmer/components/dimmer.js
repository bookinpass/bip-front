/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
import { FuiTransition, Transition, TransitionController, TransitionDirection } from '../../transition/internal';
var FuiDimmer = /** @class */ (function (_super) {
    tslib_1.__extends(FuiDimmer, _super);
    function FuiDimmer(renderer, element, changeDetector) {
        var _this = _super.call(this, renderer, element, changeDetector) || this;
        _this._isDimmed = false;
        _this.isDimmedChange = new EventEmitter();
        _this.isClickable = true;
        _this.wrapContent = true;
        _this.hasClasses = true;
        return _this;
    }
    Object.defineProperty(FuiDimmer.prototype, "isDimmed", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isDimmed;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var isDimmed = !!value;
            if (!this._transitionController) {
                // Initialise transition functionality when first setting dimmed, to ensure initial state doesn't transition.
                this._transitionController = new TransitionController(isDimmed, 'block');
                this.setTransitionController(this._transitionController);
                this._isDimmed = isDimmed;
            }
            else if (this._isDimmed !== isDimmed) {
                this._isDimmed = isDimmed;
                this._transitionController.stopAll();
                this._transitionController.animate(new Transition('fade', this.transitionDuration, isDimmed ? TransitionDirection.In : TransitionDirection.Out));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiDimmer.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.isClickable) {
            this.isDimmed = false;
            this.isDimmedChange.emit(this.isDimmed);
        }
    };
    FuiDimmer.decorators = [
        { type: Component, args: [{
                    selector: 'fui-dimmer',
                    template: "\n<div [class.content]=\"wrapContent\">\n    <ng-content></ng-content>\n</div>\n",
                    styles: ["\n:host.dimmer:not(.hidden) {\n    transition: none;\n    display: flex !important;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    FuiDimmer.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    FuiDimmer.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.dimmer',] }],
        isDimmedChange: [{ type: Output }],
        isClickable: [{ type: Input }],
        transition: [{ type: Input }],
        transitionDuration: [{ type: Input }],
        wrapContent: [{ type: Input }],
        isDimmed: [{ type: HostBinding, args: ['class.active',] }, { type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return FuiDimmer;
}(FuiTransition));
export { FuiDimmer };
if (false) {
    /** @type {?} */
    FuiDimmer.prototype.hasClasses;
    /** @type {?} */
    FuiDimmer.prototype.isDimmedChange;
    /** @type {?} */
    FuiDimmer.prototype.isClickable;
    /** @type {?} */
    FuiDimmer.prototype.transition;
    /** @type {?} */
    FuiDimmer.prototype.transitionDuration;
    /** @type {?} */
    FuiDimmer.prototype.wrapContent;
    /**
     * @type {?}
     * @private
     */
    FuiDimmer.prototype._transitionController;
    /**
     * @type {?}
     * @private
     */
    FuiDimmer.prototype._isDimmed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltbWVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kaW1tZXIvY29tcG9uZW50cy9kaW1tZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxSSxPQUFPLEVBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRS9HO0lBYytCLHFDQUFhO0lBa0IxQyxtQkFBWSxRQUFtQixFQUFFLE9BQW1CLEVBQUUsY0FBaUM7UUFBdkYsWUFDRSxrQkFBTSxRQUFRLEVBQUUsT0FBTyxFQUFFLGNBQWMsQ0FBQyxTQVN6QztRQVBDLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUNsRCxLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUV4QixLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUV4QixLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQzs7SUFDekIsQ0FBQztJQUlELHNCQUVXLCtCQUFROzs7O1FBRm5CO1lBR0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBRUQsVUFBb0IsS0FBYzs7Z0JBQzFCLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSztZQUV4QixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUMvQiw2R0FBNkc7Z0JBQzdHLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFFekUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2dCQUV6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQzthQUMzQjtpQkFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFO2dCQUV0QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztnQkFFMUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNyQyxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUNoQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2pIO1FBQ0gsQ0FBQzs7O09BcEJBOzs7O0lBdUJNLDJCQUFPOzs7SUFEZDtRQUVFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDOztnQkE5RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsa0ZBSVg7NkJBQ1UsMEZBS1Y7aUJBQ0E7Ozs7Z0JBaEJ5RyxTQUFTO2dCQUE3RSxVQUFVO2dCQUF4QyxpQkFBaUI7Ozs2QkFtQnRCLFdBQVcsU0FBQyxVQUFVLGNBQ3RCLFdBQVcsU0FBQyxjQUFjO2lDQUUxQixNQUFNOzhCQUVOLEtBQUs7NkJBRUwsS0FBSztxQ0FFTCxLQUFLOzhCQUdMLEtBQUs7MkJBa0JMLFdBQVcsU0FBQyxjQUFjLGNBQzFCLEtBQUs7MEJBeUJMLFlBQVksU0FBQyxPQUFPOztJQU92QixnQkFBQztDQUFBLEFBL0VELENBYytCLGFBQWEsR0FpRTNDO1NBakVZLFNBQVM7OztJQUVwQiwrQkFFb0M7O0lBQ3BDLG1DQUM2Qzs7SUFDN0MsZ0NBQzRCOztJQUM1QiwrQkFDMEI7O0lBQzFCLHVDQUNrQzs7SUFFbEMsZ0NBQzRCOzs7OztJQUM1QiwwQ0FBb0Q7Ozs7O0lBY3BELDhCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Z1aVRyYW5zaXRpb24sIFRyYW5zaXRpb24sIFRyYW5zaXRpb25Db250cm9sbGVyLCBUcmFuc2l0aW9uRGlyZWN0aW9ufSBmcm9tICcuLi8uLi90cmFuc2l0aW9uL2ludGVybmFsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWRpbW1lcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuPGRpdiBbY2xhc3MuY29udGVudF09XCJ3cmFwQ29udGVudFwiPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgXHJcbjpob3N0LmRpbW1lcjpub3QoLmhpZGRlbikge1xyXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcclxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcclxufVxyXG5gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpRGltbWVyIGV4dGVuZHMgRnVpVHJhbnNpdGlvbiB7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MudWknKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZGltbWVyJylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuICBAT3V0cHV0KClcclxuICBwdWJsaWMgaXNEaW1tZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpc0NsaWNrYWJsZTogYm9vbGVhbjtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uOiBzdHJpbmc7XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgLyogSW50ZXJuYWwgZm9yIG5vdyAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHdyYXBDb250ZW50OiBib29sZWFuO1xyXG4gIHByaXZhdGUgX3RyYW5zaXRpb25Db250cm9sbGVyOiBUcmFuc2l0aW9uQ29udHJvbGxlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWxlbWVudDogRWxlbWVudFJlZiwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlciwgZWxlbWVudCwgY2hhbmdlRGV0ZWN0b3IpO1xyXG5cclxuICAgIHRoaXMuX2lzRGltbWVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzRGltbWVkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG4gICAgdGhpcy5pc0NsaWNrYWJsZSA9IHRydWU7XHJcblxyXG4gICAgdGhpcy53cmFwQ29udGVudCA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2lzRGltbWVkOiBib29sZWFuO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IGlzRGltbWVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRGltbWVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBpc0RpbW1lZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgY29uc3QgaXNEaW1tZWQgPSAhIXZhbHVlO1xyXG5cclxuICAgIGlmICghdGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIpIHtcclxuICAgICAgLy8gSW5pdGlhbGlzZSB0cmFuc2l0aW9uIGZ1bmN0aW9uYWxpdHkgd2hlbiBmaXJzdCBzZXR0aW5nIGRpbW1lZCwgdG8gZW5zdXJlIGluaXRpYWwgc3RhdGUgZG9lc24ndCB0cmFuc2l0aW9uLlxyXG4gICAgICB0aGlzLl90cmFuc2l0aW9uQ29udHJvbGxlciA9IG5ldyBUcmFuc2l0aW9uQ29udHJvbGxlcihpc0RpbW1lZCwgJ2Jsb2NrJyk7XHJcblxyXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25Db250cm9sbGVyKHRoaXMuX3RyYW5zaXRpb25Db250cm9sbGVyKTtcclxuXHJcbiAgICAgIHRoaXMuX2lzRGltbWVkID0gaXNEaW1tZWQ7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2lzRGltbWVkICE9PSBpc0RpbW1lZCkge1xyXG5cclxuICAgICAgdGhpcy5faXNEaW1tZWQgPSBpc0RpbW1lZDtcclxuXHJcbiAgICAgIHRoaXMuX3RyYW5zaXRpb25Db250cm9sbGVyLnN0b3BBbGwoKTtcclxuICAgICAgdGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIuYW5pbWF0ZShcclxuICAgICAgICBuZXcgVHJhbnNpdGlvbignZmFkZScsIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uLCBpc0RpbW1lZCA/IFRyYW5zaXRpb25EaXJlY3Rpb24uSW4gOiBUcmFuc2l0aW9uRGlyZWN0aW9uLk91dCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaXNDbGlja2FibGUpIHtcclxuICAgICAgdGhpcy5pc0RpbW1lZCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmlzRGltbWVkQ2hhbmdlLmVtaXQodGhpcy5pc0RpbW1lZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==