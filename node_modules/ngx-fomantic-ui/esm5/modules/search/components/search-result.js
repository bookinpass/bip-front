/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { FuiComponentFactory } from '../../../misc/util/internal';
// See https://github.com/Microsoft/TypeScript/issues/13449.
/** @type {?} */
var templateRef = TemplateRef;
/**
 * @template T
 */
var FuiSearchResult = /** @class */ (function () {
    function FuiSearchResult(componentFactory) {
        this.componentFactory = componentFactory;
        this.hasClasses = true;
        // By default we make this function return an empty string, for the brief moment when it isn't displaying the correct label.
        this.formatter = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return ''; });
    }
    Object.defineProperty(FuiSearchResult.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            return this._template;
        },
        set: /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._template = template;
            if (this.template) {
                this.componentFactory.createView(this.templateSibling, this.template, {
                    $implicit: this.value,
                    query: this.query
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    FuiSearchResult.decorators = [
        { type: Component, args: [{
                    selector: 'fui-search-result',
                    template: "\n<span #templateSibling></span>\n<span *ngIf=\"!template\" [innerHTML]=\"formatter(value, query)\"></span>\n"
                }] }
    ];
    /** @nocollapse */
    FuiSearchResult.ctorParameters = function () { return [
        { type: FuiComponentFactory }
    ]; };
    FuiSearchResult.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.result',] }],
        value: [{ type: Input }],
        query: [{ type: Input }],
        formatter: [{ type: Input }],
        templateSibling: [{ type: ViewChild, args: ['templateSibling', { read: ViewContainerRef, static: false },] }],
        template: [{ type: Input }]
    };
    return FuiSearchResult;
}());
export { FuiSearchResult };
if (false) {
    /** @type {?} */
    FuiSearchResult.prototype.hasClasses;
    /** @type {?} */
    FuiSearchResult.prototype.value;
    /** @type {?} */
    FuiSearchResult.prototype.query;
    /** @type {?} */
    FuiSearchResult.prototype.formatter;
    /** @type {?} */
    FuiSearchResult.prototype.templateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiSearchResult.prototype._template;
    /** @type {?} */
    FuiSearchResult.prototype.componentFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLXJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7OztJQUkxRCxXQUFXLEdBQUcsV0FBVzs7OztBQUUvQjtJQXVCRSx5QkFBbUIsZ0JBQXFDO1FBQXJDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBcUI7UUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFdkIsNEhBQTRIO1FBQzVILElBQUksQ0FBQyxTQUFTOzs7O1FBQUcsVUFBQSxLQUFLLElBQUksT0FBQSxFQUFFLEVBQUYsQ0FBRSxDQUFBLENBQUM7SUFDL0IsQ0FBQztJQUlELHNCQUNXLHFDQUFROzs7O1FBRG5CO1lBRUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBRUQsVUFBb0IsUUFBb0Q7WUFDdEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDcEUsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO29CQUNyQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7aUJBQ2xCLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQzs7O09BVkE7O2dCQW5DRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLCtHQUdYO2lCQUNBOzs7O2dCQVpPLG1CQUFtQjs7OzZCQWdCeEIsV0FBVyxTQUFDLGNBQWM7d0JBRTFCLEtBQUs7d0JBRUwsS0FBSzs0QkFHTCxLQUFLO2tDQUdMLFNBQVMsU0FBQyxpQkFBaUIsRUFBRSxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDOzJCQVlwRSxLQUFLOztJQWNSLHNCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0F2Q1ksZUFBZTs7O0lBRzFCLHFDQUNvQzs7SUFDcEMsZ0NBQ2dCOztJQUNoQixnQ0FDcUI7O0lBRXJCLG9DQUNvRDs7SUFFcEQsMENBQ3lDOzs7OztJQVN6QyxvQ0FBbUQ7O0lBUHZDLDJDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Z1aUNvbXBvbmVudEZhY3Rvcnl9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7SVJlc3VsdENvbnRleHR9IGZyb20gJy4vc2VhcmNoJztcclxuXHJcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzNDQ5LlxyXG5jb25zdCB0ZW1wbGF0ZVJlZiA9IFRlbXBsYXRlUmVmO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktc2VhcmNoLXJlc3VsdCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuPHNwYW4gI3RlbXBsYXRlU2libGluZz48L3NwYW4+XHJcbjxzcGFuICpuZ0lmPVwiIXRlbXBsYXRlXCIgW2lubmVySFRNTF09XCJmb3JtYXR0ZXIodmFsdWUsIHF1ZXJ5KVwiPjwvc3Bhbj5cclxuYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpU2VhcmNoUmVzdWx0PFQ+IHtcclxuXHJcbiAgLy8gU2V0cyB0aGUgRm9tYW50aWMgVUkgY2xhc3NlcyBvbiB0aGUgaG9zdCBlbGVtZW50LlxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmVzdWx0JylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB2YWx1ZTogVDtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBxdWVyeTogc3RyaW5nO1xyXG4gIC8vIFJldHVybnMgdGhlIGxhYmVsIGZyb20gYSBnaXZlbiB2YWx1ZS5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBmb3JtYXR0ZXI6IChvYmo6IFQsIHF1ZXJ5OiBzdHJpbmcpID0+IHN0cmluZztcclxuICAvLyBQbGFjZWhvbGRlciB0byBkcmF3IHRlbXBsYXRlIGJlc2lkZS5cclxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVNpYmxpbmcnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZX0pXHJcbiAgcHVibGljIHRlbXBsYXRlU2libGluZzogVmlld0NvbnRhaW5lclJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGNvbXBvbmVudEZhY3Rvcnk6IEZ1aUNvbXBvbmVudEZhY3RvcnkpIHtcclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcblxyXG4gICAgLy8gQnkgZGVmYXVsdCB3ZSBtYWtlIHRoaXMgZnVuY3Rpb24gcmV0dXJuIGFuIGVtcHR5IHN0cmluZywgZm9yIHRoZSBicmllZiBtb21lbnQgd2hlbiBpdCBpc24ndCBkaXNwbGF5aW5nIHRoZSBjb3JyZWN0IGxhYmVsLlxyXG4gICAgdGhpcy5mb3JtYXR0ZXIgPSB2YWx1ZSA9PiAnJztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3RlbXBsYXRlPzogVGVtcGxhdGVSZWY8SVJlc3VsdENvbnRleHQ8VD4+O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8SVJlc3VsdENvbnRleHQ8VD4+IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdGVtcGxhdGUodGVtcGxhdGU6IFRlbXBsYXRlUmVmPElSZXN1bHRDb250ZXh0PFQ+PiB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5fdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcclxuICAgIGlmICh0aGlzLnRlbXBsYXRlKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50RmFjdG9yeS5jcmVhdGVWaWV3KHRoaXMudGVtcGxhdGVTaWJsaW5nLCB0aGlzLnRlbXBsYXRlLCB7XHJcbiAgICAgICAgJGltcGxpY2l0OiB0aGlzLnZhbHVlLFxyXG4gICAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=