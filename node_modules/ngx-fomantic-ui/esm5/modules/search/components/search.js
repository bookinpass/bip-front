/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { Util } from '../../../misc/util/internal';
import { DropdownService, FuiDropdownMenu } from '../../dropdown/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { SearchService } from '../services/search.service';
/**
 * @record
 * @template T
 */
export function IResultContext() { }
if (false) {
    /** @type {?} */
    IResultContext.prototype.query;
}
/**
 * @template T
 */
var FuiSearch = /** @class */ (function () {
    function FuiSearch(_element, renderer, _localizationService) {
        var _this = this;
        this._element = _element;
        this._localizationService = _localizationService;
        this.dropdownService = new DropdownService();
        this.searchService = new SearchService();
        this.onLocaleUpdate();
        this._localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        function () { return _this.onLocaleUpdate(); }));
        this.hasClasses = true;
        this.tabindex = 0;
        this.hasIcon = true;
        this.retainSelectedResult = true;
        this.searchDelay = 200;
        this.maxResults = 7;
        this.onResultSelected = new EventEmitter();
        this.transition = 'scale';
        this.transitionDuration = 200;
    }
    Object.defineProperty(FuiSearch.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dropdownService.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "query", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.query;
        },
        set: /**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            var _this = this;
            this.selectedResult = undefined;
            // Initialise a delayed search.
            this.searchService.updateQueryDelayed(query, (/**
             * @return {?}
             */
            function () {
                // Set the results open state depending on whether a query has been entered.
                return _this.dropdownService.setOpenState(_this.searchService.query.length > 0);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options) {
                this.searchService.options = options;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "optionsFilter", {
        set: /**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            if (filter) {
                this.searchService.optionsFilter = filter;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "optionsLookup", {
        set: /**
         * @param {?} lookupFn
         * @return {?}
         */
        function (lookupFn) {
            this.searchService.optionsLookup = lookupFn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "optionsField", {
        set: /**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            this.searchService.optionsField = field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "searchDelay", {
        set: /**
         * @param {?} delay
         * @return {?}
         */
        function (delay) {
            this.searchService.searchDelay = delay;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "isSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.isSearching;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "results", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.results.slice(0, this.maxResults);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "placeholder", {
        // Gets & sets the placeholder text displayed inside the text input.
        get: 
        // Gets & sets the placeholder text displayed inside the text input.
        /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.localeValues.placeholder;
        },
        set: /**
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "localeValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localizationService.override(this._localeValues, this.localeOverrides);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSearch.prototype, "resultFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this._resultFormatter) {
                return this._resultFormatter;
            }
            else if (this.searchService.optionsLookup) {
                return (/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return _this.readValue(r); });
            }
            else {
                return (/**
                 * @param {?} r
                 * @param {?} q
                 * @return {?}
                 */
                function (r, q) { return _this.searchService.highlightMatches(_this.readValue(r), q); });
            }
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._resultFormatter = formatter;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiSearch.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._menu.service = this.dropdownService;
    };
    // Selects a result.
    // Selects a result.
    /**
     * @param {?} result
     * @return {?}
     */
    FuiSearch.prototype.select = 
    // Selects a result.
    /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.onResultSelected.emit(result);
        this.dropdownService.setOpenState(false);
        if (this.retainSelectedResult) {
            this.selectedResult = result;
            this.searchService.updateQuery(this.readValue(result));
        }
        else {
            this.searchService.updateQuery('');
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSearch.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.open();
    };
    /**
     * @return {?}
     */
    FuiSearch.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (!this.dropdownService.isAnimating) {
            this.open();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSearch.prototype.onFocusOut = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        console.log(e);
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.dropdownService.setOpenState(false);
        }
    };
    // Reads the specified field from an item.
    // Reads the specified field from an item.
    /**
     * @param {?} object
     * @return {?}
     */
    FuiSearch.prototype.readValue = 
    // Reads the specified field from an item.
    /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        return Util.Object.readValue(object, this.searchService.optionsField);
    };
    /**
     * @private
     * @return {?}
     */
    FuiSearch.prototype.onLocaleUpdate = /**
     * @private
     * @return {?}
     */
    function () {
        this._localeValues = this._localizationService.get().search;
    };
    /**
     * @private
     * @return {?}
     */
    FuiSearch.prototype.open = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.searchService.query.length > 0) {
            // Only open on click when there is a query entered.
            this.dropdownService.setOpenState(true);
        }
    };
    FuiSearch.decorators = [
        { type: Component, args: [{
                    selector: 'fui-search',
                    template: "\n<div class=\"ui input\" [class.icon]=\"hasIcon\" (click)=\"onClick($event)\">\n    <input class=\"prompt\" type=\"text\" [attr.placeholder]=\"placeholder\" autocomplete=\"off\" [(ngModel)]=\"query\">\n    <i *ngIf=\"hasIcon\" class=\"search icon\"></i>\n</div>\n<div class=\"results\"\n     fuiDropdownMenu\n     [menuTransition]=\"transition\"\n     [menuTransitionDuration]=\"transitionDuration\"\n     menuSelectedItemClass=\"active\">\n\n    <fui-search-result *ngFor=\"let r of results\"\n                       class=\"item\"\n                       [value]=\"r\"\n                       [query]=\"query\"\n                       [formatter]=\"resultFormatter\"\n                       [template]=\"resultTemplate\"\n                       (click)=\"select(r)\"></fui-search-result>\n\n    <div *ngIf=\"results.length == 0\" class=\"message empty\">\n        <div class=\"header\">{{ localeValues.noResults.header }}</div>\n        <div class=\"description\">{{ localeValues.noResults.message }}</div>\n    </div>\n</div>\n",
                    styles: ["\n/* Ensures results div has margin. */\n:host {\n    display: inline-block;\n    outline: 0;\n}\n\n/* Fixes positioning when results are pushed above the search. */\n.results {\n    margin-bottom: .5em;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    FuiSearch.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: FuiLocalizationService }
    ]; };
    FuiSearch.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.search',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        hasIcon: [{ type: Input }],
        resultTemplate: [{ type: Input }],
        retainSelectedResult: [{ type: Input }],
        maxResults: [{ type: Input }],
        onResultSelected: [{ type: Output, args: ['resultSelected',] }],
        transition: [{ type: Input }],
        transitionDuration: [{ type: Input }],
        _menu: [{ type: ViewChild, args: [FuiDropdownMenu, { static: false },] }],
        isActive: [{ type: HostBinding, args: ['class.active',] }],
        options: [{ type: Input }],
        optionsFilter: [{ type: Input }],
        optionsLookup: [{ type: Input }],
        optionsField: [{ type: Input }],
        searchDelay: [{ type: Input }],
        isSearching: [{ type: HostBinding, args: ['class.loading',] }],
        placeholder: [{ type: Input }],
        resultFormatter: [{ type: Input }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }]
    };
    return FuiSearch;
}());
export { FuiSearch };
if (false) {
    /** @type {?} */
    FuiSearch.prototype.dropdownService;
    /** @type {?} */
    FuiSearch.prototype.searchService;
    /** @type {?} */
    FuiSearch.prototype.hasClasses;
    /** @type {?} */
    FuiSearch.prototype.tabindex;
    /** @type {?} */
    FuiSearch.prototype.hasIcon;
    /** @type {?} */
    FuiSearch.prototype.localeOverrides;
    /** @type {?} */
    FuiSearch.prototype.resultTemplate;
    /** @type {?} */
    FuiSearch.prototype.retainSelectedResult;
    /** @type {?} */
    FuiSearch.prototype.maxResults;
    /** @type {?} */
    FuiSearch.prototype.selectedResult;
    /** @type {?} */
    FuiSearch.prototype.onResultSelected;
    /** @type {?} */
    FuiSearch.prototype.transition;
    /** @type {?} */
    FuiSearch.prototype.transitionDuration;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._menu;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._localeValues;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._resultFormatter;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._localizationService;
}
//# sourceMappingURL=data:application/json;base64,