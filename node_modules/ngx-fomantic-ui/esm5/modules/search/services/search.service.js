/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Util } from '../../../misc/util/internal';
/**
 * @record
 * @template T
 */
function ICachedArray() { }
/**
 * @template T, U
 */
var /**
 * @template T, U
 */
SearchService = /** @class */ (function () {
    function SearchService(allowEmptyQuery) {
        var _this = this;
        if (allowEmptyQuery === void 0) { allowEmptyQuery = false; }
        this._options = [];
        this.optionsFilter = (/**
         * @param {?} os
         * @param {?} q
         * @return {?}
         */
        function (os, q) {
            // Convert the query string to a RegExp.
            /** @type {?} */
            var regex = _this.toRegex(_this._query);
            if (regex instanceof RegExp) {
                // Only update the results if the query was valid regex.
                // This avoids the results suddenly becoming empty if an invalid regex string is inputted.
                return os
                    // Filter on the options with a string match on the field we are testing.
                    .filter((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return Util.Object.readValue(o, _this._optionsField)
                    .toString()
                    .match(regex); }));
            }
            // Don't update since it wasn't a valid regex.
            return false;
        });
        // Set default values and reset.
        this.allowEmptyQuery = allowEmptyQuery;
        this.searchDelay = 0;
        this.reset();
    }
    Object.defineProperty(SearchService.prototype, "hasItemLookup", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.optionsLookup && this.optionsLookup.length === 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options || [];
            // We cannot use both local & remote options simultaneously.
            this._optionsLookup = undefined;
            // Reset entire service with new options.
            this.reset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "optionsLookup", {
        get: /**
         * @return {?}
         */
        function () {
            return this._optionsLookup;
        },
        set: /**
         * @param {?} lookupFn
         * @return {?}
         */
        function (lookupFn) {
            this._optionsLookup = lookupFn;
            // As before, cannot use local & remote options simultaneously.
            this._options = [];
            this.reset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "optionsField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._optionsField;
        },
        set: /**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            this._optionsField = field;
            // We need to reset otherwise we would now be showing invalid search results.
            this.reset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "results", {
        get: /**
         * @return {?}
         */
        function () {
            return this._results;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "query", {
        get: /**
         * @return {?}
         */
        function () {
            return this._query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchService.prototype, "isSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isSearching;
        },
        enumerable: true,
        configurable: true
    });
    // Updates the query after the specified search delay.
    // Updates the query after the specified search delay.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    SearchService.prototype.updateQueryDelayed = 
    // Updates the query after the specified search delay.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    function (query, callback) {
        var _this = this;
        if (callback === void 0) { callback = (/**
         * @return {?}
         */
        function () {
        }); }
        this._query = query;
        clearTimeout(this._searchDelayTimeout);
        this._searchDelayTimeout = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.updateQuery(query, callback);
        }), this.searchDelay);
    };
    // Updates the current search query.
    // Updates the current search query.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    SearchService.prototype.updateQuery = 
    // Updates the current search query.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    function (query, callback) {
        var _this = this;
        if (callback === void 0) { callback = (/**
         * @return {?}
         */
        function () {
        }); }
        this._query = query;
        if (this._query === '' && !this.allowEmptyQuery) {
            // Don't update if the new query is empty (and we don't allow empty queries).
            // Don't reset so that when animating closed we don't get a judder.
            return callback();
        }
        if (this._resultsCache.hasOwnProperty(this._query)) {
            // If the query is already cached, make use of it.
            this._results = this._resultsCache[this._query];
            return callback();
        }
        if (this._optionsLookup) {
            this._isSearching = true;
            // Call the options lookup without a this context.
            /** @type {?} */
            var queryLookup = (/** @type {?} */ (this._optionsLookup.call(undefined, this._query)));
            queryLookup
                .then((/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                _this._isSearching = false;
                _this.updateResults(results);
                return callback();
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                // Unset 'loading' state, and throw the returned error without updating the results.
                _this._isSearching = false;
                return callback(error);
            }));
            return;
        }
        /** @type {?} */
        var filtered = this.optionsFilter.call(undefined, this._options, this._query);
        if (filtered) {
            this.updateResults(filtered);
        }
        return callback();
    };
    // tslint:disable-next-line:promise-function-async
    // tslint:disable-next-line:promise-function-async
    /**
     * @param {?} initial
     * @return {?}
     */
    SearchService.prototype.initialLookup = 
    // tslint:disable-next-line:promise-function-async
    /**
     * @param {?} initial
     * @return {?}
     */
    function (initial) {
        if (initial instanceof Array) {
            return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this._optionsLookup)))))(undefined, initial)));
        }
        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this._optionsLookup)))))(undefined, initial)));
    };
    // Generates HTML for highlighted match text.
    // Generates HTML for highlighted match text.
    /**
     * @param {?} text
     * @param {?} query
     * @return {?}
     */
    SearchService.prototype.highlightMatches = 
    // Generates HTML for highlighted match text.
    /**
     * @param {?} text
     * @param {?} query
     * @return {?}
     */
    function (text, query) {
        /** @type {?} */
        var regex = this.toRegex(query);
        if (regex instanceof RegExp) {
            return text.replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) { return "<b>" + match + "</b>"; }));
        }
        return text;
    };
    // Updates & caches the new set of results.
    // Updates & caches the new set of results.
    /**
     * @private
     * @param {?} results
     * @return {?}
     */
    SearchService.prototype.updateResults = 
    // Updates & caches the new set of results.
    /**
     * @private
     * @param {?} results
     * @return {?}
     */
    function (results) {
        this._resultsCache[this._query] = results;
        this._results = results;
    };
    // Converts a query string to regex without throwing an error.
    // Converts a query string to regex without throwing an error.
    /**
     * @private
     * @param {?} query
     * @return {?}
     */
    SearchService.prototype.toRegex = 
    // Converts a query string to regex without throwing an error.
    /**
     * @private
     * @param {?} query
     * @return {?}
     */
    function (query) {
        try {
            return new RegExp(query, 'i');
        }
        catch (e) {
            return query;
        }
    };
    // Resets the search back to a pristine state.
    // Resets the search back to a pristine state.
    /**
     * @private
     * @return {?}
     */
    SearchService.prototype.reset = 
    // Resets the search back to a pristine state.
    /**
     * @private
     * @return {?}
     */
    function () {
        this._results = [];
        this._resultsCache = {};
        this._isSearching = false;
        this.updateQuery('');
    };
    return SearchService;
}());
/**
 * @template T, U
 */
export { SearchService };
if (false) {
    /** @type {?} */
    SearchService.prototype.optionsFilter;
    /** @type {?} */
    SearchService.prototype.allowEmptyQuery;
    /** @type {?} */
    SearchService.prototype.searchDelay;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._resultsCache;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._searchDelayTimeout;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._options;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._optionsLookup;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._optionsField;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._results;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._query;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._isSearching;
}
//# sourceMappingURL=data:application/json;base64,