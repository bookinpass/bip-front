/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TransitionDirection } from './transition';
var TransitionController = /** @class */ (function () {
    function TransitionController(isInitiallyVisible, display) {
        if (isInitiallyVisible === void 0) { isInitiallyVisible = true; }
        if (display === void 0) { display = 'block'; }
        // isInitiallyVisible sets whether the element starts out visible.
        this._isVisible = isInitiallyVisible;
        this._isHidden = !this._isVisible;
        this._display = display;
        this._queue = [];
        this._isAnimating = false;
    }
    Object.defineProperty(TransitionController.prototype, "isAnimating", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isAnimating;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransitionController.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransitionController.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransitionController.prototype, "_isReady", {
        // Used to delay animations until we have an element to animate.
        get: 
        // Used to delay animations until we have an element to animate.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this._renderer != undefined && this._element != undefined && this._changeDetector != undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransitionController.prototype, "_queueFirst", {
        // Gets the first transition in the queue.
        get: 
        // Gets the first transition in the queue.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this._queue[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransitionController.prototype, "_queueLast", {
        // Gets the last transition in the queue.
        get: 
        // Gets the last transition in the queue.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this._queue[this._queue.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    // Sets the renderer to be used for animating.
    // Sets the renderer to be used for animating.
    /**
     * @param {?} renderer
     * @return {?}
     */
    TransitionController.prototype.registerRenderer = 
    // Sets the renderer to be used for animating.
    /**
     * @param {?} renderer
     * @return {?}
     */
    function (renderer) {
        this._renderer = renderer;
        this.performTransition();
    };
    // Sets the element to perform the animations on.
    // Sets the element to perform the animations on.
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionController.prototype.registerElement = 
    // Sets the element to perform the animations on.
    /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this._element = element;
        this.performTransition();
    };
    // Sets the change detector to detect changes when using ChangeDetectionStrategy.OnPush.
    // Sets the change detector to detect changes when using ChangeDetectionStrategy.OnPush.
    /**
     * @param {?} changeDetector
     * @return {?}
     */
    TransitionController.prototype.registerChangeDetector = 
    // Sets the change detector to detect changes when using ChangeDetectionStrategy.OnPush.
    /**
     * @param {?} changeDetector
     * @return {?}
     */
    function (changeDetector) {
        this._changeDetector = changeDetector;
        this.performTransition();
    };
    /**
     * @param {?} transition
     * @return {?}
     */
    TransitionController.prototype.animate = /**
     * @param {?} transition
     * @return {?}
     */
    function (transition) {
        // Test if transition is one of the list that doesn't change the visible state.
        // Should these eventually become classes?
        /** @type {?} */
        var isDirectionless = ['jiggle', 'flash', 'shake', 'pulse', 'tada', 'bounce'].indexOf(transition.type) !== -1;
        if (isDirectionless) {
            transition.direction = TransitionDirection.Static;
        }
        else if (transition.direction == undefined || transition.direction === TransitionDirection.Either) {
            // Set the direction to the opposite of the current visible state automatically if not set, or set to either direction.
            transition.direction = this._isVisible ? TransitionDirection.Out : TransitionDirection.In;
            if (this._queueLast) {
                // If there is an transition in the queue already, set the direction to the opposite of the direction of that transition.
                if (this._queueLast.direction === TransitionDirection.In) {
                    transition.direction = TransitionDirection.Out;
                }
                else if (this._queueLast.direction === TransitionDirection.Out) {
                    transition.direction = TransitionDirection.In;
                }
            }
        }
        // Store the transition in the queue before attempting to perform it.
        this._queue.push(transition);
        this.performTransition();
    };
    // Stops the current transition, leaves the rest of the queue intact.
    // Stops the current transition, leaves the rest of the queue intact.
    /**
     * @param {?=} transition
     * @return {?}
     */
    TransitionController.prototype.stop = 
    // Stops the current transition, leaves the rest of the queue intact.
    /**
     * @param {?=} transition
     * @return {?}
     */
    function (transition) {
        if (transition === void 0) { transition = this._queueFirst; }
        if (!transition || !this._isAnimating) {
            return;
        }
        this.finalizeTransition(transition);
    };
    // Cancels the current transition, leaves the rest of the queue intact.
    // Cancels the current transition, leaves the rest of the queue intact.
    /**
     * @param {?=} transition
     * @return {?}
     */
    TransitionController.prototype.cancel = 
    // Cancels the current transition, leaves the rest of the queue intact.
    /**
     * @param {?=} transition
     * @return {?}
     */
    function (transition) {
        if (transition === void 0) { transition = this._queueFirst; }
        if (!transition || !this._isAnimating) {
            return;
        }
        this.completeTransition(transition);
        if (transition.direction === TransitionDirection.In) {
            // Return hidden class if we were originally transitioning in.
            this._isHidden = true;
        }
    };
    // Stops the current transition, and empties the queue.
    // Stops the current transition, and empties the queue.
    /**
     * @return {?}
     */
    TransitionController.prototype.stopAll = 
    // Stops the current transition, and empties the queue.
    /**
     * @return {?}
     */
    function () {
        this.clearQueue();
        this.stop();
    };
    /**
     * @return {?}
     */
    TransitionController.prototype.cancelAll = /**
     * @return {?}
     */
    function () {
        this.clearQueue();
        this.cancel();
    };
    // Empties the transition queue but carries on with the current transition.
    // Empties the transition queue but carries on with the current transition.
    /**
     * @return {?}
     */
    TransitionController.prototype.clearQueue = 
    // Empties the transition queue but carries on with the current transition.
    /**
     * @return {?}
     */
    function () {
        if (this.isAnimating) {
            this._queue = [this._queueFirst];
            return;
        }
        this._queue = [];
    };
    /**
     * @private
     * @return {?}
     */
    TransitionController.prototype.performTransition = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._isReady || this._isAnimating || !this._queueFirst) {
            // Don't transition until we are ready, or if we are animating, or if there aren't any transitions in the queue.
            return;
        }
        this._isAnimating = true;
        /** @type {?} */
        var transition = this._queueFirst;
        // Set the Fomantic UI classes for transitioning.
        transition.classes.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return _this._renderer.addClass(_this._element, c); }));
        this._renderer.addClass(this._element, "animating");
        this._renderer.addClass(this._element, transition.directionClass);
        // Set the Fomantic UI styles for transitioning.
        this._renderer.setStyle(this._element, "animationDuration", transition.duration + "ms");
        this._renderer.setStyle(this._element, "display", this._display);
        if (transition.direction === TransitionDirection.In) {
            // Unset hidden if we are transitioning in.
            this._isHidden = false;
        }
        // Wait the length of the animation before calling the complete callback.
        this._animationTimeout = window.setTimeout((/**
         * @return {?}
         */
        function () { return _this.finalizeTransition(transition); }), transition.duration);
    };
    /**
     * @private
     * @param {?} transition
     * @return {?}
     */
    TransitionController.prototype.completeTransition = /**
     * @private
     * @param {?} transition
     * @return {?}
     */
    function (transition) {
        var _this = this;
        transition.classes.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return _this._renderer.removeClass(_this._element, c); }));
        this._renderer.removeClass(this._element, "animating");
        this._renderer.removeClass(this._element, transition.directionClass);
        this._renderer.removeStyle(this._element, "animationDuration");
        this._renderer.removeStyle(this._element, "display");
        // Delete the transition from the queue.
        this._queue.shift();
        this._isAnimating = false;
        this._changeDetector.markForCheck();
        clearTimeout(this._animationTimeout);
    };
    // Called when a transition has completed.
    // Called when a transition has completed.
    /**
     * @private
     * @param {?} transition
     * @return {?}
     */
    TransitionController.prototype.finalizeTransition = 
    // Called when a transition has completed.
    /**
     * @private
     * @param {?} transition
     * @return {?}
     */
    function (transition) {
        this.completeTransition(transition);
        if (transition.direction === TransitionDirection.In) {
            // If we have just animated in, we are now visible.
            this._isVisible = true;
        }
        else if (transition.direction === TransitionDirection.Out) {
            // If we have transitioned out, we should be invisible and hidden.
            this._isVisible = false;
            this._isHidden = true;
        }
        if (transition.onComplete) {
            // Call the user-defined transition callback.
            transition.onComplete();
        }
        // Immediately attempt to perform another transition.
        this.performTransition();
    };
    return TransitionController;
}());
export { TransitionController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._element;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._changeDetector;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._display;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._queue;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._animationTimeout;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._isAnimating;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._isVisible;
    /**
     * @type {?}
     * @private
     */
    TransitionController.prototype._isHidden;
}
//# sourceMappingURL=data:application/json;base64,