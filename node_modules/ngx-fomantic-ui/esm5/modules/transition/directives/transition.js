/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { TransitionController } from '../classes/transition-controller';
var FuiTransition = /** @class */ (function () {
    function FuiTransition(_renderer, _element, _changeDetector) {
        this._renderer = _renderer;
        this._element = _element;
        this._changeDetector = _changeDetector;
        this.transitionClass = true;
    }
    Object.defineProperty(FuiTransition.prototype, "fuiTransition", {
        set: /**
         * @param {?} tC
         * @return {?}
         */
        function (tC) {
            // Set the transition controller (e.g. '<div [fuiTransition]="transitionController"></div>').
            this.setTransitionController(tC);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiTransition.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._controller) {
                return this._controller.isVisible;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiTransition.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._controller) {
                return this._controller.isHidden;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    // Initialises the controller with the injected renderer and elementRef.
    // Initialises the controller with the injected renderer and elementRef.
    /**
     * @param {?} transitionController
     * @return {?}
     */
    FuiTransition.prototype.setTransitionController = 
    // Initialises the controller with the injected renderer and elementRef.
    /**
     * @param {?} transitionController
     * @return {?}
     */
    function (transitionController) {
        this._controller = transitionController;
        this._controller.registerRenderer(this._renderer);
        this._controller.registerElement(this._element.nativeElement);
        this._controller.registerChangeDetector(this._changeDetector);
    };
    FuiTransition.decorators = [
        { type: Directive, args: [{
                    selector: '[fuiTransition]',
                    exportAs: 'transition'
                },] }
    ];
    /** @nocollapse */
    FuiTransition.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    FuiTransition.propDecorators = {
        transitionClass: [{ type: HostBinding, args: ['class.transition',] }],
        fuiTransition: [{ type: Input }],
        isVisible: [{ type: HostBinding, args: ['class.visible',] }],
        isHidden: [{ type: HostBinding, args: ['class.hidden',] }]
    };
    return FuiTransition;
}());
export { FuiTransition };
if (false) {
    /** @type {?} */
    FuiTransition.prototype.transitionClass;
    /**
     * @type {?}
     * @private
     */
    FuiTransition.prototype._controller;
    /**
     * @type {?}
     * @protected
     */
    FuiTransition.prototype._renderer;
    /**
     * @type {?}
     * @protected
     */
    FuiTransition.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiTransition.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvdHJhbnNpdGlvbi9kaXJlY3RpdmVzL3RyYW5zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBRXRFO0lBVUUsdUJBQXNCLFNBQW9CLEVBQVksUUFBb0IsRUFBVSxlQUFrQztRQUFoRyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQVksYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQUovRyxvQkFBZSxHQUFHLElBQUksQ0FBQztJQUs5QixDQUFDO0lBRUQsc0JBQ1csd0NBQWE7Ozs7O1FBRHhCLFVBQ3lCLEVBQXdCO1lBQy9DLDZGQUE2RjtZQUM3RixJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFFRCxzQkFDVyxvQ0FBUzs7OztRQURwQjtZQUVFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQzthQUNuQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQzs7O09BQUE7SUFFRCxzQkFDVyxtQ0FBUTs7OztRQURuQjtZQUVFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUNsQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQzs7O09BQUE7SUFFRCx3RUFBd0U7Ozs7OztJQUNqRSwrQ0FBdUI7Ozs7OztJQUE5QixVQUErQixvQkFBMEM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztRQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCOzs7O2dCQU5xRSxTQUFTO2dCQUF6QyxVQUFVO2dCQUF4QyxpQkFBaUI7OztrQ0FRdEIsV0FBVyxTQUFDLGtCQUFrQjtnQ0FROUIsS0FBSzs0QkFNTCxXQUFXLFNBQUMsZUFBZTsyQkFRM0IsV0FBVyxTQUFDLGNBQWM7O0lBZTdCLG9CQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F0Q1ksYUFBYTs7O0lBQ3hCLHdDQUM4Qjs7Ozs7SUFFOUIsb0NBQTBDOzs7OztJQUU5QixrQ0FBOEI7Ozs7O0lBQUUsaUNBQThCOzs7OztJQUFFLHdDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1RyYW5zaXRpb25Db250cm9sbGVyfSBmcm9tICcuLi9jbGFzc2VzL3RyYW5zaXRpb24tY29udHJvbGxlcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmdWlUcmFuc2l0aW9uXScsXHJcbiAgZXhwb3J0QXM6ICd0cmFuc2l0aW9uJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpVHJhbnNpdGlvbiB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy50cmFuc2l0aW9uJylcclxuICBwdWJsaWMgdHJhbnNpdGlvbkNsYXNzID0gdHJ1ZTtcclxuICAvLyBFYWNoIHRyYW5zaXRpb24gbXVzdCBoYXZlIGEgY29udHJvbGxlciBhc3NvY2lhdGVkIHRoYXQgZGlzcGF0Y2hlcyB0aGUgdHJhbnNpdGlvbnMuXHJcbiAgcHJpdmF0ZSBfY29udHJvbGxlcjogVHJhbnNpdGlvbkNvbnRyb2xsZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJvdGVjdGVkIF9lbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIF9jaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCBmdWlUcmFuc2l0aW9uKHRDOiBUcmFuc2l0aW9uQ29udHJvbGxlcikge1xyXG4gICAgLy8gU2V0IHRoZSB0cmFuc2l0aW9uIGNvbnRyb2xsZXIgKGUuZy4gJzxkaXYgW2Z1aVRyYW5zaXRpb25dPVwidHJhbnNpdGlvbkNvbnRyb2xsZXJcIj48L2Rpdj4nKS5cclxuICAgIHRoaXMuc2V0VHJhbnNpdGlvbkNvbnRyb2xsZXIodEMpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy52aXNpYmxlJylcclxuICBwdWJsaWMgZ2V0IGlzVmlzaWJsZSgpOiBib29sZWFuIHtcclxuICAgIGlmICh0aGlzLl9jb250cm9sbGVyKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jb250cm9sbGVyLmlzVmlzaWJsZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuaGlkZGVuJylcclxuICBwdWJsaWMgZ2V0IGlzSGlkZGVuKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuX2NvbnRyb2xsZXIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xsZXIuaXNIaWRkZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyBJbml0aWFsaXNlcyB0aGUgY29udHJvbGxlciB3aXRoIHRoZSBpbmplY3RlZCByZW5kZXJlciBhbmQgZWxlbWVudFJlZi5cclxuICBwdWJsaWMgc2V0VHJhbnNpdGlvbkNvbnRyb2xsZXIodHJhbnNpdGlvbkNvbnRyb2xsZXI6IFRyYW5zaXRpb25Db250cm9sbGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb250cm9sbGVyID0gdHJhbnNpdGlvbkNvbnRyb2xsZXI7XHJcbiAgICB0aGlzLl9jb250cm9sbGVyLnJlZ2lzdGVyUmVuZGVyZXIodGhpcy5fcmVuZGVyZXIpO1xyXG4gICAgdGhpcy5fY29udHJvbGxlci5yZWdpc3RlckVsZW1lbnQodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcclxuICAgIHRoaXMuX2NvbnRyb2xsZXIucmVnaXN0ZXJDaGFuZ2VEZXRlY3Rvcih0aGlzLl9jaGFuZ2VEZXRlY3Rvcik7XHJcbiAgfVxyXG59XHJcbiJdfQ==