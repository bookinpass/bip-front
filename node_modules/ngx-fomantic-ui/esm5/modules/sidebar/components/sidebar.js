/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2 } from '@angular/core';
import { SidebarDirection, SidebarService, SidebarTransition } from '../services/sidebar.service';
var FuiSidebar = /** @class */ (function () {
    function FuiSidebar(_renderer, _element) {
        var _this = this;
        this._renderer = _renderer;
        this._element = _element;
        this.service = new SidebarService();
        // We set the default here as well to force the classes to update.
        this.transition = SidebarTransition.Uncover;
        this.direction = SidebarDirection.Left;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.updateDimensions(); }));
        this.service.isVisibleChange.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateDimensions(); }));
        this.hasClasses = true;
    }
    Object.defineProperty(FuiSidebar.prototype, "transition", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.transition;
        },
        set: /**
         * @param {?} transition
         * @return {?}
         */
        function (transition) {
            var _this = this;
            this.service.transition.split(' ').forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return _this.setClass(c, false); }));
            this.service.transition = transition;
            this.service.transition.split(' ').forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return _this.setClass(c, true); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebar.prototype, "direction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.direction;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            this.setClass(this.service.direction, false);
            this.service.direction = direction;
            this.setClass(this.service.direction, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebar.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isVisible;
        },
        set: /**
         * @param {?} isVisible
         * @return {?}
         */
        function (isVisible) {
            this.service.setVisibleState(isVisible);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebar.prototype, "isVisibleChange", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isVisibleChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebar.prototype, "isAnimating", {
        get: /**
         * @return {?}
         */
        function () {
            return this.service.isAnimating;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiSidebar.prototype.open = /**
     * @return {?}
     */
    function () {
        this.service.setVisibleState(true);
    };
    /**
     * @return {?}
     */
    FuiSidebar.prototype.close = /**
     * @return {?}
     */
    function () {
        this.service.setVisibleState(false);
    };
    /**
     * @return {?}
     */
    FuiSidebar.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.service.toggleVisibleState();
    };
    /**
     * @private
     * @return {?}
     */
    FuiSidebar.prototype.updateDimensions = /**
     * @private
     * @return {?}
     */
    function () {
        this.service.width = this._element.nativeElement.offsetWidth;
        this.service.height = this._element.nativeElement.offsetHeight;
    };
    /**
     * @private
     * @param {?} className
     * @param {?=} isAdd
     * @return {?}
     */
    FuiSidebar.prototype.setClass = /**
     * @private
     * @param {?} className
     * @param {?=} isAdd
     * @return {?}
     */
    function (className, isAdd) {
        if (isAdd === void 0) { isAdd = true; }
        if (isAdd) {
            this._renderer.addClass(this._element.nativeElement, className);
        }
        else {
            this._renderer.removeClass(this._element.nativeElement, className);
        }
    };
    FuiSidebar.decorators = [
        { type: Component, args: [{
                    selector: 'fui-sidebar',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    FuiSidebar.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FuiSidebar.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.sidebar',] }, { type: HostBinding, args: ['class.menu',] }],
        transition: [{ type: Input }],
        direction: [{ type: Input }],
        isVisible: [{ type: HostBinding, args: ['class.visible',] }, { type: Input }],
        isVisibleChange: [{ type: Output }],
        isAnimating: [{ type: HostBinding, args: ['class.animating',] }]
    };
    return FuiSidebar;
}());
export { FuiSidebar };
if (false) {
    /** @type {?} */
    FuiSidebar.prototype.service;
    /** @type {?} */
    FuiSidebar.prototype.hasClasses;
    /**
     * @type {?}
     * @private
     */
    FuiSidebar.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiSidebar.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2lkZWJhci9jb21wb25lbnRzL3NpZGViYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRWhHO0lBWUUsb0JBQW9CLFNBQW9CLEVBQVUsUUFBb0I7UUFBdEUsaUJBVUM7UUFWbUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ3BDLGtFQUFrRTtRQUNsRSxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztRQUV2QyxVQUFVOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixFQUFFLEVBQXZCLENBQXVCLEVBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixFQUFFLEVBQXZCLENBQXVCLEVBQUMsQ0FBQztRQUV0RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsc0JBQ1csa0NBQVU7Ozs7UUFEckI7WUFFRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ2pDLENBQUM7Ozs7O1FBRUQsVUFBc0IsVUFBNkI7WUFBbkQsaUJBTUM7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LFNBQVM7Z0JBQS9ELFVBQVU7Ozs2QkFVMUIsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGVBQWUsY0FDM0IsV0FBVyxTQUFDLFlBQVk7NkJBZXhCLEtBQUs7NEJBYUwsS0FBSzs0QkFhTCxXQUFXLFNBQUMsZUFBZSxjQUMzQixLQUFLO2tDQVNMLE1BQU07OEJBS04sV0FBVyxTQUFDLGlCQUFpQjs7SUE2QmhDLGlCQUFDO0NBQUEsQUE5RkQsSUE4RkM7U0ExRlksVUFBVTs7O0lBQ3JCLDZCQUErQjs7SUFFL0IsZ0NBR29DOzs7OztJQUV4QiwrQkFBNEI7Ozs7O0lBQUUsOEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIElucHV0LCBPdXRwdXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7U2lkZWJhckRpcmVjdGlvbiwgU2lkZWJhclNlcnZpY2UsIFNpZGViYXJUcmFuc2l0aW9ufSBmcm9tICcuLi9zZXJ2aWNlcy9zaWRlYmFyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktc2lkZWJhcicsXHJcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpU2lkZWJhciB7XHJcbiAgcHVibGljIHNlcnZpY2U6IFNpZGViYXJTZXJ2aWNlO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnVpJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNpZGViYXInKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MubWVudScpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMuc2VydmljZSA9IG5ldyBTaWRlYmFyU2VydmljZSgpO1xyXG4gICAgLy8gV2Ugc2V0IHRoZSBkZWZhdWx0IGhlcmUgYXMgd2VsbCB0byBmb3JjZSB0aGUgY2xhc3NlcyB0byB1cGRhdGUuXHJcbiAgICB0aGlzLnRyYW5zaXRpb24gPSBTaWRlYmFyVHJhbnNpdGlvbi5VbmNvdmVyO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBTaWRlYmFyRGlyZWN0aW9uLkxlZnQ7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZURpbWVuc2lvbnMoKSk7XHJcbiAgICB0aGlzLnNlcnZpY2UuaXNWaXNpYmxlQ2hhbmdlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnVwZGF0ZURpbWVuc2lvbnMoKSk7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCB0cmFuc2l0aW9uKCk6IFNpZGViYXJUcmFuc2l0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLnNlcnZpY2UudHJhbnNpdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdHJhbnNpdGlvbih0cmFuc2l0aW9uOiBTaWRlYmFyVHJhbnNpdGlvbikge1xyXG4gICAgdGhpcy5zZXJ2aWNlLnRyYW5zaXRpb24uc3BsaXQoJyAnKS5mb3JFYWNoKGMgPT4gdGhpcy5zZXRDbGFzcyhjLCBmYWxzZSkpO1xyXG5cclxuICAgIHRoaXMuc2VydmljZS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcclxuXHJcbiAgICB0aGlzLnNlcnZpY2UudHJhbnNpdGlvbi5zcGxpdCgnICcpLmZvckVhY2goYyA9PiB0aGlzLnNldENsYXNzKGMsIHRydWUpKTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBkaXJlY3Rpb24oKTogU2lkZWJhckRpcmVjdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmRpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgZGlyZWN0aW9uKGRpcmVjdGlvbjogU2lkZWJhckRpcmVjdGlvbikge1xyXG4gICAgdGhpcy5zZXRDbGFzcyh0aGlzLnNlcnZpY2UuZGlyZWN0aW9uLCBmYWxzZSk7XHJcblxyXG4gICAgdGhpcy5zZXJ2aWNlLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuXHJcbiAgICB0aGlzLnNldENsYXNzKHRoaXMuc2VydmljZS5kaXJlY3Rpb24sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy52aXNpYmxlJylcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5pc1Zpc2libGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGlzVmlzaWJsZShpc1Zpc2libGU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuc2VydmljZS5zZXRWaXNpYmxlU3RhdGUoaXNWaXNpYmxlKTtcclxuICB9XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBnZXQgaXNWaXNpYmxlQ2hhbmdlKCk6IEV2ZW50RW1pdHRlcjxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmlzVmlzaWJsZUNoYW5nZTtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW5pbWF0aW5nJylcclxuICBwdWJsaWMgZ2V0IGlzQW5pbWF0aW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5pc0FuaW1hdGluZztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvcGVuKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zZXJ2aWNlLnNldFZpc2libGVTdGF0ZSh0cnVlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VydmljZS5zZXRWaXNpYmxlU3RhdGUoZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VydmljZS50b2dnbGVWaXNpYmxlU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlRGltZW5zaW9ucygpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VydmljZS53aWR0aCA9IHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgIHRoaXMuc2VydmljZS5oZWlnaHQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRDbGFzcyhjbGFzc05hbWU6IHN0cmluZywgaXNBZGQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XHJcbiAgICBpZiAoaXNBZGQpIHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=