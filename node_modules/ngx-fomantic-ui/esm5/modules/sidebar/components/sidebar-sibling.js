/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostBinding, HostListener, Input, Renderer2 } from '@angular/core';
import { SidebarTransition } from '../services/sidebar.service';
var FuiSidebarSibling = /** @class */ (function () {
    function FuiSidebarSibling(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this.canCloseSidebar = true;
        this.isDimmedWhenVisible = false;
        this.hasClasses = true;
    }
    Object.defineProperty(FuiSidebarSibling.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.service) {
                return false;
            }
            return this.service.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebarSibling.prototype, "isDimmed", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.service) {
                return false;
            }
            return this.service.isVisible && this.isDimmedWhenVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSidebarSibling.prototype, "service", {
        get: /**
         * @return {?}
         */
        function () {
            return this._service;
        },
        set: /**
         * @param {?} service
         * @return {?}
         */
        function (service) {
            var _this = this;
            this._service = service;
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.updateTransform(); }));
            this._service.isVisibleChange.subscribe((/**
             * @return {?}
             */
            function () { return _this.updateTransform(); }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    FuiSidebarSibling.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.canCloseSidebar && this.service.isVisible && !this.service.wasJustOpened) {
            this.service.setVisibleState(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FuiSidebarSibling.prototype.updateTransform = /**
     * @private
     * @return {?}
     */
    function () {
        this._renderer.removeStyle(this._element.nativeElement, 'transform');
        this._renderer.removeStyle(this._element.nativeElement, '-webkit-transform');
        if (this.service.isVisible &&
            this.service.transition !== SidebarTransition.Overlay &&
            this.service.transition !== SidebarTransition.ScaleDown) {
            /** @type {?} */
            var translate = "translate3d(" + this.service.width + "px, " + this.service.height + "px, 0)";
            this._renderer.setStyle(this._element.nativeElement, 'transform', translate);
            this._renderer.setStyle(this._element.nativeElement, '-webkit-transform', translate);
        }
    };
    FuiSidebarSibling.decorators = [
        { type: Component, args: [{
                    selector: 'fui-sidebar-sibling',
                    template: "\n                   <ng-content></ng-content>",
                    styles: ["\n                   :host {\n                       display: block;\n                   }\n               "]
                }] }
    ];
    /** @nocollapse */
    FuiSidebarSibling.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FuiSidebarSibling.propDecorators = {
        isDimmedWhenVisible: [{ type: Input }],
        hasClasses: [{ type: HostBinding, args: ['class.pusher',] }],
        canCloseSidebar: [{ type: Input }],
        isVisible: [{ type: HostBinding, args: ['class.visible',] }],
        isDimmed: [{ type: HostBinding, args: ['class.dimmed',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FuiSidebarSibling;
}());
export { FuiSidebarSibling };
if (false) {
    /** @type {?} */
    FuiSidebarSibling.prototype.isDimmedWhenVisible;
    /** @type {?} */
    FuiSidebarSibling.prototype.hasClasses;
    /** @type {?} */
    FuiSidebarSibling.prototype.canCloseSidebar;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._service;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1zaWJsaW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zaWRlYmFyL2NvbXBvbmVudHMvc2lkZWJhci1zaWJsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFpQixpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRTlFO0lBbUJFLDJCQUFvQixTQUFvQixFQUFVLFFBQW9CO1FBQWxELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBRi9ELG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBRzVCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFFakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELHNCQUNXLHdDQUFTOzs7O1FBRHBCO1lBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQ1csdUNBQVE7Ozs7UUFEbkI7WUFFRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDakIsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQzVELENBQUM7OztPQUFBO0lBSUQsc0JBQVcsc0NBQU87Ozs7UUFBbEI7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQzs7Ozs7UUFFRCxVQUFtQixPQUF1QjtZQUExQyxpQkFLQztZQUpDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBRXhCLFVBQVU7OztZQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZUFBZSxFQUFFLEVBQXRCLENBQXNCLEVBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTOzs7WUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsRUFBRSxFQUF0QixDQUFzQixFQUFDLENBQUM7UUFDeEUsQ0FBQzs7O09BUEE7Ozs7O0lBVU0sbUNBQU87Ozs7SUFEZCxVQUNlLEtBQWlCO1FBQzlCLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ2pGLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQzs7Ozs7SUFFTywyQ0FBZTs7OztJQUF2QjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFFN0UsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssaUJBQWlCLENBQUMsT0FBTztZQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7O2dCQUVuRCxTQUFTLEdBQUcsaUJBQWUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFlBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLFdBQVE7WUFDckYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLG1CQUFtQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RGO0lBQ0gsQ0FBQzs7Z0JBekVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsZ0RBQ2lDOzZCQUNsQyw2R0FJSztpQkFDZjs7OztnQkFaZ0UsU0FBUztnQkFBdkQsVUFBVTs7O3NDQWUxQixLQUFLOzZCQUVMLFdBQVcsU0FBQyxjQUFjO2tDQUUxQixLQUFLOzRCQVNMLFdBQVcsU0FBQyxlQUFlOzJCQVEzQixXQUFXLFNBQUMsY0FBYzswQkFxQjFCLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBb0JuQyx3QkFBQztDQUFBLEFBMUVELElBMEVDO1NBaEVZLGlCQUFpQjs7O0lBRTVCLGdEQUNvQzs7SUFDcEMsdUNBQ29DOztJQUNwQyw0Q0FDOEI7Ozs7O0lBd0I5QixxQ0FBaUM7Ozs7O0lBdEJyQixzQ0FBNEI7Ozs7O0lBQUUscUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1NpZGViYXJTZXJ2aWNlLCBTaWRlYmFyVHJhbnNpdGlvbn0gZnJvbSAnLi4vc2VydmljZXMvc2lkZWJhci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLXNpZGViYXItc2libGluZycsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgICAgICAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxyXG4gIHN0eWxlczogW2BcclxuICAgICAgICAgICAgICAgICAgIDpob3N0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVNpZGViYXJTaWJsaW5nIHtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNEaW1tZWRXaGVuVmlzaWJsZTogYm9vbGVhbjtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnB1c2hlcicpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgY2FuQ2xvc2VTaWRlYmFyID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5pc0RpbW1lZFdoZW5WaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MudmlzaWJsZScpXHJcbiAgcHVibGljIGdldCBpc1Zpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuc2VydmljZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmlzVmlzaWJsZTtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZGltbWVkJylcclxuICBwdWJsaWMgZ2V0IGlzRGltbWVkKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLnNlcnZpY2UpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5pc1Zpc2libGUgJiYgdGhpcy5pc0RpbW1lZFdoZW5WaXNpYmxlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfc2VydmljZTogU2lkZWJhclNlcnZpY2U7XHJcblxyXG4gIHB1YmxpYyBnZXQgc2VydmljZSgpOiBTaWRlYmFyU2VydmljZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VydmljZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgc2VydmljZShzZXJ2aWNlOiBTaWRlYmFyU2VydmljZSkge1xyXG4gICAgdGhpcy5fc2VydmljZSA9IHNlcnZpY2U7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpKTtcclxuICAgIHRoaXMuX3NlcnZpY2UuaXNWaXNpYmxlQ2hhbmdlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY2FuQ2xvc2VTaWRlYmFyICYmIHRoaXMuc2VydmljZS5pc1Zpc2libGUgJiYgIXRoaXMuc2VydmljZS53YXNKdXN0T3BlbmVkKSB7XHJcbiAgICAgIHRoaXMuc2VydmljZS5zZXRWaXNpYmxlU3RhdGUoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVUcmFuc2Zvcm0oKTogdm9pZCB7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICd0cmFuc2Zvcm0nKTtcclxuICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJy13ZWJraXQtdHJhbnNmb3JtJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2VydmljZS5pc1Zpc2libGUgJiZcclxuICAgICAgdGhpcy5zZXJ2aWNlLnRyYW5zaXRpb24gIT09IFNpZGViYXJUcmFuc2l0aW9uLk92ZXJsYXkgJiZcclxuICAgICAgdGhpcy5zZXJ2aWNlLnRyYW5zaXRpb24gIT09IFNpZGViYXJUcmFuc2l0aW9uLlNjYWxlRG93bikge1xyXG5cclxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5zZXJ2aWNlLndpZHRofXB4LCAke3RoaXMuc2VydmljZS5oZWlnaHR9cHgsIDApYDtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnLXdlYmtpdC10cmFuc2Zvcm0nLCB0cmFuc2xhdGUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=