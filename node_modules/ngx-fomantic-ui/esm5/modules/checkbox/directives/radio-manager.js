/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, ElementRef, QueryList } from '@angular/core';
import { FuiRadio } from '../components/radio';
import { Util } from '../../../misc/util/internal';
/**
 * @template T
 */
var FuiRadioManager = /** @class */ (function () {
    function FuiRadioManager(element) {
        this.element = element;
        this.isNested = false;
        this._radioSubs = [];
    }
    /**
     * @return {?}
     */
    FuiRadioManager.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateNesting();
        this._subManagers.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateNesting(); }));
        this.updateRadios();
        this._renderedRadios.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateRadios(); }));
    };
    /**
     * @private
     * @return {?}
     */
    FuiRadioManager.prototype.updateNesting = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._subManagers
            .filter((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m !== _this; }))
            .forEach((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.isNested = true; }));
    };
    /**
     * @private
     * @return {?}
     */
    FuiRadioManager.prototype.updateRadios = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._radioSubs.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
        this._radioSubs = [];
        /** @type {?} */
        var groups = Util.Array.groupBy(this._renderedRadios.toArray(), 'name');
        Object
            .keys(groups)
            .map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return groups[k]; }))
            .forEach((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return g
            .forEach((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this._radioSubs
            .push(r.onCurrentValueChange
            .subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (!_this.isNested) {
                g.forEach((/**
                 * @param {?} radio
                 * @return {?}
                 */
                function (radio) { return radio.writeValue(v); }));
            }
        }))); })); }));
    };
    FuiRadioManager.decorators = [
        { type: Directive, args: [{
                    selector: 'form:not([ngForm]):not([[ngForm]]),ngForm,[ngForm]'
                },] }
    ];
    /** @nocollapse */
    FuiRadioManager.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FuiRadioManager.propDecorators = {
        _subManagers: [{ type: ContentChildren, args: [FuiRadioManager, { descendants: true },] }],
        _renderedRadios: [{ type: ContentChildren, args: [FuiRadio, { descendants: true },] }]
    };
    return FuiRadioManager;
}());
export { FuiRadioManager };
if (false) {
    /** @type {?} */
    FuiRadioManager.prototype.isNested;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._subManagers;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._renderedRadios;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._radioSubs;
    /** @type {?} */
    FuiRadioManager.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvY2hlY2tib3gvZGlyZWN0aXZlcy9yYWRpby1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW1CLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFN0MsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7O0FBRWpEO0lBZUUseUJBQW1CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVNLDRDQUFrQjs7O0lBQXpCO1FBQUEsaUJBTUM7UUFMQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsQ0FBb0IsRUFBQyxDQUFDO1FBRWhFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFlBQVksRUFBRSxFQUFuQixDQUFtQixFQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7SUFFTyx1Q0FBYTs7OztJQUFyQjtRQUFBLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFlBQVk7YUFDZCxNQUFNOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssS0FBSSxFQUFWLENBQVUsRUFBQzthQUN2QixPQUFPOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksRUFBakIsQ0FBaUIsRUFBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRU8sc0NBQVk7Ozs7SUFBcEI7UUFBQSxpQkFnQkM7UUFmQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBZixDQUFlLEVBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7WUFFZixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLENBQUM7UUFDekUsTUFBTTthQUNILElBQUksQ0FBQyxNQUFNLENBQUM7YUFDWixHQUFHOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQVQsQ0FBUyxFQUFDO2FBQ25CLE9BQU87Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUM7YUFDWixPQUFPOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsVUFBVTthQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjthQUN6QixTQUFTOzs7O1FBQUMsVUFBQyxDQUFJO1lBQ2QsSUFBSSxDQUFDLEtBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLENBQUMsQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBbkIsQ0FBbUIsRUFBQyxDQUFDO2FBQ3pDO1FBQ0gsQ0FBQyxFQUFDLENBQUMsRUFOTyxDQU1QLEVBQUMsRUFQSSxDQU9KLEVBQUMsQ0FBQztJQUNoQixDQUFDOztnQkFsREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvREFBb0Q7aUJBQy9EOzs7O2dCQVBxRCxVQUFVOzs7K0JBWTdELGVBQWUsU0FBQyxlQUFlLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDO2tDQUdwRCxlQUFlLFNBQUMsUUFBUSxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQzs7SUF5Q2hELHNCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FoRFksZUFBZTs7O0lBRTFCLG1DQUF5Qjs7Ozs7SUFFekIsdUNBQ29EOzs7OztJQUVwRCwwQ0FDZ0Q7Ozs7O0lBRWhELHFDQUFtQzs7SUFFdkIsa0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlckNvbnRlbnRJbml0LCBDb250ZW50Q2hpbGRyZW4sIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUXVlcnlMaXN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGdWlSYWRpb30gZnJvbSAnLi4vY29tcG9uZW50cy9yYWRpbyc7XHJcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdmb3JtOm5vdChbbmdGb3JtXSk6bm90KFtbbmdGb3JtXV0pLG5nRm9ybSxbbmdGb3JtXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVJhZGlvTWFuYWdlcjxUPiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xyXG5cclxuICBwdWJsaWMgaXNOZXN0ZWQ6IGJvb2xlYW47XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oRnVpUmFkaW9NYW5hZ2VyLCB7ZGVzY2VuZGFudHM6IHRydWV9KVxyXG4gIHByaXZhdGUgX3N1Yk1hbmFnZXJzOiBRdWVyeUxpc3Q8RnVpUmFkaW9NYW5hZ2VyPFQ+PjtcclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihGdWlSYWRpbywge2Rlc2NlbmRhbnRzOiB0cnVlfSlcclxuICBwcml2YXRlIF9yZW5kZXJlZFJhZGlvczogUXVlcnlMaXN0PEZ1aVJhZGlvPFQ+PjtcclxuXHJcbiAgcHJpdmF0ZSBfcmFkaW9TdWJzOiBTdWJzY3JpcHRpb25bXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMuaXNOZXN0ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3JhZGlvU3VicyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlTmVzdGluZygpO1xyXG4gICAgdGhpcy5fc3ViTWFuYWdlcnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVOZXN0aW5nKCkpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlUmFkaW9zKCk7XHJcbiAgICB0aGlzLl9yZW5kZXJlZFJhZGlvcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLnVwZGF0ZVJhZGlvcygpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlTmVzdGluZygpOiB2b2lkIHtcclxuICAgIHRoaXMuX3N1Yk1hbmFnZXJzXHJcbiAgICAgIC5maWx0ZXIobSA9PiBtICE9PSB0aGlzKVxyXG4gICAgICAuZm9yRWFjaChtID0+IG0uaXNOZXN0ZWQgPSB0cnVlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlUmFkaW9zKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcmFkaW9TdWJzLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xyXG4gICAgdGhpcy5fcmFkaW9TdWJzID0gW107XHJcblxyXG4gICAgY29uc3QgZ3JvdXBzID0gVXRpbC5BcnJheS5ncm91cEJ5KHRoaXMuX3JlbmRlcmVkUmFkaW9zLnRvQXJyYXkoKSwgJ25hbWUnKTtcclxuICAgIE9iamVjdFxyXG4gICAgICAua2V5cyhncm91cHMpXHJcbiAgICAgIC5tYXAoayA9PiBncm91cHNba10pXHJcbiAgICAgIC5mb3JFYWNoKGcgPT4gZ1xyXG4gICAgICAgIC5mb3JFYWNoKHIgPT4gdGhpcy5fcmFkaW9TdWJzXHJcbiAgICAgICAgICAucHVzaChyLm9uQ3VycmVudFZhbHVlQ2hhbmdlXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHY6IFQpID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNOZXN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGcuZm9yRWFjaChyYWRpbyA9PiByYWRpby53cml0ZVZhbHVlKHYpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKSkpO1xyXG4gIH1cclxufVxyXG4iXX0=