/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
var FuiCheckbox = /** @class */ (function () {
    function FuiCheckbox() {
        this.isChecked = false;
        this.onCheckChange = new EventEmitter();
        this.onTouched = new EventEmitter();
        this.isDisabled = false;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    Object.defineProperty(FuiCheckbox.prototype, "checkedAttribute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isChecked ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiCheckbox.prototype, "isDisabledAttribute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDisabled ? 'disabled' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    FuiCheckbox.prototype.onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
    };
    /**
     * @return {?}
     */
    FuiCheckbox.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.isDisabled && !this.isReadonly) {
            this.toggle();
            this.focusCheckbox();
        }
    };
    /**
     * @return {?}
     */
    FuiCheckbox.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.onTouched.emit();
    };
    /**
     * @return {?}
     */
    FuiCheckbox.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.isChecked = !this.isChecked;
        this.onCheckChange.emit(this.isChecked);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FuiCheckbox.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.isChecked = value;
    };
    /**
     * @private
     * @return {?}
     */
    FuiCheckbox.prototype.focusCheckbox = /**
     * @private
     * @return {?}
     */
    function () {
        this._checkboxElement.nativeElement.focus();
    };
    FuiCheckbox.decorators = [
        { type: Component, args: [{
                    selector: 'fui-checkbox',
                    exportAs: 'fuiCheckbox',
                    template: "\n<input class=\"hidden\"\n       type=\"checkbox\"\n       [attr.name]=\"name\"\n       [attr.checked]=\"checkedAttribute\"\n       [attr.disabled]=\"isDisabledAttribute\"\n       [(ngModel)]=\"isChecked\"\n       #checkbox>\n<label>\n    <ng-content></ng-content>\n</label>\n"
                }] }
    ];
    /** @nocollapse */
    FuiCheckbox.ctorParameters = function () { return []; };
    FuiCheckbox.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.checkbox',] }],
        name: [{ type: Input }],
        isChecked: [{ type: HostBinding, args: ['class.checked',] }],
        onCheckChange: [{ type: Output, args: ['checkChange',] }],
        onTouched: [{ type: Output, args: ['touched',] }],
        isDisabled: [{ type: Input }],
        isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
        _checkboxElement: [{ type: ViewChild, args: ['checkbox', { static: false },] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }]
    };
    return FuiCheckbox;
}());
export { FuiCheckbox };
if (false) {
    /** @type {?} */
    FuiCheckbox.prototype.hasClasses;
    /** @type {?} */
    FuiCheckbox.prototype.name;
    /** @type {?} */
    FuiCheckbox.prototype.isChecked;
    /** @type {?} */
    FuiCheckbox.prototype.onCheckChange;
    /** @type {?} */
    FuiCheckbox.prototype.onTouched;
    /** @type {?} */
    FuiCheckbox.prototype.isDisabled;
    /** @type {?} */
    FuiCheckbox.prototype.isReadonly;
    /**
     * @type {?}
     * @private
     */
    FuiCheckbox.prototype._checkboxElement;
}
var FuiCheckboxValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiCheckboxValueAccessor, _super);
    function FuiCheckboxValueAccessor(host) {
        return _super.call(this, host) || this;
    }
    FuiCheckboxValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'fui-checkbox',
                    host: {
                        '(checkChange)': 'onChange($event)',
                        '(touched)': 'onTouched()'
                    },
                    providers: [customValueAccessorFactory(FuiCheckboxValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiCheckboxValueAccessor.ctorParameters = function () { return [
        { type: FuiCheckbox }
    ]; };
    return FuiCheckboxValueAccessor;
}(CustomValueAccessor));
export { FuiCheckboxValueAccessor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2NoZWNrYm94L2NvbXBvbmVudHMvY2hlY2tib3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEksT0FBTyxFQUFDLG1CQUFtQixFQUFFLDBCQUEwQixFQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBRXRIO0lBMENFO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUUxQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsc0JBQVcseUNBQWdCOzs7O1FBQTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDRDQUFtQjs7OztRQUE5QjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDbEQsQ0FBQzs7O09BQUE7Ozs7O0lBR00saUNBQVc7Ozs7SUFEbEIsVUFDbUIsQ0FBYTtRQUM5QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQUdNLDZCQUFPOzs7SUFEZDtRQUVFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN4QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDOzs7O0lBR00sZ0NBQVU7OztJQURqQjtRQUVFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVNLDRCQUFNOzs7SUFBYjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVNLGdDQUFVOzs7O0lBQWpCLFVBQWtCLEtBQWM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyxtQ0FBYTs7OztJQUFyQjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7Z0JBMUZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSx1UkFXWDtpQkFDQTs7Ozs7NkJBRUUsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGdCQUFnQjt1QkFHNUIsS0FBSzs0QkFHTCxXQUFXLFNBQUMsZUFBZTtnQ0FHM0IsTUFBTSxTQUFDLGFBQWE7NEJBR3BCLE1BQU0sU0FBQyxTQUFTOzZCQUdoQixLQUFLOzZCQUdMLFdBQVcsU0FBQyxpQkFBaUIsY0FDN0IsS0FBSzttQ0FFTCxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzs4QkFzQnJDLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7MEJBS3BDLFlBQVksU0FBQyxPQUFPOzZCQVFwQixZQUFZLFNBQUMsVUFBVTs7SUFpQjFCLGtCQUFDO0NBQUEsQUEzRkQsSUEyRkM7U0EzRVksV0FBVzs7O0lBQ3RCLGlDQUVvQzs7SUFFcEMsMkJBQ29COztJQUVwQixnQ0FDMEI7O0lBRTFCLG9DQUM0Qzs7SUFFNUMsZ0NBQ3FDOztJQUVyQyxpQ0FDMkI7O0lBRTNCLGlDQUUyQjs7Ozs7SUFDM0IsdUNBQ3FDOztBQXFEdkM7SUFROEMsb0RBQXlDO0lBQ3JGLGtDQUFZLElBQWlCO2VBQzNCLGtCQUFNLElBQUksQ0FBQztJQUNiLENBQUM7O2dCQVhGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsSUFBSSxFQUFFO3dCQUNKLGVBQWUsRUFBRSxrQkFBa0I7d0JBQ25DLFdBQVcsRUFBRSxhQUFhO3FCQUMzQjtvQkFDRCxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2lCQUNsRTs7OztnQkFFbUIsV0FBVzs7SUFHL0IsK0JBQUM7Q0FBQSxBQVpELENBUThDLG1CQUFtQixHQUloRTtTQUpZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDdXN0b21WYWx1ZUFjY2Vzc29yLCBjdXN0b21WYWx1ZUFjY2Vzc29yRmFjdG9yeSwgSUN1c3RvbVZhbHVlQWNjZXNzb3JIb3N0fSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktY2hlY2tib3gnLFxyXG4gIGV4cG9ydEFzOiAnZnVpQ2hlY2tib3gnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxpbnB1dCBjbGFzcz1cImhpZGRlblwiXHJcbiAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgW2F0dHIubmFtZV09XCJuYW1lXCJcclxuICAgICAgIFthdHRyLmNoZWNrZWRdPVwiY2hlY2tlZEF0dHJpYnV0ZVwiXHJcbiAgICAgICBbYXR0ci5kaXNhYmxlZF09XCJpc0Rpc2FibGVkQXR0cmlidXRlXCJcclxuICAgICAgIFsobmdNb2RlbCldPVwiaXNDaGVja2VkXCJcclxuICAgICAgICNjaGVja2JveD5cclxuPGxhYmVsPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2xhYmVsPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlDaGVja2JveCBpbXBsZW1lbnRzIElDdXN0b21WYWx1ZUFjY2Vzc29ySG9zdDxib29sZWFuPiB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jaGVja2JveCcpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jaGVja2VkJylcclxuICBwdWJsaWMgaXNDaGVja2VkOiBib29sZWFuO1xyXG5cclxuICBAT3V0cHV0KCdjaGVja0NoYW5nZScpXHJcbiAgcHVibGljIG9uQ2hlY2tDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuXHJcbiAgQE91dHB1dCgndG91Y2hlZCcpXHJcbiAgcHVibGljIG9uVG91Y2hlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpc0Rpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJlYWQtb25seScpXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNSZWFkb25seTogYm9vbGVhbjtcclxuICBAVmlld0NoaWxkKCdjaGVja2JveCcsIHtzdGF0aWM6IGZhbHNlfSlcclxuICBwcml2YXRlIF9jaGVja2JveEVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pc0NoZWNrZWQgPSBmYWxzZTtcclxuICAgIHRoaXMub25DaGVja0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc1JlYWRvbmx5ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY2hlY2tlZEF0dHJpYnV0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNDaGVja2VkID8gJycgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzRGlzYWJsZWRBdHRyaWJ1dGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmlzRGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgb25Nb3VzZURvd24oZTogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQgJiYgIXRoaXMuaXNSZWFkb25seSkge1xyXG4gICAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gICAgICB0aGlzLmZvY3VzQ2hlY2tib3goKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3Vzb3V0JylcclxuICBwdWJsaWMgb25Gb2N1c091dCgpOiB2b2lkIHtcclxuICAgIHRoaXMub25Ub3VjaGVkLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b2dnbGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzQ2hlY2tlZCA9ICF0aGlzLmlzQ2hlY2tlZDtcclxuICAgIHRoaXMub25DaGVja0NoYW5nZS5lbWl0KHRoaXMuaXNDaGVja2VkKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzQ2hlY2tlZCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmb2N1c0NoZWNrYm94KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY2hlY2tib3hFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcclxuICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWNoZWNrYm94JyxcclxuICBob3N0OiB7XHJcbiAgICAnKGNoZWNrQ2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQpJyxcclxuICAgICcodG91Y2hlZCknOiAnb25Ub3VjaGVkKCknXHJcbiAgfSxcclxuICBwcm92aWRlcnM6IFtjdXN0b21WYWx1ZUFjY2Vzc29yRmFjdG9yeShGdWlDaGVja2JveFZhbHVlQWNjZXNzb3IpXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpQ2hlY2tib3hWYWx1ZUFjY2Vzc29yIGV4dGVuZHMgQ3VzdG9tVmFsdWVBY2Nlc3Nvcjxib29sZWFuLCBGdWlDaGVja2JveD4ge1xyXG4gIGNvbnN0cnVjdG9yKGhvc3Q6IEZ1aUNoZWNrYm94KSB7XHJcbiAgICBzdXBlcihob3N0KTtcclxuICB9XHJcbn1cclxuIl19