/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
/**
 * @template T
 */
var FuiRadio = /** @class */ (function () {
    function FuiRadio() {
        this.isChecked = false;
        this.onCurrentValueChange = new EventEmitter();
        this.onTouched = new EventEmitter();
        this.isDisabled = false;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    Object.defineProperty(FuiRadio.prototype, "checkedAttribute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isChecked ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiRadio.prototype, "isDisabledAttribute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDisabled ? 'disabled' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    FuiRadio.prototype.onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
    };
    /**
     * @return {?}
     */
    FuiRadio.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.isDisabled && !this.isReadonly) {
            this.currentValue = this.value;
            this.onCurrentValueChange.emit(this.currentValue);
            this.update();
            this.focusRadio();
        }
    };
    /**
     * @return {?}
     */
    FuiRadio.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.onTouched.emit();
    };
    /**
     * @return {?}
     */
    FuiRadio.prototype.update = /**
     * @return {?}
     */
    function () {
        this.isChecked = this.currentValue === this.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FuiRadio.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.currentValue = value;
        this.update();
    };
    /**
     * @private
     * @return {?}
     */
    FuiRadio.prototype.focusRadio = /**
     * @private
     * @return {?}
     */
    function () {
        this._radioElement.nativeElement.focus();
    };
    FuiRadio.decorators = [
        { type: Component, args: [{
                    selector: 'fui-radio-button',
                    template: "\n<input class=\"hidden\"\n       type=\"checkbox\"\n       [attr.name]=\"name\"\n       [attr.checked]=\"checkedAttribute\"\n       [attr.disabled]=\"isDisabledAttribute\"\n       [ngModel]=\"isChecked\"\n       (ngModel)=\"currentValue = value\"\n       #radio>\n<label>\n    <ng-content></ng-content>\n</label>\n"
                }] }
    ];
    /** @nocollapse */
    FuiRadio.ctorParameters = function () { return []; };
    FuiRadio.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.radio',] }, { type: HostBinding, args: ['class.checkbox',] }],
        name: [{ type: Input }],
        value: [{ type: Input }],
        isChecked: [{ type: HostBinding, args: ['class.checked',] }],
        onCurrentValueChange: [{ type: Output, args: ['currentValueChange',] }],
        onTouched: [{ type: Output, args: ['touched',] }],
        isDisabled: [{ type: Input }],
        isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
        _radioElement: [{ type: ViewChild, args: ['radio', { static: false },] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }]
    };
    return FuiRadio;
}());
export { FuiRadio };
if (false) {
    /** @type {?} */
    FuiRadio.prototype.hasClasses;
    /** @type {?} */
    FuiRadio.prototype.name;
    /** @type {?} */
    FuiRadio.prototype.value;
    /** @type {?} */
    FuiRadio.prototype.isChecked;
    /** @type {?} */
    FuiRadio.prototype.currentValue;
    /** @type {?} */
    FuiRadio.prototype.onCurrentValueChange;
    /** @type {?} */
    FuiRadio.prototype.onTouched;
    /** @type {?} */
    FuiRadio.prototype.isDisabled;
    /** @type {?} */
    FuiRadio.prototype.isReadonly;
    /**
     * @type {?}
     * @private
     */
    FuiRadio.prototype._radioElement;
}
/**
 * @template T
 */
var FuiRadioValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiRadioValueAccessor, _super);
    function FuiRadioValueAccessor(host) {
        return _super.call(this, host) || this;
    }
    FuiRadioValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'fui-radio-button',
                    host: {
                        '(currentValueChange)': 'onChange($event)',
                        '(touched)': 'onTouched()'
                    },
                    providers: [customValueAccessorFactory(FuiRadioValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiRadioValueAccessor.ctorParameters = function () { return [
        { type: FuiRadio }
    ]; };
    return FuiRadioValueAccessor;
}(CustomValueAccessor));
export { FuiRadioValueAccessor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2NoZWNrYm94L2NvbXBvbmVudHMvcmFkaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEksT0FBTyxFQUFDLG1CQUFtQixFQUFFLDBCQUEwQixFQUEyQixNQUFNLDZCQUE2QixDQUFDOzs7O0FBRXRIO0lBaURFO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxzQkFBVyxzQ0FBZ0I7Ozs7UUFBM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcseUNBQW1COzs7O1FBQTlCO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTs7Ozs7SUFHTSw4QkFBVzs7OztJQURsQixVQUNtQixDQUFhO1FBQzlCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBR00sMEJBQU87OztJQURkO1FBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7O0lBR00sNkJBQVU7OztJQURqQjtRQUVFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVNLHlCQUFNOzs7SUFBYjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRU0sNkJBQVU7Ozs7SUFBakIsVUFBa0IsS0FBUTtRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFTyw2QkFBVTs7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNDLENBQUM7O2dCQW5HRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLDZUQVlYO2lCQUNBOzs7Ozs2QkFFRSxXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsYUFBYSxjQUN6QixXQUFXLFNBQUMsZ0JBQWdCO3VCQUc1QixLQUFLO3dCQUdMLEtBQUs7NEJBR0wsV0FBVyxTQUFDLGVBQWU7dUNBSzNCLE1BQU0sU0FBQyxvQkFBb0I7NEJBRzNCLE1BQU0sU0FBQyxTQUFTOzZCQUdoQixLQUFLOzZCQUdMLFdBQVcsU0FBQyxpQkFBaUIsY0FDN0IsS0FBSztnQ0FHTCxTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzs4QkFzQmxDLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7MEJBS3BDLFlBQVksU0FBQyxPQUFPOzZCQVVwQixZQUFZLFNBQUMsVUFBVTs7SUFpQjFCLGVBQUM7Q0FBQSxBQXBHRCxJQW9HQztTQXBGWSxRQUFROzs7SUFDbkIsOEJBR29DOztJQUVwQyx3QkFDb0I7O0lBRXBCLHlCQUNnQjs7SUFFaEIsNkJBQzBCOztJQUUxQixnQ0FBdUI7O0lBRXZCLHdDQUM2Qzs7SUFFN0MsNkJBQ3FDOztJQUVyQyw4QkFDMkI7O0lBRTNCLDhCQUUyQjs7Ozs7SUFFM0IsaUNBQ2tDOzs7OztBQXVEcEM7SUFROEMsaURBQW1DO0lBQy9FLCtCQUFZLElBQWlCO2VBQzNCLGtCQUFNLElBQUksQ0FBQztJQUNiLENBQUM7O2dCQVhGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixJQUFJLEVBQUU7d0JBQ0osc0JBQXNCLEVBQUUsa0JBQWtCO3dCQUMxQyxXQUFXLEVBQUUsYUFBYTtxQkFDM0I7b0JBQ0QsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUMscUJBQXFCLENBQUMsQ0FBQztpQkFDL0Q7Ozs7Z0JBRW1CLFFBQVE7O0lBRzVCLDRCQUFDO0NBQUEsQUFaRCxDQVE4QyxtQkFBbUIsR0FJaEU7U0FKWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Q3VzdG9tVmFsdWVBY2Nlc3NvciwgY3VzdG9tVmFsdWVBY2Nlc3NvckZhY3RvcnksIElDdXN0b21WYWx1ZUFjY2Vzc29ySG9zdH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLXJhZGlvLWJ1dHRvbicsXHJcbiAgdGVtcGxhdGU6IGBcclxuPGlucHV0IGNsYXNzPVwiaGlkZGVuXCJcclxuICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICBbYXR0ci5uYW1lXT1cIm5hbWVcIlxyXG4gICAgICAgW2F0dHIuY2hlY2tlZF09XCJjaGVja2VkQXR0cmlidXRlXCJcclxuICAgICAgIFthdHRyLmRpc2FibGVkXT1cImlzRGlzYWJsZWRBdHRyaWJ1dGVcIlxyXG4gICAgICAgW25nTW9kZWxdPVwiaXNDaGVja2VkXCJcclxuICAgICAgIChuZ01vZGVsKT1cImN1cnJlbnRWYWx1ZSA9IHZhbHVlXCJcclxuICAgICAgICNyYWRpbz5cclxuPGxhYmVsPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2xhYmVsPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlSYWRpbzxUPiBpbXBsZW1lbnRzIElDdXN0b21WYWx1ZUFjY2Vzc29ySG9zdDxUPiB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5yYWRpbycpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jaGVja2JveCcpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgdmFsdWU6IFQ7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2hlY2tlZCcpXHJcbiAgcHVibGljIGlzQ2hlY2tlZDogYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGN1cnJlbnRWYWx1ZTogVDtcclxuXHJcbiAgQE91dHB1dCgnY3VycmVudFZhbHVlQ2hhbmdlJylcclxuICBwdWJsaWMgb25DdXJyZW50VmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcclxuXHJcbiAgQE91dHB1dCgndG91Y2hlZCcpXHJcbiAgcHVibGljIG9uVG91Y2hlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpc0Rpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJlYWQtb25seScpXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNSZWFkb25seTogYm9vbGVhbjtcclxuXHJcbiAgQFZpZXdDaGlsZCgncmFkaW8nLCB7c3RhdGljOiBmYWxzZX0pXHJcbiAgcHJpdmF0ZSBfcmFkaW9FbGVtZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLm9uQ3VycmVudFZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xyXG4gICAgdGhpcy5vblRvdWNoZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzUmVhZG9ubHkgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmhhc0NsYXNzZXMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjaGVja2VkQXR0cmlidXRlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pc0NoZWNrZWQgPyAnJyA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNEaXNhYmxlZEF0dHJpYnV0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNEaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbk1vdXNlRG93bihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgcHVibGljIG9uQ2xpY2soKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCAmJiAhdGhpcy5pc1JlYWRvbmx5KSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgdGhpcy5vbkN1cnJlbnRWYWx1ZUNoYW5nZS5lbWl0KHRoaXMuY3VycmVudFZhbHVlKTtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgdGhpcy5mb2N1c1JhZGlvKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmb2N1c291dCcpXHJcbiAgcHVibGljIG9uRm9jdXNPdXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLm9uVG91Y2hlZC5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0NoZWNrZWQgPSB0aGlzLmN1cnJlbnRWYWx1ZSA9PT0gdGhpcy52YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZm9jdXNSYWRpbygpOiB2b2lkIHtcclxuICAgIHRoaXMuX3JhZGlvRWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2Z1aS1yYWRpby1idXR0b24nLFxyXG4gIGhvc3Q6IHtcclxuICAgICcoY3VycmVudFZhbHVlQ2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQpJyxcclxuICAgICcodG91Y2hlZCknOiAnb25Ub3VjaGVkKCknXHJcbiAgfSxcclxuICBwcm92aWRlcnM6IFtjdXN0b21WYWx1ZUFjY2Vzc29yRmFjdG9yeShGdWlSYWRpb1ZhbHVlQWNjZXNzb3IpXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpUmFkaW9WYWx1ZUFjY2Vzc29yPFQ+IGV4dGVuZHMgQ3VzdG9tVmFsdWVBY2Nlc3NvcjxULCBGdWlSYWRpbzxUPj4ge1xyXG4gIGNvbnN0cnVjdG9yKGhvc3Q6IEZ1aVJhZGlvPFQ+KSB7XHJcbiAgICBzdXBlcihob3N0KTtcclxuICB9XHJcbn1cclxuIl19