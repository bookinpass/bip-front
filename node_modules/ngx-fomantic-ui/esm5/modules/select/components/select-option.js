/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { FuiDropdownMenuItem } from '../../dropdown/internal';
import { HandledEvent } from '../../../misc/util/internal';
/**
 * @template T
 */
var FuiSelectOption = /** @class */ (function (_super) {
    tslib_1.__extends(FuiSelectOption, _super);
    function FuiSelectOption(renderer, element, changeDetector) {
        var _this = 
        // We inherit FuiDropdownMenuItem to automatically gain all keyboard navigation functionality.
        // This is not done via adding the .item class because it isn't supported by Angular.
        _super.call(this, renderer, element) || this;
        _this.changeDetector = changeDetector;
        _this.hasClasses = true;
        _this.isActive = false;
        _this.onSelected = new EventEmitter();
        // By default we make the default text an empty label, for the brief moment when it isn't displaying the correct one.
        _this.renderedText = '';
        _this.usesTemplate = false;
        return _this;
    }
    Object.defineProperty(FuiSelectOption.prototype, "formatter", {
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            if (!this.usesTemplate) {
                this.renderedText = formatter(this.value);
            }
            else {
                this.renderedText = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectOption.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        e.eventHandled = true;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.onSelected.emit(_this.value); }));
    };
    FuiSelectOption.decorators = [
        { type: Component, args: [{
                    selector: 'fui-select-option',
                    template: "\n<span #templateSibling></span>\n<span [innerHTML]=\"renderedText\"></span>\n"
                }] }
    ];
    /** @nocollapse */
    FuiSelectOption.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    FuiSelectOption.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.item',] }],
        value: [{ type: Input }],
        onSelected: [{ type: Output }],
        isActive: [{ type: HostBinding, args: ['class.active',] }],
        templateSibling: [{ type: ViewChild, args: ['templateSibling', { read: ViewContainerRef, static: false },] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FuiSelectOption;
}(FuiDropdownMenuItem));
export { FuiSelectOption };
if (false) {
    /** @type {?} */
    FuiSelectOption.prototype.hasClasses;
    /** @type {?} */
    FuiSelectOption.prototype.value;
    /** @type {?} */
    FuiSelectOption.prototype.onSelected;
    /** @type {?} */
    FuiSelectOption.prototype.isActive;
    /** @type {?} */
    FuiSelectOption.prototype.renderedText;
    /** @type {?} */
    FuiSelectOption.prototype.usesTemplate;
    /** @type {?} */
    FuiSelectOption.prototype.templateSibling;
    /** @type {?} */
    FuiSelectOption.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2VsZWN0L2NvbXBvbmVudHMvc2VsZWN0LW9wdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUV6RDtJQU93QywyQ0FBbUI7SUFxQnpELHlCQUFZLFFBQW1CLEVBQUUsT0FBbUIsRUFBUyxjQUFpQztRQUE5RjtRQUNFLDhGQUE4RjtRQUM5RixxRkFBcUY7UUFDckYsa0JBQU0sUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQVV6QjtRQWI0RCxvQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFLNUYsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFlBQVksRUFBSyxDQUFDO1FBRXhDLHFIQUFxSDtRQUNySCxLQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQzs7SUFDNUIsQ0FBQztJQUVELHNCQUFXLHNDQUFTOzs7OztRQUFwQixVQUFxQixTQUE2QjtZQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7O0lBR00saUNBQU87Ozs7SUFEZCxVQUNlLENBQWU7UUFEOUIsaUJBS0M7UUFIQyxDQUFDLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUV0QixVQUFVOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxFQUFoQyxDQUFnQyxFQUFDLENBQUM7SUFDckQsQ0FBQzs7Z0JBeERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsZ0ZBR1g7aUJBQ0E7Ozs7Z0JBYkMsU0FBUztnQkFOVCxVQUFVO2dCQUZWLGlCQUFpQjs7OzZCQXdCaEIsV0FBVyxTQUFDLFlBQVk7d0JBR3hCLEtBQUs7NkJBSUwsTUFBTTsyQkFHTixXQUFXLFNBQUMsY0FBYztrQ0FNMUIsU0FBUyxTQUFDLGlCQUFpQixFQUFFLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUM7MEJBMEJwRSxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQU1uQyxzQkFBQztDQUFBLEFBekRELENBT3dDLG1CQUFtQixHQWtEMUQ7U0FsRFksZUFBZTs7O0lBRTFCLHFDQUNvQzs7SUFFcEMsZ0NBQ2dCOztJQUdoQixxQ0FDbUM7O0lBRW5DLG1DQUN5Qjs7SUFFekIsdUNBQTZCOztJQUM3Qix1Q0FBNkI7O0lBRTdCLDBDQUN5Qzs7SUFFYSx5Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIFJlbmRlcmVyMixcclxuICBWaWV3Q2hpbGQsXHJcbiAgVmlld0NvbnRhaW5lclJlZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Z1aURyb3Bkb3duTWVudUl0ZW19IGZyb20gJy4uLy4uL2Ryb3Bkb3duL2ludGVybmFsJztcclxuaW1wb3J0IHtIYW5kbGVkRXZlbnR9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1zZWxlY3Qtb3B0aW9uJyxcclxuICB0ZW1wbGF0ZTogYFxyXG48c3BhbiAjdGVtcGxhdGVTaWJsaW5nPjwvc3Bhbj5cclxuPHNwYW4gW2lubmVySFRNTF09XCJyZW5kZXJlZFRleHRcIj48L3NwYW4+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVNlbGVjdE9wdGlvbjxUPiBleHRlbmRzIEZ1aURyb3Bkb3duTWVudUl0ZW0ge1xyXG4gIC8vIFNldHMgdGhlIEZvbWFudGljIFVJIGNsYXNzZXMgb24gdGhlIGhvc3QgZWxlbWVudC5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLml0ZW0nKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB2YWx1ZTogVDtcclxuXHJcbiAgLy8gRmlyZXMgd2hlbiB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkLCB3aGV0aGVyIGJ5IGNsaWNraW5nIG9yIGJ5IGtleWJvYXJkLlxyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBvblNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aXZlJylcclxuICBwdWJsaWMgaXNBY3RpdmU6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyByZW5kZXJlZFRleHQ/OiBzdHJpbmc7XHJcbiAgcHVibGljIHVzZXNUZW1wbGF0ZTogYm9vbGVhbjtcclxuICAvLyBQbGFjZWhvbGRlciB0byBkcmF3IHRlbXBsYXRlIGJlc2lkZS5cclxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVNpYmxpbmcnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZX0pXHJcbiAgcHVibGljIHRlbXBsYXRlU2libGluZzogVmlld0NvbnRhaW5lclJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWxlbWVudDogRWxlbWVudFJlZiwgcHVibGljIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgLy8gV2UgaW5oZXJpdCBGdWlEcm9wZG93bk1lbnVJdGVtIHRvIGF1dG9tYXRpY2FsbHkgZ2FpbiBhbGwga2V5Ym9hcmQgbmF2aWdhdGlvbiBmdW5jdGlvbmFsaXR5LlxyXG4gICAgLy8gVGhpcyBpcyBub3QgZG9uZSB2aWEgYWRkaW5nIHRoZSAuaXRlbSBjbGFzcyBiZWNhdXNlIGl0IGlzbid0IHN1cHBvcnRlZCBieSBBbmd1bGFyLlxyXG4gICAgc3VwZXIocmVuZGVyZXIsIGVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLm9uU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XHJcblxyXG4gICAgLy8gQnkgZGVmYXVsdCB3ZSBtYWtlIHRoZSBkZWZhdWx0IHRleHQgYW4gZW1wdHkgbGFiZWwsIGZvciB0aGUgYnJpZWYgbW9tZW50IHdoZW4gaXQgaXNuJ3QgZGlzcGxheWluZyB0aGUgY29ycmVjdCBvbmUuXHJcbiAgICB0aGlzLnJlbmRlcmVkVGV4dCA9ICcnO1xyXG5cclxuICAgIHRoaXMudXNlc1RlbXBsYXRlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGZvcm1hdHRlcihmb3JtYXR0ZXI6IChvYmo6IFQpID0+IHN0cmluZykge1xyXG4gICAgaWYgKCF0aGlzLnVzZXNUZW1wbGF0ZSkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVkVGV4dCA9IGZvcm1hdHRlcih0aGlzLnZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZWRUZXh0ID0gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uQ2xpY2soZTogSGFuZGxlZEV2ZW50KTogdm9pZCB7XHJcbiAgICBlLmV2ZW50SGFuZGxlZCA9IHRydWU7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9uU2VsZWN0ZWQuZW1pdCh0aGlzLnZhbHVlKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==