/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Directive, ElementRef, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { FuiSelectBase } from '../classes/select-base';
/**
 * @template T, U
 */
var FuiSelect = /** @class */ (function (_super) {
    tslib_1.__extends(FuiSelect, _super);
    function FuiSelect(element, localizationService) {
        var _this = _super.call(this, element, localizationService) || this;
        _this.selectedOptionChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(FuiSelect.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.localeValues.single.placeholder;
        },
        set: /**
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} option
     * @return {?}
     */
    FuiSelect.prototype.selectOption = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        // Choose and emit the selected option.
        this.selectedOption = option;
        this.selectedOptionChange.emit(this.valueGetter(option));
        this.dropdownService.setOpenState(false);
        this.resetQuery();
        this.drawSelectedOption();
        // Automatically refocus the search input for better keyboard accessibility.
        this.focus();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FuiSelect.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value != undefined) {
            if (this.searchService.options.length > 0) {
                // If the options have already been loaded, we can immediately match the ngModel value to an option.
                this.selectedOption = this.findOption(this.searchService.options, value);
                this.drawSelectedOption();
            }
            if (this.selectedOption == undefined) {
                if (this.valueField && this.searchService.hasItemLookup) {
                    // If the search service has a selected lookup function, make use of that to load the initial value.
                    this.searchService
                        .initialLookup(value)
                        .then((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) {
                        _this.selectedOption = i;
                        _this.drawSelectedOption();
                    }));
                }
                else {
                    // Otherwise, cache the written value for when options are set.
                    this._writtenOption = value;
                }
            }
        }
        else {
            this.selectedOption = undefined;
            this.drawSelectedOption();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelect.prototype.onRemoveClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            this.selectedOption = undefined;
            this.selectedOptionChange.emit(undefined);
            this._renderedOptions.forEach((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.isActive = false; }));
        }
    };
    /**
     * @protected
     * @return {?}
     */
    FuiSelect.prototype.optionsUpdateHook = /**
     * @protected
     * @return {?}
     */
    function () {
        if (!this._writtenOption && this.selectedOption) {
            // We need to check the option still exists.
            this.writeValue(this.valueGetter(this.selectedOption));
        }
        if (this._writtenOption && this.searchService.options.length > 0) {
            // If there was an value written by ngModel before the options had been loaded, this runs to fix it.
            this.selectedOption = this.findOption(this.searchService.options, this._writtenOption);
            if (this.selectedOption) {
                this._writtenOption = undefined;
                this.drawSelectedOption();
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    FuiSelect.prototype.queryUpdateHook = /**
     * @protected
     * @return {?}
     */
    function () {
        // When the query is updated, we just abandon the current selection.
        this.selectedOption = undefined;
    };
    /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    FuiSelect.prototype.initialiseRenderedOption = /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    function (option) {
        _super.prototype.initialiseRenderedOption.call(this, option);
        // Boldens the item so it appears selected in the dropdown.
        option.isActive = option.value === this.selectedOption;
    };
    /**
     * @private
     * @return {?}
     */
    FuiSelect.prototype.drawSelectedOption = /**
     * @private
     * @return {?}
     */
    function () {
        // Updates the active class on the newly selected option.
        if (this._renderedOptions) {
            this.onAvailableOptionsRendered();
        }
        if (this.selectedOption != undefined && this.optionTemplate) {
            this.drawTemplate(this._optionTemplateSibling, this.selectedOption);
        }
    };
    FuiSelect.decorators = [
        { type: Component, args: [{
                    selector: 'fui-select',
                    template: "\n                   <!-- Query input -->\n                   <input fuiSelectSearch\n                          type=\"text\"\n                          [hidden]=\"!isSearchable || isSearchExternal\">\n\n                   <!-- Placeholder text -->\n                   <div *ngIf=\"selectedOption == undefined\" class=\"default text\" [class.filtered]=\"query\">{{ placeholder }}</div>\n                   <!-- Selected item -->\n                   <div class=\"text\" [class.filtered]=\"query || selectedOption == undefined\">\n                       <span #optionTemplateSibling></span>\n                       <span *ngIf=\"!optionTemplate && selectedOption != undefined\"\n                             [innerHTML]=\"configuredFormatter(selectedOption)\"></span>\n                   </div>\n                   <!-- Dropdown icon -->\n                   <i *ngIf=\"selectedOption && !isSearching && isClearable\" class=\"times icon\"\n                      (click)=\"onRemoveClick($event)\"></i>\n                   <i *ngIf=\"!selectedOption || !isClearable\" class=\"{{ icon }} icon\" (click)=\"onCaretClick($event)\"></i>\n                   <!-- Select dropdown menu -->\n                   <div class=\"menu\"\n                        fuiDropdownMenu\n                        [menuTransition]=\"transition\"\n                        [menuTransitionDuration]=\"transitionDuration\"\n                        [menuAutoSelectFirst]=\"isSearchable\">\n\n                       <ng-content></ng-content>\n                       <div *ngIf=\"isSearchable && availableOptions.length === 0\" class=\"message\">\n                           {{ localeValues.noResultsMessage }}\n                       </div>\n                   </div>\n               ",
                    styles: ["\n                   :host .times.icon {\n                       position: absolute;\n                       width: auto;\n                       height: auto;\n                       line-height: 1.21428571em;\n                       top: .78571429em;\n                       right: 1em;\n                       margin: -.78571429em;\n                       opacity: .6;\n                       font-size: 1.07142857em;\n                       padding: .6em;\n                       -webkit-transition: opacity .1s ease;\n                       transition: opacity .1s ease;\n                       z-index: 3;\n                   }\n\n                   :host .times.icon.larger {\n                       padding: .91666667em;\n                       font-size: .85714286em;\n                   }\n\n                   :host .times.icon:hover {\n                       opacity: 1;\n                   }\n               "]
                }] }
    ];
    /** @nocollapse */
    FuiSelect.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FuiLocalizationService }
    ]; };
    FuiSelect.propDecorators = {
        selectedOptionChange: [{ type: Output }],
        _optionTemplateSibling: [{ type: ViewChild, args: ['optionTemplateSibling', { read: ViewContainerRef, static: false },] }],
        placeholder: [{ type: Input }]
    };
    return FuiSelect;
}(FuiSelectBase));
export { FuiSelect };
if (false) {
    /** @type {?} */
    FuiSelect.prototype.selectedOption;
    /** @type {?} */
    FuiSelect.prototype.selectedOptionChange;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._writtenOption;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._optionTemplateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._placeholder;
}
// Value accessor directive for the select to support ngModel.
/**
 * @template T, U
 */
var FuiSelectValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiSelectValueAccessor, _super);
    function FuiSelectValueAccessor(host) {
        return _super.call(this, host) || this;
    }
    FuiSelectValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'fui-select',
                    host: {
                        '(selectedOptionChange)': 'onChange($event)',
                        '(touched)': 'onTouched()'
                    },
                    providers: [customValueAccessorFactory(FuiSelectValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiSelectValueAccessor.ctorParameters = function () { return [
        { type: FuiSelect }
    ]; };
    return FuiSelectValueAccessor;
}(CustomValueAccessor));
export { FuiSelectValueAccessor };
//# sourceMappingURL=data:application/json;base64,