/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Directive, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory, KeyCode } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { FuiSelectBase } from '../classes/select-base';
/**
 * @template T, U
 */
var FuiMultiSelect = /** @class */ (function (_super) {
    tslib_1.__extends(FuiMultiSelect, _super);
    function FuiMultiSelect(element, localizationService) {
        var _this = _super.call(this, element, localizationService) || this;
        _this.selectedOptions = [];
        _this.selectedOptionsChange = new EventEmitter();
        _this.hasLabels = true;
        _this.hasClasses = true;
        return _this;
    }
    Object.defineProperty(FuiMultiSelect.prototype, "filteredOptions", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.maxSelectedReached) {
                // If we have reached the maximum number of selections, then empty the results completely.
                return [];
            }
            /** @type {?} */
            var searchResults = this.searchService.results;
            if (!this.hasLabels) {
                return searchResults;
            }
            else {
                // Returns the search results \ selected options.
                return searchResults
                    .filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return _this.selectedOptions.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return r === o; })) == undefined; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "availableOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filteredOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "maxSelectedReached", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.maxSelected == undefined) {
                // If there is no maximum then we can immediately return.
                return false;
            }
            return this.selectedOptions.length === this.maxSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "maxSelectedMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localizationService.interpolate(this.localeValues.multi.maxSelectedMessage, [['max', this.maxSelected.toString()]]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "selectedMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localizationService.interpolate(this.localeValues.multi.selectedMessage, [['count', this.selectedOptions.length.toString() === '0' && this._showCountText ?
                        this._showCountText : this.selectedOptions.length.toString()]]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "hasLabels", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hasLabels;
        },
        set: /**
         * @param {?} hasLabels
         * @return {?}
         */
        function (hasLabels) {
            this._hasLabels = hasLabels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "showCountText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showCountText;
        },
        set: /**
         * @param {?} showCountText
         * @return {?}
         */
        function (showCountText) {
            this._showCountText = showCountText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiMultiSelect.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.localeValues.multi.placeholder;
        },
        set: /**
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} option
     * @return {?}
     */
    FuiMultiSelect.prototype.selectOption = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        var _this = this;
        if (this.selectedOptions.indexOf(option) !== -1) {
            this.deselectOption(option);
            return;
        }
        this.selectedOptions.push(option);
        this.selectedOptionsChange.emit(this.selectedOptions.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return _this.valueGetter(o); })));
        this.resetQuery(false);
        // Automatically refocus the search input for better keyboard accessibility.
        this.focus();
        if (!this.hasLabels) {
            this.onAvailableOptionsRendered();
        }
    };
    /**
     * @param {?} values
     * @return {?}
     */
    FuiMultiSelect.prototype.writeValue = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        if (values instanceof Array) {
            if (this.searchService.options.length > 0) {
                // If the options have already been loaded, we can immediately match the ngModel values to options.
                this.selectedOptions = values
                    // non-null assertion added here because Typescript doesn't recognise the non-null filter.
                    .map((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return (/** @type {?} */ (_this.findOption(_this.searchService.options, v))); }))
                    .filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v != undefined; }));
            }
            if (values.length > 0 && this.selectedOptions.length === 0) {
                if (this.searchService.hasItemLookup) {
                    // If the search service has a selected lookup function, make use of that to load the initial values.
                    this.searchService
                        .initialLookup(values)
                        .then((/**
                     * @param {?} items
                     * @return {?}
                     */
                    function (items) { return _this.selectedOptions = items; }));
                }
                else {
                    // Otherwise, cache the written value for when options are set.
                    this._writtenOptions = values;
                }
            }
            if (values.length === 0) {
                this.selectedOptions = [];
            }
        }
        else {
            this.selectedOptions = [];
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    FuiMultiSelect.prototype.deselectOption = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        var _this = this;
        // Update selected options to the previously selected options \ {option}.
        this.selectedOptions = this.selectedOptions.filter((/**
         * @param {?} so
         * @return {?}
         */
        function (so) { return so !== option; }));
        this.selectedOptionsChange.emit(this.selectedOptions.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return _this.valueGetter(o); })));
        // Automatically refocus the search input for better keyboard accessibility.
        this.focus();
        if (!this.hasLabels) {
            this.onAvailableOptionsRendered();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FuiMultiSelect.prototype.onQueryInputKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCode.Backspace && this.query === '' && this.selectedOptions.length > 0) {
            // Deselect the rightmost option when the user presses backspace in the search input.
            this.deselectOption(this.selectedOptions[this.selectedOptions.length - 1]);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    FuiMultiSelect.prototype.optionsUpdateHook = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._writtenOptions && this.selectedOptions.length > 0) {
            // We need to check the options still exist.
            this.writeValue(this.selectedOptions.map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return _this.valueGetter(o); })));
        }
        if (this._writtenOptions && this.searchService.options.length > 0) {
            // If there were values written by ngModel before the options had been loaded, this runs to fix it.
            this.selectedOptions = this._writtenOptions
                // non-null assertion added here because Typescript doesn't recognise the non-null filter.
                .map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return (/** @type {?} */ (_this.findOption(_this.searchService.options, v))); }))
                .filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v != undefined; }));
            if (this.selectedOptions.length === this._writtenOptions.length) {
                this._writtenOptions = undefined;
            }
        }
    };
    /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    FuiMultiSelect.prototype.initialiseRenderedOption = /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    function (option) {
        _super.prototype.initialiseRenderedOption.call(this, option);
        // Boldens the item so it appears selected in the dropdown.
        option.isActive = !this.hasLabels && this.selectedOptions.indexOf(option.value) !== -1;
    };
    FuiMultiSelect.decorators = [
        { type: Component, args: [{
                    selector: 'fui-multi-select',
                    template: "\n<!-- Dropdown icon -->\n<i class=\"{{ icon }} icon\" (click)=\"onCaretClick($event)\"></i>\n\n<ng-container *ngIf=\"hasLabels\">\n<!-- Multi-select labels -->\n    <fui-multi-select-label *ngFor=\"let selected of selectedOptions;\"\n                            [value]=\"selected\"\n                            [query]=\"query\"\n                            [formatter]=\"configuredFormatter\"\n                            [template]=\"optionTemplate\"\n                            (deselected)=\"deselectOption($event)\"></fui-multi-select-label>\n</ng-container>\n\n<!-- Query input -->\n<input fuiSelectSearch\n       type=\"text\"\n       [hidden]=\"!isSearchable || isSearchExternal\">\n\n<!-- Helper text -->\n<div class=\"text\"\n     [class.default]=\"hasLabels\"\n     [class.filtered]=\"!!query && !isSearchExternal\">\n\n    <!-- Placeholder text -->\n    <ng-container *ngIf=\"hasLabels; else selectedBlock\">{{ placeholder }}</ng-container>\n\n    <!-- Summary shown when labels are hidden -->\n    <ng-template #selectedBlock> {{ selectedMessage }}</ng-template>\n</div>\n\n<!-- Select dropdown menu -->\n<div class=\"menu\"\n     fuiDropdownMenu\n     [menuTransition]=\"transition\"\n     [menuTransitionDuration]=\"transitionDuration\"\n     [menuAutoSelectFirst]=\"true\">\n\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"availableOptions.length == 0 \">\n        <div *ngIf=\"!maxSelectedReached\" class=\"message\">{{ localeValues.noResultsMessage }}</div>\n        <div *ngIf=\"maxSelectedReached\" class=\"message\">{{ maxSelectedMessage }}</div>\n    </ng-container>\n</div>\n",
                    styles: ["\n:host input.search {\n    width: 12em !important;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    FuiMultiSelect.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FuiLocalizationService }
    ]; };
    FuiMultiSelect.propDecorators = {
        selectedOptionsChange: [{ type: Output }],
        maxSelected: [{ type: Input }],
        hasClasses: [{ type: HostBinding, args: ['class.multiple',] }],
        hasLabels: [{ type: Input }],
        showCountText: [{ type: Input }],
        placeholder: [{ type: Input }]
    };
    return FuiMultiSelect;
}(FuiSelectBase));
export { FuiMultiSelect };
if (false) {
    /** @type {?} */
    FuiMultiSelect.prototype.selectedOptions;
    /** @type {?} */
    FuiMultiSelect.prototype.selectedOptionsChange;
    /** @type {?} */
    FuiMultiSelect.prototype.maxSelected;
    /** @type {?} */
    FuiMultiSelect.prototype.hasClasses;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelect.prototype._writtenOptions;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelect.prototype._hasLabels;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelect.prototype._showCountText;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelect.prototype._placeholder;
}
// Value accessor directive for the select to support ngModel.
/**
 * @template T, U
 */
var FuiMultiSelectValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiMultiSelectValueAccessor, _super);
    function FuiMultiSelectValueAccessor(host) {
        return _super.call(this, host) || this;
    }
    FuiMultiSelectValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'fui-multi-select',
                    host: {
                        '(selectedOptionsChange)': 'onChange($event)',
                        '(touched)': 'onTouched()'
                    },
                    providers: [customValueAccessorFactory(FuiMultiSelectValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiMultiSelectValueAccessor.ctorParameters = function () { return [
        { type: FuiMultiSelect }
    ]; };
    return FuiMultiSelectValueAccessor;
}(CustomValueAccessor));
export { FuiMultiSelectValueAccessor };
//# sourceMappingURL=data:application/json;base64,