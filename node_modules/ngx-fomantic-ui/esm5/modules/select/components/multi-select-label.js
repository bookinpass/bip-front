/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { FuiTransition, Transition, TransitionController, TransitionDirection } from '../../transition/internal';
import { HandledEvent, FuiComponentFactory } from '../../../misc/util/internal';
// See https://github.com/Microsoft/TypeScript/issues/13449.
/** @type {?} */
var templateRef = TemplateRef;
/**
 * @template T
 */
var FuiMultiSelectLabel = /** @class */ (function (_super) {
    tslib_1.__extends(FuiMultiSelectLabel, _super);
    function FuiMultiSelectLabel(renderer, element, changeDetector, componentFactory) {
        var _this = _super.call(this, renderer, element, changeDetector) || this;
        _this.componentFactory = componentFactory;
        // Initialise transition functionality.
        _this._transitionController = new TransitionController(false, 'inline-block');
        _this.setTransitionController(_this._transitionController);
        _this.onDeselected = new EventEmitter();
        _this.hasClasses = true;
        _this._transitionController.animate(new Transition('scale', 100, TransitionDirection.In));
        return _this;
    }
    Object.defineProperty(FuiMultiSelectLabel.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            return this._template;
        },
        set: /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._template = template;
            if (this.template) {
                this.componentFactory.createView(this.templateSibling, this.template, {
                    $implicit: this.value,
                    query: this.query
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    FuiMultiSelectLabel.prototype.deselectOption = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        e.eventHandled = true;
        this._transitionController.animate(new Transition('scale', 100, TransitionDirection.Out, (/**
         * @return {?}
         */
        function () {
            return _this.onDeselected.emit(_this.value);
        })));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiMultiSelectLabel.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.eventHandled = true;
    };
    FuiMultiSelectLabel.decorators = [
        { type: Component, args: [{
                    selector: 'fui-multi-select-label',
                    template: "\n<span #templateSibling></span>\n<span *ngIf=\"!template\" [innerHTML]=\"formatter(value)\"></span>\n<i class=\"delete icon\" (click)=\"deselectOption($event)\"></i>\n"
                }] }
    ];
    /** @nocollapse */
    FuiMultiSelectLabel.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: FuiComponentFactory }
    ]; };
    FuiMultiSelectLabel.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.label',] }],
        value: [{ type: Input }],
        query: [{ type: Input }],
        onDeselected: [{ type: Output, args: ['deselected',] }],
        formatter: [{ type: Input }],
        templateSibling: [{ type: ViewChild, args: ['templateSibling', { read: ViewContainerRef, static: false },] }],
        template: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FuiMultiSelectLabel;
}(FuiTransition));
export { FuiMultiSelectLabel };
if (false) {
    /** @type {?} */
    FuiMultiSelectLabel.prototype.hasClasses;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.value;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.query;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.onDeselected;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.formatter;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.templateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelectLabel.prototype._transitionController;
    /**
     * @type {?}
     * @private
     */
    FuiMultiSelectLabel.prototype._template;
    /** @type {?} */
    FuiMultiSelectLabel.prototype.componentFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWxhYmVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zZWxlY3QvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QtbGFiZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsV0FBVyxFQUNYLFNBQVMsRUFDVCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRyxPQUFPLEVBQUMsWUFBWSxFQUFFLG1CQUFtQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7OztJQUl4RSxXQUFXLEdBQUcsV0FBVzs7OztBQUUvQjtJQVE0QywrQ0FBYTtJQXFCdkQsNkJBQVksUUFBbUIsRUFDbkIsT0FBbUIsRUFDbkIsY0FBaUMsRUFDMUIsZ0JBQXFDO1FBSHhELFlBS0Usa0JBQU0sUUFBUSxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsU0FXekM7UUFia0Isc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFxQjtRQUl0RCx1Q0FBdUM7UUFDdkMsS0FBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksb0JBQW9CLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzdFLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUV6RCxLQUFJLENBQUMsWUFBWSxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFFMUMsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFdkIsS0FBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0lBQzNGLENBQUM7SUFJRCxzQkFDVyx5Q0FBUTs7OztRQURuQjtZQUVFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQUVELFVBQW9CLFFBQW9EO1lBQ3RFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ3BFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSztvQkFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2lCQUNsQixDQUFDLENBQUM7YUFDSjtRQUNILENBQUM7OztPQVZBOzs7OztJQVlNLDRDQUFjOzs7O0lBQXJCLFVBQXNCLENBQWU7UUFBckMsaUJBTUM7UUFMQyxDQUFDLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUV0QixJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUNoQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLEdBQUc7OztRQUFFO1lBQ3BELE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQztRQUFsQyxDQUFrQyxFQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUdNLHFDQUFPOzs7O0lBRGQsVUFDZSxDQUFlO1FBQzVCLENBQUMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7O2dCQTNFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsUUFBUSxFQUFFLDBLQUlYO2lCQUNBOzs7O2dCQW5CQyxTQUFTO2dCQU5ULFVBQVU7Z0JBRlYsaUJBQWlCO2dCQWNHLG1CQUFtQjs7OzZCQWlCdEMsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGFBQWE7d0JBRXpCLEtBQUs7d0JBSUwsS0FBSzsrQkFFTCxNQUFNLFNBQUMsWUFBWTs0QkFFbkIsS0FBSztrQ0FHTCxTQUFTLFNBQUMsaUJBQWlCLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQzsyQkF3QnBFLEtBQUs7MEJBdUJMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBSW5DLDBCQUFDO0NBQUEsQUE1RUQsQ0FRNEMsYUFBYSxHQW9FeEQ7U0FwRVksbUJBQW1COzs7SUFHOUIseUNBRW9DOztJQUNwQyxvQ0FDZ0I7O0lBR2hCLG9DQUNzQjs7SUFDdEIsMkNBQ3FDOztJQUNyQyx3Q0FDcUM7O0lBRXJDLDhDQUN5Qzs7Ozs7SUFDekMsb0RBQW9EOzs7OztJQW9CcEQsd0NBQW1EOztJQWZ2QywrQ0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIFJlbmRlcmVyMixcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q2hpbGQsXHJcbiAgVmlld0NvbnRhaW5lclJlZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Z1aVRyYW5zaXRpb24sIFRyYW5zaXRpb24sIFRyYW5zaXRpb25Db250cm9sbGVyLCBUcmFuc2l0aW9uRGlyZWN0aW9ufSBmcm9tICcuLi8uLi90cmFuc2l0aW9uL2ludGVybmFsJztcclxuaW1wb3J0IHtIYW5kbGVkRXZlbnQsIEZ1aUNvbXBvbmVudEZhY3Rvcnl9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7SU9wdGlvbkNvbnRleHR9IGZyb20gJy4uL2NsYXNzZXMvc2VsZWN0LWJhc2UnO1xyXG5cclxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM0NDkuXHJcbmNvbnN0IHRlbXBsYXRlUmVmID0gVGVtcGxhdGVSZWY7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1tdWx0aS1zZWxlY3QtbGFiZWwnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxzcGFuICN0ZW1wbGF0ZVNpYmxpbmc+PC9zcGFuPlxyXG48c3BhbiAqbmdJZj1cIiF0ZW1wbGF0ZVwiIFtpbm5lckhUTUxdPVwiZm9ybWF0dGVyKHZhbHVlKVwiPjwvc3Bhbj5cclxuPGkgY2xhc3M9XCJkZWxldGUgaWNvblwiIChjbGljayk9XCJkZXNlbGVjdE9wdGlvbigkZXZlbnQpXCI+PC9pPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlNdWx0aVNlbGVjdExhYmVsPFQ+IGV4dGVuZHMgRnVpVHJhbnNpdGlvbiB7XHJcblxyXG4gIC8vIERvaW5nIGl0IG9uIHRoZSBob3N0IGVuYWJsZXMgdXNlIGluIG1lbnVzIGV0Yy5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnVpJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmxhYmVsJylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB2YWx1ZTogVDtcclxuXHJcbiAgLy8gU2V0cyB0aGUgRm9tYW50aWMgVUkgY2xhc3NlcyBvbiB0aGUgaG9zdCBlbGVtZW50LlxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHF1ZXJ5Pzogc3RyaW5nO1xyXG4gIEBPdXRwdXQoJ2Rlc2VsZWN0ZWQnKVxyXG4gIHB1YmxpYyBvbkRlc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxUPjtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBmb3JtYXR0ZXI6IChvYmo6IFQpID0+IHN0cmluZztcclxuICAvLyBQbGFjZWhvbGRlciB0byBkcmF3IHRlbXBsYXRlIGJlc2lkZS5cclxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVNpYmxpbmcnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZX0pXHJcbiAgcHVibGljIHRlbXBsYXRlU2libGluZzogVmlld0NvbnRhaW5lclJlZjtcclxuICBwcml2YXRlIF90cmFuc2l0aW9uQ29udHJvbGxlcjogVHJhbnNpdGlvbkNvbnRyb2xsZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgcHVibGljIGNvbXBvbmVudEZhY3Rvcnk6IEZ1aUNvbXBvbmVudEZhY3RvcnkpIHtcclxuXHJcbiAgICBzdXBlcihyZW5kZXJlciwgZWxlbWVudCwgY2hhbmdlRGV0ZWN0b3IpO1xyXG5cclxuICAgIC8vIEluaXRpYWxpc2UgdHJhbnNpdGlvbiBmdW5jdGlvbmFsaXR5LlxyXG4gICAgdGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIgPSBuZXcgVHJhbnNpdGlvbkNvbnRyb2xsZXIoZmFsc2UsICdpbmxpbmUtYmxvY2snKTtcclxuICAgIHRoaXMuc2V0VHJhbnNpdGlvbkNvbnRyb2xsZXIodGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIpO1xyXG5cclxuICAgIHRoaXMub25EZXNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIuYW5pbWF0ZShuZXcgVHJhbnNpdGlvbignc2NhbGUnLCAxMDAsIFRyYW5zaXRpb25EaXJlY3Rpb24uSW4pKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3RlbXBsYXRlPzogVGVtcGxhdGVSZWY8SU9wdGlvbkNvbnRleHQ8VD4+O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8SU9wdGlvbkNvbnRleHQ8VD4+IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdGVtcGxhdGUodGVtcGxhdGU6IFRlbXBsYXRlUmVmPElPcHRpb25Db250ZXh0PFQ+PiB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5fdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcclxuICAgIGlmICh0aGlzLnRlbXBsYXRlKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50RmFjdG9yeS5jcmVhdGVWaWV3KHRoaXMudGVtcGxhdGVTaWJsaW5nLCB0aGlzLnRlbXBsYXRlLCB7XHJcbiAgICAgICAgJGltcGxpY2l0OiB0aGlzLnZhbHVlLFxyXG4gICAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlc2VsZWN0T3B0aW9uKGU6IEhhbmRsZWRFdmVudCk6IHZvaWQge1xyXG4gICAgZS5ldmVudEhhbmRsZWQgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuX3RyYW5zaXRpb25Db250cm9sbGVyLmFuaW1hdGUoXHJcbiAgICAgIG5ldyBUcmFuc2l0aW9uKCdzY2FsZScsIDEwMCwgVHJhbnNpdGlvbkRpcmVjdGlvbi5PdXQsICgpID0+XHJcbiAgICAgICAgdGhpcy5vbkRlc2VsZWN0ZWQuZW1pdCh0aGlzLnZhbHVlKSkpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbkNsaWNrKGU6IEhhbmRsZWRFdmVudCk6IHZvaWQge1xyXG4gICAgZS5ldmVudEhhbmRsZWQgPSB0cnVlO1xyXG4gIH1cclxufVxyXG4iXX0=