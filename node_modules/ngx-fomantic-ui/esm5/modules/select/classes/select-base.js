/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, EventEmitter, HostBinding, HostListener, Input, Output, QueryList, TemplateRef, ViewChild } from '@angular/core';
import { DropdownService, FuiDropdownMenu } from '../../dropdown/internal';
import { SearchService } from '../../search/internal';
import { HandledEvent, KeyCode, Util } from '../../../misc/util/internal';
import { FuiSelectOption } from '../components/select-option';
import { FuiSelectSearch } from '../directives/select-search';
/**
 * @record
 * @template T
 */
export function IOptionContext() { }
if (false) {
    /** @type {?|undefined} */
    IOptionContext.prototype.query;
}
// We use generic type T to smenuTransitionDurationpecify the type of the options we are working with,
// and U to specify the type of the property of the option used as the value.
/**
 * @abstract
 * @template T, U
 */
var FuiSelectBase = /** @class */ (function () {
    function FuiSelectBase(_element, _localizationService) {
        var _this = this;
        this._element = _element;
        this._localizationService = _localizationService;
        this.dropdownService = new DropdownService();
        // We do want an empty query to return all results.
        this.searchService = new SearchService(true);
        this.isSearchable = false;
        this.onLocaleUpdate();
        this._localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        function () { return _this.onLocaleUpdate(); }));
        this._renderedSubscriptions = [];
        this.icon = 'dropdown';
        this.transition = 'slide down';
        this.transitionDuration = 200;
        this.onTouched = new EventEmitter();
        this.hasClasses = true;
    }
    Object.defineProperty(FuiSelectBase.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dropdownService.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menu.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "hasSearchClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSearchable && !this.isSearchExternal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "isSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.isSearching;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "isClearing", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isClearable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "searchInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this._manualSearch || this._internalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "tabindex", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isDisabled) {
                // If disabled, remove from tabindex.
                return -1;
            }
            if (this.dropdownService.isOpen && this.isSearchExternal) {
                // If open & in menu search, remove from tabindex (as input always autofocusses).
                return -1;
            }
            if (this._tabIndex != undefined) {
                // If custom tabindex, default to that.
                return this._tabIndex;
            }
            if (this.hasSearchClass) {
                // If search input enabled, tab goes to input.
                return -1;
            }
            // Otherwise, return default of 0.
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dropdownService.isDisabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dropdownService.isDisabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options) {
                this.searchService.options = options;
                this.optionsUpdateHook();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "optionsFilter", {
        set: /**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            if (filter) {
                this.searchService.optionsFilter = filter;
                this.optionsUpdateHook();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "optionsLookup", {
        set: /**
         * @param {?} lookup
         * @return {?}
         */
        function (lookup) {
            if (lookup) {
                this.searchService.optionsLookup = lookup;
                this.optionsUpdateHook();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "filteredOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.results;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "availableOptions", {
        // Deprecated
        get: 
        // Deprecated
        /**
         * @return {?}
         */
        function () {
            return this.filteredOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "query", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSearchable ? this.searchService.query : undefined;
        },
        set: /**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            var _this = this;
            if (query != undefined) {
                this.queryUpdateHook();
                this.updateQuery(query);
                // Update the rendered text as query has changed.
                this._renderedOptions.forEach((/**
                 * @param {?} ro
                 * @return {?}
                 */
                function (ro) { return _this.initialiseRenderedOption(ro); }));
                if (this.searchInput) {
                    this.searchInput.query = query;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "labelField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchService.optionsField;
        },
        set: /**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            this.searchService.optionsField = field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "labelGetter", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            // Helper function to retrieve the label from an item.
            return (/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                /** @type {?} */
                var label = Util.Object.readValue(obj, _this.labelField);
                if (label != undefined) {
                    return label.toString();
                }
                return '';
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "valueGetter", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            // Helper function to retrieve the value from an item.
            return (/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) { return Util.Object.readValue(obj, _this.valueField); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "configuredFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this._optionFormatter) {
                return (/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return (/** @type {?} */ (_this._optionFormatter))(o, _this.isSearchable ? _this.query : undefined); });
            }
            else if (this.searchService.optionsLookup) {
                return (/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return _this.labelGetter(o); });
            }
            else {
                return (/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return _this.searchService.highlightMatches(_this.labelGetter(o), _this.query || ''); });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "optionFormatter", {
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._optionFormatter = formatter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiSelectBase.prototype, "localeValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localizationService.override(this._localeValues, this.localeOverrides);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FuiSelectBase.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._menu.service = this.dropdownService;
        // We manually specify the menu items to the menu because the @ContentChildren doesn't pick up our dynamically rendered items.
        this._menu.items = this._renderedOptions;
        this._menu.parentElement = this._element;
        if (this._manualSearch) {
            this.isSearchable = true;
            this.isSearchExternal = true;
        }
        if (this.searchInput) {
            this.searchInput.onQueryUpdated.subscribe((/**
             * @param {?} q
             * @return {?}
             */
            function (q) { return _this.query = q; }));
            this.searchInput.onQueryKeyDown.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.onQueryInputKeydown(e); }));
        }
        // We must call this immediately as changes doesn't fire when you subscribe.
        this.onAvailableOptionsRendered();
        this._renderedOptions.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.onAvailableOptionsRendered(); }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectBase.prototype.onCaretClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            if (!this.dropdownService.isAnimating) {
                this.dropdownService.setOpenState(!this.dropdownService.isOpen);
                this.focus();
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectBase.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled && !this.dropdownService.isAnimating) {
            e.eventHandled = true;
            // If the dropdown is searchable, clicking should keep it open, otherwise we toggle the open state.
            this.dropdownService.setOpenState(this.isSearchable ? true : !this.dropdownService.isOpen);
            // Immediately focus the search input whenever clicking on the select.
            this.focus();
        }
    };
    /**
     * @return {?}
     */
    FuiSelectBase.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (!this.dropdownService.isOpen && !this.dropdownService.isAnimating) {
            this.dropdownService.setOpenState(true);
            this.focus();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectBase.prototype.onFocusOut = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.dropdownService.setOpenState(false);
            this.onTouched.emit();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectBase.prototype.onKeyPress = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.keyCode === KeyCode.Enter) {
            // Enables support for focussing and opening with the keyboard alone.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this._element.nativeElement.click();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectBase.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.dropdownService.isOpen && e.keyCode === KeyCode.Down) {
            // Enables support for focussing and opening with the keyboard alone.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this._element.nativeElement.click();
            e.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FuiSelectBase.prototype.onQueryInputKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @return {?}
     */
    FuiSelectBase.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._renderedSubscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
    };
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    FuiSelectBase.prototype.optionsUpdateHook = 
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    function () {
    };
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    FuiSelectBase.prototype.queryUpdateHook = 
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    function () {
    };
    /**
     * @protected
     * @param {?} query
     * @return {?}
     */
    FuiSelectBase.prototype.updateQuery = /**
     * @protected
     * @param {?} query
     * @return {?}
     */
    function (query) {
        var _this = this;
        // Update the query then open the dropdown, as after keyboard input it should always be open.
        this.searchService.updateQuery(query, (/**
         * @return {?}
         */
        function () {
            return _this.dropdownService.setOpenState(true);
        }));
    };
    /**
     * @protected
     * @param {?=} delayed
     * @return {?}
     */
    FuiSelectBase.prototype.resetQuery = /**
     * @protected
     * @param {?=} delayed
     * @return {?}
     */
    function (delayed) {
        if (delayed === void 0) { delayed = true; }
        // The search delay is set to the transition duration to ensure results
        // aren't rendered as the select closes as that causes a sudden flash.
        if (delayed) {
            this.searchService.searchDelay = this._menu.menuTransitionDuration;
            this.searchService.updateQueryDelayed('');
        }
        else {
            this.searchService.updateQuery('');
        }
        if (this.searchInput) {
            this.searchInput.query = '';
        }
    };
    /**
     * @protected
     * @return {?}
     */
    FuiSelectBase.prototype.onAvailableOptionsRendered = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        // Unsubscribe from all previous subscriptions to avoid memory leaks on large selects.
        this._renderedSubscriptions.forEach((/**
         * @param {?} rs
         * @return {?}
         */
        function (rs) { return rs.unsubscribe(); }));
        this._renderedSubscriptions = [];
        this._renderedOptions.forEach((/**
         * @param {?} ro
         * @return {?}
         */
        function (ro) {
            // Slightly delay initialisation to avoid change after checked errors. TODO - look into avoiding this!
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.initialiseRenderedOption(ro); }));
            _this._renderedSubscriptions.push(ro.onSelected.subscribe((/**
             * @return {?}
             */
            function () { return _this.selectOption(ro.value); })));
        }));
        // If no options have been provided, autogenerate them from the rendered ones.
        if (this.searchService.options.length === 0 && !this.searchService.optionsLookup) {
            this.options = this._renderedOptions.map((/**
             * @param {?} ro
             * @return {?}
             */
            function (ro) { return ro.value; }));
        }
    };
    /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    FuiSelectBase.prototype.initialiseRenderedOption = /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    function (option) {
        option.usesTemplate = !!this.optionTemplate;
        option.formatter = this.configuredFormatter;
        if (option.usesTemplate) {
            this.drawTemplate(option.templateSibling, option.value);
        }
        option.changeDetector.markForCheck();
    };
    /**
     * @protected
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    FuiSelectBase.prototype.findOption = /**
     * @protected
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    function (options, value) {
        var _this = this;
        // Tries to find an option in options array
        return options.find((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return value === _this.valueGetter(o); }));
    };
    /**
     * @protected
     * @return {?}
     */
    FuiSelectBase.prototype.focus = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.isSearchable && this.searchInput) {
            // Focusses the search input only when searchable.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this.searchInput.focus();
        }
        else {
            this._element.nativeElement.focus();
        }
    };
    // Helper that draws the provided template beside the provided ViewContainerRef.
    // Helper that draws the provided template beside the provided ViewContainerRef.
    /**
     * @protected
     * @param {?} siblingRef
     * @param {?} value
     * @return {?}
     */
    FuiSelectBase.prototype.drawTemplate = 
    // Helper that draws the provided template beside the provided ViewContainerRef.
    /**
     * @protected
     * @param {?} siblingRef
     * @param {?} value
     * @return {?}
     */
    function (siblingRef, value) {
        siblingRef.clear();
        // Use of `$implicit` means use of <ng-template let-option> syntax is supported.
        siblingRef.createEmbeddedView(this.optionTemplate, {
            $implicit: value,
            query: this.query
        });
    };
    /**
     * @private
     * @return {?}
     */
    FuiSelectBase.prototype.onLocaleUpdate = /**
     * @private
     * @return {?}
     */
    function () {
        this._localeValues = this._localizationService.get().select;
    };
    FuiSelectBase.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.dropdown',] }],
        isClearable: [{ type: Input }],
        isSearchable: [{ type: Input }],
        valueField: [{ type: Input }],
        optionTemplate: [{ type: Input }],
        icon: [{ type: Input }],
        transition: [{ type: Input }],
        transitionDuration: [{ type: Input }],
        onTouched: [{ type: Output, args: ['touched',] }],
        _menu: [{ type: ViewChild, args: [FuiDropdownMenu, { static: true },] }],
        _renderedOptions: [{ type: ContentChildren, args: [FuiSelectOption, { descendants: true },] }],
        _internalSearch: [{ type: ViewChild, args: [FuiSelectSearch, { static: false },] }],
        _manualSearch: [{ type: ContentChild, args: [FuiSelectSearch, { static: false },] }],
        _tabIndex: [{ type: Input, args: ['tabindex',] }],
        isActive: [{ type: HostBinding, args: ['class.active',] }],
        isVisible: [{ type: HostBinding, args: ['class.visible',] }],
        hasSearchClass: [{ type: HostBinding, args: ['class.search',] }],
        isSearching: [{ type: HostBinding, args: ['class.loading',] }],
        isClearing: [{ type: HostBinding, args: ['class.clearable',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        options: [{ type: Input }],
        optionsFilter: [{ type: Input }],
        optionsLookup: [{ type: Input }],
        labelField: [{ type: Input }],
        optionFormatter: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }],
        onKeyPress: [{ type: HostListener, args: ['keypress', ['$event'],] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return FuiSelectBase;
}());
export { FuiSelectBase };
if (false) {
    /** @type {?} */
    FuiSelectBase.prototype.dropdownService;
    /** @type {?} */
    FuiSelectBase.prototype.searchService;
    /** @type {?} */
    FuiSelectBase.prototype.hasClasses;
    /** @type {?} */
    FuiSelectBase.prototype.isClearable;
    /** @type {?} */
    FuiSelectBase.prototype.isSearchable;
    /** @type {?} */
    FuiSelectBase.prototype.isSearchExternal;
    /** @type {?} */
    FuiSelectBase.prototype.valueField;
    /** @type {?} */
    FuiSelectBase.prototype.optionTemplate;
    /** @type {?} */
    FuiSelectBase.prototype.localeOverrides;
    /** @type {?} */
    FuiSelectBase.prototype.icon;
    /** @type {?} */
    FuiSelectBase.prototype.transition;
    /** @type {?} */
    FuiSelectBase.prototype.transitionDuration;
    /** @type {?} */
    FuiSelectBase.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._menu;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._renderedOptions;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._renderedSubscriptions;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._internalSearch;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._manualSearch;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._optionFormatter;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._localeValues;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._element;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._localizationService;
    /**
     * @abstract
     * @param {?} option
     * @return {?}
     */
    FuiSelectBase.prototype.selectOption = function (option) { };
}
//# sourceMappingURL=data:application/json;base64,