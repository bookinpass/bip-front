/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Renderer2 } from '@angular/core';
var FuiSelectSearch = /** @class */ (function () {
    function FuiSelectSearch(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this.onQueryUpdated = new EventEmitter();
        this.onQueryKeyDown = new EventEmitter();
        this.hasClasses = true;
        this.autoComplete = 'off';
    }
    Object.defineProperty(FuiSelectSearch.prototype, "query", {
        set: /**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            this._renderer.setProperty(this._element.nativeElement, 'value', query);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} query
     * @return {?}
     */
    FuiSelectSearch.prototype.updateQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        this.onQueryUpdated.emit(query);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiSelectSearch.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onQueryKeyDown.emit(e);
    };
    /**
     * @return {?}
     */
    FuiSelectSearch.prototype.focus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Slightly delay to support in menu search.
        this._element.nativeElement.focus();
        setTimeout((/**
         * @return {?}
         */
        function () { return _this._element.nativeElement.focus(); }));
    };
    FuiSelectSearch.decorators = [
        { type: Directive, args: [{
                    selector: 'input[fuiSelectSearch]'
                },] }
    ];
    /** @nocollapse */
    FuiSelectSearch.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FuiSelectSearch.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.search',] }],
        autoComplete: [{ type: HostBinding, args: ['attr.autocomplete',] }],
        updateQuery: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return FuiSelectSearch;
}());
export { FuiSelectSearch };
if (false) {
    /** @type {?} */
    FuiSelectSearch.prototype.hasClasses;
    /** @type {?} */
    FuiSelectSearch.prototype.autoComplete;
    /** @type {?} */
    FuiSelectSearch.prototype.onQueryUpdated;
    /** @type {?} */
    FuiSelectSearch.prototype.onQueryKeyDown;
    /**
     * @type {?}
     * @private
     */
    FuiSelectSearch.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiSelectSearch.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LXNlYXJjaC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2VsZWN0L2RpcmVjdGl2ZXMvc2VsZWN0LXNlYXJjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXhHO0lBWUUseUJBQW9CLFNBQW9CLEVBQVUsUUFBb0I7UUFBbEQsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7UUFFeEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELHNCQUFXLGtDQUFLOzs7OztRQUFoQixVQUFpQixLQUFhO1lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxRSxDQUFDOzs7T0FBQTs7Ozs7SUFHTSxxQ0FBVzs7OztJQURsQixVQUNtQixLQUFhO1FBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBR00sbUNBQVM7Ozs7SUFEaEIsVUFDaUIsQ0FBZ0I7UUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVNLCtCQUFLOzs7SUFBWjtRQUFBLGlCQUlDO1FBSEMsNENBQTRDO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BDLFVBQVU7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBbkMsQ0FBbUMsRUFBQyxDQUFDO0lBQ3hELENBQUM7O2dCQXRDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtpQkFDbkM7Ozs7Z0JBSnVFLFNBQVM7Z0JBQTlELFVBQVU7Ozs2QkFNMUIsV0FBVyxTQUFDLGNBQWM7K0JBRzFCLFdBQVcsU0FBQyxtQkFBbUI7OEJBaUIvQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7NEJBSzdDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBVXJDLHNCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0FwQ1ksZUFBZTs7O0lBQzFCLHFDQUNvQzs7SUFFcEMsdUNBQ3FDOztJQUNyQyx5Q0FBNEM7O0lBQzVDLHlDQUFtRDs7Ozs7SUFFdkMsb0NBQTRCOzs7OztJQUFFLG1DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2lucHV0W2Z1aVNlbGVjdFNlYXJjaF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlTZWxlY3RTZWFyY2gge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2VhcmNoJylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmF1dG9jb21wbGV0ZScpXHJcbiAgcHVibGljIHJlYWRvbmx5IGF1dG9Db21wbGV0ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBvblF1ZXJ5VXBkYXRlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgcHVibGljIG9uUXVlcnlLZXlEb3duOiBFdmVudEVtaXR0ZXI8S2V5Ym9hcmRFdmVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMub25RdWVyeVVwZGF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICAgIHRoaXMub25RdWVyeUtleURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPEtleWJvYXJkRXZlbnQ+KCk7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICAgIHRoaXMuYXV0b0NvbXBsZXRlID0gJ29mZic7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgcXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudC50YXJnZXQudmFsdWUnXSlcclxuICBwdWJsaWMgdXBkYXRlUXVlcnkocXVlcnk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5vblF1ZXJ5VXBkYXRlZC5lbWl0KHF1ZXJ5KTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5vblF1ZXJ5S2V5RG93bi5lbWl0KGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZvY3VzKCk6IHZvaWQge1xyXG4gICAgLy8gU2xpZ2h0bHkgZGVsYXkgdG8gc3VwcG9ydCBpbiBtZW51IHNlYXJjaC5cclxuICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==