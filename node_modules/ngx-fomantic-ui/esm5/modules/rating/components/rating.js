/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
var FuiRating = /** @class */ (function () {
    function FuiRating() {
        this.hoveredIndex = -1;
        this.value = 0;
        this.valueChange = new EventEmitter();
        this.type = 'star';
        this.maximum = 5;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    Object.defineProperty(FuiRating.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:prefer-literal
            return new Array(this.maximum);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiRating.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FuiRating.prototype, "maximum", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maximum;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maximum = +value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} i
     * @return {?}
     */
    FuiRating.prototype.onClick = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        if (!this.isReadonly) {
            this.value = i + 1;
            this.valueChange.emit(this.value);
        }
    };
    /**
     * @param {?} i
     * @return {?}
     */
    FuiRating.prototype.onMouseover = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.hoveredIndex = i;
    };
    /**
     * @return {?}
     */
    FuiRating.prototype.onMouseout = /**
     * @return {?}
     */
    function () {
        this.hoveredIndex = -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FuiRating.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    FuiRating.decorators = [
        { type: Component, args: [{
                    selector: 'fui-rating',
                    // tslint:disable-next-line
                    template: "<i *ngFor=\"let icon of icons; let i = index\" class=\"icon {{type}}\" (mouseover)=\"onMouseover(i)\" (click)=\"onClick(i)\" [class.selected]=\"hoveredIndex >= i && !isReadonly\" [class.active]=\"value > i\"></i>",
                    styles: ["\n:host.read-only .icon {\n    cursor: auto\n}\n"]
                }] }
    ];
    /** @nocollapse */
    FuiRating.ctorParameters = function () { return []; };
    FuiRating.propDecorators = {
        hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.rating',] }],
        valueChange: [{ type: Output }],
        isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
        type: [{ type: Input }],
        maximum: [{ type: Input }],
        onMouseout: [{ type: HostListener, args: ['mouseout',] }]
    };
    return FuiRating;
}());
export { FuiRating };
if (false) {
    /** @type {?} */
    FuiRating.prototype.hasClasses;
    /** @type {?} */
    FuiRating.prototype.value;
    /** @type {?} */
    FuiRating.prototype.valueChange;
    /** @type {?} */
    FuiRating.prototype.isReadonly;
    /** @type {?} */
    FuiRating.prototype.hoveredIndex;
    /**
     * @type {?}
     * @private
     */
    FuiRating.prototype._type;
    /**
     * @type {?}
     * @private
     */
    FuiRating.prototype._maximum;
}
var FuiRatingValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(FuiRatingValueAccessor, _super);
    function FuiRatingValueAccessor(host) {
        return _super.call(this, host) || this;
    }
    FuiRatingValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'fui-rating',
                    host: { '(valueChange)': 'onChange($event)' },
                    providers: [customValueAccessorFactory(FuiRatingValueAccessor)]
                },] }
    ];
    /** @nocollapse */
    FuiRatingValueAccessor.ctorParameters = function () { return [
        { type: FuiRating }
    ]; };
    return FuiRatingValueAccessor;
}(CustomValueAccessor));
export { FuiRatingValueAccessor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9yYXRpbmcvY29tcG9uZW50cy9yYXRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNHLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSwwQkFBMEIsRUFBMkIsTUFBTSw2QkFBNkIsQ0FBQztBQUV0SDtJQXVCRTtRQUZPLGlCQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFHdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFOUMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELHNCQUFXLDRCQUFLOzs7O1FBQWhCO1lBQ0UsMENBQTBDO1lBQzFDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBSUQsc0JBQ1csMkJBQUk7Ozs7UUFEZjtZQUVFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDOzs7OztRQUVELFVBQWdCLEtBQWE7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDckIsQ0FBQzs7O09BSkE7SUFRRCxzQkFDVyw4QkFBTzs7OztRQURsQjtZQUVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7OztRQUVELFVBQW1CLEtBQWE7WUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN6QixDQUFDOzs7T0FKQTs7Ozs7SUFNTSwyQkFBTzs7OztJQUFkLFVBQWUsQ0FBUztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Ozs7SUFFTSwrQkFBVzs7OztJQUFsQixVQUFtQixDQUFTO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFHTSw4QkFBVTs7O0lBRGpCO1FBRUUsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVNLDhCQUFVOzs7O0lBQWpCLFVBQWtCLEtBQWE7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7Z0JBL0VGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTs7b0JBRXRCLFFBQVEsRUFBRSxzTkFBME07NkJBQzNNLGtEQUlWO2lCQUNBOzs7Ozs2QkFHRSxXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsY0FBYzs4QkFHMUIsTUFBTTs2QkFFTixXQUFXLFNBQUMsaUJBQWlCLGNBQzdCLEtBQUs7dUJBc0JMLEtBQUs7MEJBV0wsS0FBSzs2QkFvQkwsWUFBWSxTQUFDLFVBQVU7O0lBUTFCLGdCQUFDO0NBQUEsQUFoRkQsSUFnRkM7U0F0RVksU0FBUzs7O0lBRXBCLCtCQUVvQzs7SUFDcEMsMEJBQXFCOztJQUNyQixnQ0FDeUM7O0lBQ3pDLCtCQUUyQjs7SUFDM0IsaUNBQXlCOzs7OztJQWtCekIsMEJBQXNCOzs7OztJQVd0Qiw2QkFBeUI7O0FBZ0MzQjtJQUs0QyxrREFBc0M7SUFDaEYsZ0NBQVksSUFBZTtlQUN6QixrQkFBTSxJQUFJLENBQUM7SUFDYixDQUFDOztnQkFSRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLElBQUksRUFBRSxFQUFDLGVBQWUsRUFBRSxrQkFBa0IsRUFBQztvQkFDM0MsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztpQkFDaEU7Ozs7Z0JBRW1CLFNBQVM7O0lBRzdCLDZCQUFDO0NBQUEsQUFURCxDQUs0QyxtQkFBbUIsR0FJOUQ7U0FKWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0N1c3RvbVZhbHVlQWNjZXNzb3IsIGN1c3RvbVZhbHVlQWNjZXNzb3JGYWN0b3J5LCBJQ3VzdG9tVmFsdWVBY2Nlc3Nvckhvc3R9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1yYXRpbmcnLFxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gIHRlbXBsYXRlOiBgPGkgKm5nRm9yPVwibGV0IGljb24gb2YgaWNvbnM7IGxldCBpID0gaW5kZXhcIiBjbGFzcz1cImljb24ge3t0eXBlfX1cIiAobW91c2VvdmVyKT1cIm9uTW91c2VvdmVyKGkpXCIgKGNsaWNrKT1cIm9uQ2xpY2soaSlcIiBbY2xhc3Muc2VsZWN0ZWRdPVwiaG92ZXJlZEluZGV4ID49IGkgJiYgIWlzUmVhZG9ubHlcIiBbY2xhc3MuYWN0aXZlXT1cInZhbHVlID4gaVwiPjwvaT5gLFxyXG4gIHN0eWxlczogW2BcclxuOmhvc3QucmVhZC1vbmx5IC5pY29uIHtcclxuICAgIGN1cnNvcjogYXV0b1xyXG59XHJcbmBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlSYXRpbmcgaW1wbGVtZW50cyBJQ3VzdG9tVmFsdWVBY2Nlc3Nvckhvc3Q8bnVtYmVyPiB7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MudWknKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmF0aW5nJylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcclxuICBAT3V0cHV0KClcclxuICBwdWJsaWMgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmVhZC1vbmx5JylcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpc1JlYWRvbmx5OiBib29sZWFuO1xyXG4gIHB1YmxpYyBob3ZlcmVkSW5kZXggPSAtMTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gMDtcclxuICAgIHRoaXMudmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuXHJcbiAgICB0aGlzLnR5cGUgPSAnc3Rhcic7XHJcbiAgICB0aGlzLm1heGltdW0gPSA1O1xyXG4gICAgdGhpcy5pc1JlYWRvbmx5ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWNvbnMoKTogdW5kZWZpbmVkW10ge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1saXRlcmFsXHJcbiAgICByZXR1cm4gbmV3IEFycmF5KHRoaXMubWF4aW11bSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF90eXBlOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCB0eXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdHlwZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9tYXhpbXVtOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBtYXhpbXVtKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWF4aW11bTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgbWF4aW11bSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9tYXhpbXVtID0gK3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uQ2xpY2soaTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNSZWFkb25seSkge1xyXG4gICAgICB0aGlzLnZhbHVlID0gaSArIDE7XHJcbiAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBvbk1vdXNlb3ZlcihpOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuaG92ZXJlZEluZGV4ID0gaTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3V0JylcclxuICBwdWJsaWMgb25Nb3VzZW91dCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaG92ZXJlZEluZGV4ID0gLTE7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2Z1aS1yYXRpbmcnLFxyXG4gIGhvc3Q6IHsnKHZhbHVlQ2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQpJ30sXHJcbiAgcHJvdmlkZXJzOiBbY3VzdG9tVmFsdWVBY2Nlc3NvckZhY3RvcnkoRnVpUmF0aW5nVmFsdWVBY2Nlc3NvcildXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlSYXRpbmdWYWx1ZUFjY2Vzc29yIGV4dGVuZHMgQ3VzdG9tVmFsdWVBY2Nlc3NvcjxudW1iZXIsIEZ1aVJhdGluZz4ge1xyXG4gIGNvbnN0cnVjdG9yKGhvc3Q6IEZ1aVJhdGluZykge1xyXG4gICAgc3VwZXIoaG9zdCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==