/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Transition, TransitionController, TransitionDirection } from '../../../modules/transition/internal';
import { MessageConfig } from '../classes/message-config';
/**
 * @record
 */
export function IMessage() { }
if (false) {
    /**
     * @return {?}
     */
    IMessage.prototype.dismiss = function () { };
}
var FuiMessage = /** @class */ (function () {
    function FuiMessage() {
        /** @type {?} */
        var config = new MessageConfig('');
        this.loadConfig(config);
        this.isDynamic = false;
        this.transitionOutDuration = 300;
        this.timeoutProgress = 100;
        this.transitionController = new TransitionController(false);
        this.show();
    }
    Object.defineProperty(FuiMessage.prototype, "dynamicClasses", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var classes = {};
            classes[this.state] = true;
            if (this.isDynamic && this.hasProgress) {
                classes.attached = true;
            }
            (this.classes || '')
                .split(' ')
                .forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return classes[c] = true; }));
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} config
     * @return {?}
     */
    FuiMessage.prototype.loadConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.isDynamic = true;
        this.text = config.text;
        this.header = config.header;
        this.state = config.state;
        this.timeout = config.timeout;
        this.extendedTimeout = config.extendedTimeout;
        this.hasDismissButton = config.hasDismissButton;
        this.hasProgress = config.hasProgress;
        this.transition = config.transition;
        this.transitionInDuration = config.transitionInDuration;
        this.transitionOutDuration = config.transitionOutDuration;
        this.onClick = config.onClick;
        this.onDismiss = config.onDismiss;
    };
    /**
     * @return {?}
     */
    FuiMessage.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transitionController.stopAll();
        this.transitionController.animate(new Transition(this.transition, this.isDynamic ? this.transitionInDuration : 0, TransitionDirection.In, (/**
         * @return {?}
         */
        function () {
            if (_this.isDynamic) {
                _this.beginTimer(_this.timeout);
            }
        })));
    };
    /**
     * @return {?}
     */
    FuiMessage.prototype.dismiss = /**
     * @return {?}
     */
    function () {
        this.isDismissing = true;
        this.transitionOutDuration = this.transitionInDuration;
        this.hide();
    };
    /**
     * @return {?}
     */
    FuiMessage.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isClosing = true;
        this.transitionController.stopAll();
        this.transitionController.animate(new Transition(this.transition, this.transitionOutDuration, TransitionDirection.Out, (/**
         * @return {?}
         */
        function () {
            _this.isClosing = false;
            _this.onDismiss.emit();
        })));
    };
    /**
     * @param {?} timeout
     * @return {?}
     */
    FuiMessage.prototype.beginTimer = /**
     * @param {?} timeout
     * @return {?}
     */
    function (timeout) {
        var _this = this;
        if (this.isDynamic && !this.isDismissing) {
            this.timeoutProgress = 0;
            this.currentTimeout = timeout;
            this._displayTimeout = window.setTimeout((/**
             * @return {?}
             */
            function () { return _this.onTimedOut(); }), timeout);
        }
    };
    /**
     * @return {?}
     */
    FuiMessage.prototype.cancelTimer = /**
     * @return {?}
     */
    function () {
        if (this.isDynamic && !this.isDismissing) {
            this.timeoutProgress = 100;
            this.currentTimeout = 0;
            clearTimeout(this._displayTimeout);
            if (this.isClosing) {
                this.isClosing = false;
                this.transitionController.cancel();
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiMessage.prototype.onClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.eventHandled) {
            this.cancelTimer();
            this.onClick.emit();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FuiMessage.prototype.onDismissClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.eventHandled = true;
        this.dismiss();
    };
    /**
     * @private
     * @return {?}
     */
    FuiMessage.prototype.onTimedOut = /**
     * @private
     * @return {?}
     */
    function () {
        this.hide();
    };
    FuiMessage.decorators = [
        { type: Component, args: [{
                    selector: 'fui-message',
                    template: "\n<div [fuiTransition]=\"transitionController\">\n    <div class=\"ui message\"\n         [ngClass]=\"dynamicClasses\"\n         (mousemove)=\"cancelTimer()\"\n         (mouseleave)=\"beginTimer(extendedTimeout)\"\n         (click)=\"onClicked($event)\">\n        <i class=\"close icon\" *ngIf=\"hasDismissButton\" (click)=\"onDismissClicked($event)\"></i>\n        <ng-content></ng-content>\n        <ng-container *ngIf=\"isDynamic\">\n            <div class=\"header\" *ngIf=\"header\">{{ header }}</div>\n            <p>{{ text }}</p>\n        </ng-container>\n    </div>\n    <fui-progress *ngIf=\"isDynamic && hasProgress\"\n                  class=\"bottom attached\"\n                  [value]=\"timeoutProgress\"\n                  [autoSuccess]=\"false\"\n                  transition=\"linear\"\n                  [transitionDuration]=\"currentTimeout\"\n                  [canCompletelyEmpty]=\"true\"></fui-progress>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    FuiMessage.ctorParameters = function () { return []; };
    FuiMessage.propDecorators = {
        hasDismissButton: [{ type: Input }],
        transition: [{ type: Input }],
        transitionOutDuration: [{ type: Input, args: ['transitionDuration',] }],
        onClick: [{ type: Output, args: ['click',] }],
        onDismiss: [{ type: Output, args: ['dismiss',] }],
        classes: [{ type: Input, args: ['class',] }]
    };
    return FuiMessage;
}());
export { FuiMessage };
if (false) {
    /** @type {?} */
    FuiMessage.prototype.isDynamic;
    /** @type {?} */
    FuiMessage.prototype.isClosing;
    /** @type {?} */
    FuiMessage.prototype.isDismissing;
    /** @type {?} */
    FuiMessage.prototype.text;
    /** @type {?} */
    FuiMessage.prototype.header;
    /** @type {?} */
    FuiMessage.prototype.state;
    /** @type {?} */
    FuiMessage.prototype.timeout;
    /** @type {?} */
    FuiMessage.prototype.extendedTimeout;
    /** @type {?} */
    FuiMessage.prototype.currentTimeout;
    /** @type {?} */
    FuiMessage.prototype.hasDismissButton;
    /** @type {?} */
    FuiMessage.prototype.hasProgress;
    /** @type {?} */
    FuiMessage.prototype.timeoutProgress;
    /** @type {?} */
    FuiMessage.prototype.transitionController;
    /** @type {?} */
    FuiMessage.prototype.transition;
    /** @type {?} */
    FuiMessage.prototype.transitionInDuration;
    /** @type {?} */
    FuiMessage.prototype.transitionOutDuration;
    /** @type {?} */
    FuiMessage.prototype.onClick;
    /** @type {?} */
    FuiMessage.prototype.onDismiss;
    /** @type {?} */
    FuiMessage.prototype.classes;
    /**
     * @type {?}
     * @private
     */
    FuiMessage.prototype._displayTimeout;
}
//# sourceMappingURL=data:application/json;base64,