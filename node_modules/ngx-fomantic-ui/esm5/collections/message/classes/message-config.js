/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
/** @type {?} */
export var MessageState = {
    Default: (/** @type {?} */ ('')),
    Info: (/** @type {?} */ ('info')),
    Success: (/** @type {?} */ ('success')),
    Warning: (/** @type {?} */ ('warning')),
    Error: (/** @type {?} */ ('error'))
};
var MessageConfig = /** @class */ (function () {
    function MessageConfig(text, state, header) {
        if (state === void 0) { state = MessageState.Default; }
        this.text = text;
        this.state = state;
        this.header = header;
        this.timeout = 5000;
        this.extendedTimeout = 1000;
        this.hasDismissButton = true;
        this.hasProgress = false;
        this.transition = 'fade';
        this.transitionInDuration = 400;
        this.transitionOutDuration = 1000;
        this.onClick = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    return MessageConfig;
}());
export { MessageConfig };
if (false) {
    /** @type {?} */
    MessageConfig.prototype.text;
    /** @type {?} */
    MessageConfig.prototype.header;
    /** @type {?} */
    MessageConfig.prototype.state;
    /** @type {?} */
    MessageConfig.prototype.timeout;
    /** @type {?} */
    MessageConfig.prototype.extendedTimeout;
    /** @type {?} */
    MessageConfig.prototype.hasDismissButton;
    /** @type {?} */
    MessageConfig.prototype.hasProgress;
    /** @type {?} */
    MessageConfig.prototype.transition;
    /** @type {?} */
    MessageConfig.prototype.transitionInDuration;
    /** @type {?} */
    MessageConfig.prototype.transitionOutDuration;
    /** @type {?} */
    MessageConfig.prototype.onClick;
    /** @type {?} */
    MessageConfig.prototype.onDismiss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy9tZXNzYWdlL2NsYXNzZXMvbWVzc2FnZS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBSTNDLE1BQU0sS0FBTyxZQUFZLEdBQUc7SUFDMUIsT0FBTyxFQUFFLG1CQUFBLEVBQUUsRUFBZ0I7SUFDM0IsSUFBSSxFQUFFLG1CQUFBLE1BQU0sRUFBZ0I7SUFDNUIsT0FBTyxFQUFFLG1CQUFBLFNBQVMsRUFBZ0I7SUFDbEMsT0FBTyxFQUFFLG1CQUFBLFNBQVMsRUFBZ0I7SUFDbEMsS0FBSyxFQUFFLG1CQUFBLE9BQU8sRUFBZ0I7Q0FDL0I7QUFFRDtJQWtCRSx1QkFBWSxJQUFZLEVBQUUsS0FBMEMsRUFBRSxNQUFlO1FBQTNELHNCQUFBLEVBQUEsUUFBc0IsWUFBWSxDQUFDLE9BQU87UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUV6QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUN6QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFFbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUM1QyxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBcENELElBb0NDOzs7O0lBbkNDLDZCQUFvQjs7SUFDcEIsK0JBQXVCOztJQUN2Qiw4QkFBMkI7O0lBRTNCLGdDQUF1Qjs7SUFDdkIsd0NBQStCOztJQUUvQix5Q0FBaUM7O0lBQ2pDLG9DQUE0Qjs7SUFFNUIsbUNBQTBCOztJQUMxQiw2Q0FBb0M7O0lBQ3BDLDhDQUFxQzs7SUFFckMsZ0NBQW1DOztJQUNuQyxrQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgdHlwZSBNZXNzYWdlU3RhdGUgPSAnJyB8ICdpbmZvJyB8ICdzdWNjZXNzJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XHJcblxyXG5leHBvcnQgY29uc3QgTWVzc2FnZVN0YXRlID0ge1xyXG4gIERlZmF1bHQ6ICcnIGFzIE1lc3NhZ2VTdGF0ZSxcclxuICBJbmZvOiAnaW5mbycgYXMgTWVzc2FnZVN0YXRlLFxyXG4gIFN1Y2Nlc3M6ICdzdWNjZXNzJyBhcyBNZXNzYWdlU3RhdGUsXHJcbiAgV2FybmluZzogJ3dhcm5pbmcnIGFzIE1lc3NhZ2VTdGF0ZSxcclxuICBFcnJvcjogJ2Vycm9yJyBhcyBNZXNzYWdlU3RhdGVcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlQ29uZmlnIHtcclxuICBwdWJsaWMgdGV4dDogc3RyaW5nO1xyXG4gIHB1YmxpYyBoZWFkZXI/OiBzdHJpbmc7XHJcbiAgcHVibGljIHN0YXRlOiBNZXNzYWdlU3RhdGU7XHJcblxyXG4gIHB1YmxpYyB0aW1lb3V0OiBudW1iZXI7XHJcbiAgcHVibGljIGV4dGVuZGVkVGltZW91dDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgaGFzRGlzbWlzc0J1dHRvbjogYm9vbGVhbjtcclxuICBwdWJsaWMgaGFzUHJvZ3Jlc3M6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uOiBzdHJpbmc7XHJcbiAgcHVibGljIHRyYW5zaXRpb25JbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgcHVibGljIHRyYW5zaXRpb25PdXREdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgb25DbGljazogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG4gIHB1YmxpYyBvbkRpc21pc3M6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgY29uc3RydWN0b3IodGV4dDogc3RyaW5nLCBzdGF0ZTogTWVzc2FnZVN0YXRlID0gTWVzc2FnZVN0YXRlLkRlZmF1bHQsIGhlYWRlcj86IHN0cmluZykge1xyXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xyXG5cclxuICAgIHRoaXMudGltZW91dCA9IDUwMDA7XHJcbiAgICB0aGlzLmV4dGVuZGVkVGltZW91dCA9IDEwMDA7XHJcblxyXG4gICAgdGhpcy5oYXNEaXNtaXNzQnV0dG9uID0gdHJ1ZTtcclxuICAgIHRoaXMuaGFzUHJvZ3Jlc3MgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLnRyYW5zaXRpb24gPSAnZmFkZSc7XHJcbiAgICB0aGlzLnRyYW5zaXRpb25JbkR1cmF0aW9uID0gNDAwO1xyXG4gICAgdGhpcy50cmFuc2l0aW9uT3V0RHVyYXRpb24gPSAxMDAwO1xyXG5cclxuICAgIHRoaXMub25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICAgIHRoaXMub25EaXNtaXNzID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG4gIH1cclxufVxyXG4iXX0=