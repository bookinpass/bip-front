/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import Popper from 'popper.js';
/** @type {?} */
export var PositioningPlacement = {
    Auto: (/** @type {?} */ ('auto')),
    TopLeft: (/** @type {?} */ ('top left')),
    Top: (/** @type {?} */ ('top')),
    TopRight: (/** @type {?} */ ('top right')),
    LeftTop: (/** @type {?} */ ('left top')),
    Left: (/** @type {?} */ ('left')),
    LeftBottom: (/** @type {?} */ ('left bottom')),
    BottomLeft: (/** @type {?} */ ('bottom left')),
    Bottom: (/** @type {?} */ ('bottom')),
    BottomRight: (/** @type {?} */ ('bottom right')),
    RightTop: (/** @type {?} */ ('right top')),
    Right: (/** @type {?} */ ('right')),
    RightBottom: (/** @type {?} */ ('right bottom'))
};
/**
 * @record
 */
export function IPositionBoundingBox() { }
if (false) {
    /** @type {?} */
    IPositionBoundingBox.prototype.width;
    /** @type {?} */
    IPositionBoundingBox.prototype.height;
    /** @type {?} */
    IPositionBoundingBox.prototype.top;
    /** @type {?} */
    IPositionBoundingBox.prototype.left;
    /** @type {?} */
    IPositionBoundingBox.prototype.bottom;
    /** @type {?} */
    IPositionBoundingBox.prototype.right;
}
/**
 * @param {?} placement
 * @return {?}
 */
function placementToPopper(placement) {
    if (!placement || placement === PositioningPlacement.Auto) {
        return 'auto';
    }
    // All placements of the format: `direction alignment`, e.g. `top left`.
    var _a = tslib_1.__read(placement.split(' '), 2), direction = _a[0], alignment = _a[1];
    // Direction alone covers case of just `top`, `left`, `bottom`, `right`.
    /** @type {?} */
    var chosenPlacement = [direction];
    // Add `start` / `end` to placement, depending on alignment direction.
    switch (alignment) {
        case 'top':
        case 'left':
            chosenPlacement.push('start');
            break;
        case 'bottom':
        case 'right':
            chosenPlacement.push('end');
            break;
    }
    // Join with hyphen to create Popper compatible placement.
    return (/** @type {?} */ (chosenPlacement.join('-')));
}
/**
 * @param {?} popper
 * @return {?}
 */
function popperToPlacement(popper) {
    if (!popper || popper === 'auto') {
        return 'auto';
    }
    var _a = tslib_1.__read(popper.split('-'), 2), direction = _a[0], alignment = _a[1];
    /** @type {?} */
    var chosenPlacement = [direction];
    switch (direction) {
        case 'top':
        case 'bottom':
            switch (alignment) {
                case 'start':
                    chosenPlacement.push('left');
                    break;
                case 'end':
                    chosenPlacement.push('right');
                    break;
            }
            break;
        case 'left':
        case 'right':
            switch (alignment) {
                case 'start':
                    chosenPlacement.push('top');
                    break;
                case 'end':
                    chosenPlacement.push('bottom');
                    break;
            }
            break;
    }
    return (/** @type {?} */ (chosenPlacement.join(' ')));
}
var PositioningService = /** @class */ (function () {
    function PositioningService(anchor, subject, placement, arrowSelector) {
        this.anchor = anchor;
        this.subject = subject;
        this._placement = placement;
        this._arrowSelector = arrowSelector;
        this.init();
    }
    Object.defineProperty(PositioningService.prototype, "actualPlacement", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._popperState) {
                return PositioningPlacement.Auto;
            }
            return popperToPlacement(this._popperState.placement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositioningService.prototype, "state", {
        get: /**
         * @return {?}
         */
        function () {
            return this._popperState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositioningService.prototype, "placement", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placement;
        },
        set: /**
         * @param {?} placement
         * @return {?}
         */
        function (placement) {
            this._placement = placement;
            if (this._popper) {
                this._popper.options.placement = placementToPopper(placement);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositioningService.prototype, "hasArrow", {
        set: /**
         * @param {?} hasArrow
         * @return {?}
         */
        function (hasArrow) {
            this._hasArrow = hasArrow;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PositioningService.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var modifiers = {
            computeStyle: {
                gpuAcceleration: false
            },
            preventOverflow: {
                escapeWithReference: true,
                boundariesElement: document.body
            },
            arrow: {
                element: this._arrowSelector
            },
            offset: {
                fn: (/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (_this._hasArrow) {
                        /** @type {?} */
                        var offsets = _this.calculateOffsets();
                        data.offsets.popper.left += offsets.left;
                        data.offsets.popper.top += offsets.top;
                    }
                    return data;
                })
            }
        };
        if (!this._arrowSelector) {
            delete modifiers.arrow;
        }
        this._popper = (/** @type {?} */ (new Popper(this.anchor.nativeElement, this.subject.nativeElement, {
            placement: placementToPopper(this._placement),
            modifiers: modifiers,
            onCreate: (/**
             * @param {?} initial
             * @return {?}
             */
            function (initial) { return _this._popperState = initial; }),
            onUpdate: (/**
             * @param {?} update
             * @return {?}
             */
            function (update) { return _this._popperState = update; })
        })));
    };
    /**
     * @return {?}
     */
    PositioningService.prototype.update = /**
     * @return {?}
     */
    function () {
        this._popper.update();
    };
    /**
     * @return {?}
     */
    PositioningService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._popper.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    PositioningService.prototype.calculateOffsets = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var top = 0;
        // To support correct positioning for all popup sizes we should calculate offset using em
        /** @type {?} */
        var fontSize = parseFloat(window.getComputedStyle(this.subject.nativeElement).getPropertyValue('font-size'));
        // The Fomantic UI popup arrow width and height are 0.71428571em and the margin from the popup edge is 1em
        /** @type {?} */
        var arrowCenter = (0.71428571 / 2 + 1) * fontSize;
        if (this.anchor.nativeElement.offsetWidth <= arrowCenter * 2) {
            /** @type {?} */
            var anchorCenterWidth = this.anchor.nativeElement.offsetWidth / 2;
            if (this._placement === PositioningPlacement.TopLeft || this._placement === PositioningPlacement.BottomLeft) {
                left = anchorCenterWidth - arrowCenter;
            }
            if (this._placement === PositioningPlacement.TopRight || this._placement === PositioningPlacement.BottomRight) {
                left = arrowCenter - anchorCenterWidth;
            }
        }
        if (this.anchor.nativeElement.offsetHeight <= arrowCenter * 2) {
            /** @type {?} */
            var anchorCenterHeight = this.anchor.nativeElement.offsetHeight / 2;
            if (this._placement === PositioningPlacement.LeftTop || this._placement === PositioningPlacement.RightTop) {
                top = anchorCenterHeight - arrowCenter;
            }
            if (this._placement === PositioningPlacement.LeftBottom || this._placement === PositioningPlacement.RightBottom) {
                top = arrowCenter - anchorCenterHeight;
            }
        }
        return { top: top, left: left, width: 0, height: 0 };
    };
    return PositioningService;
}());
export { PositioningService };
if (false) {
    /** @type {?} */
    PositioningService.prototype.anchor;
    /** @type {?} */
    PositioningService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._popper;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._popperState;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._arrowSelector;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._placement;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._hasArrow;
}
//# sourceMappingURL=data:application/json;base64,