/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, ReflectiveInjector } from '@angular/core';
/**
 * @record
 * @template T
 */
export function IImplicitContext() { }
if (false) {
    /** @type {?|undefined} */
    IImplicitContext.prototype.$implicit;
}
var FuiComponentFactory = /** @class */ (function () {
    function FuiComponentFactory(_applicationRef, _componentFactoryResolver, _injector) {
        this._applicationRef = _applicationRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
    }
    /**
     * @template T
     * @param {?} type
     * @param {?=} providers
     * @return {?}
     */
    FuiComponentFactory.prototype.createComponent = /**
     * @template T
     * @param {?} type
     * @param {?=} providers
     * @return {?}
     */
    function (type, providers) {
        if (providers === void 0) { providers = []; }
        // Resolve a factory for creating components of type `type`.
        /** @type {?} */
        var factory = this._componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (type)));
        // Resolve and create an injector with the specified providers.
        /** @type {?} */
        var injector = ReflectiveInjector.resolveAndCreate(providers, this._injector);
        // Create a component using the previously resolved factory & injector.
        /** @type {?} */
        var componentRef = factory.create(injector);
        return componentRef;
    };
    /**
     * @template T, U
     * @param {?} viewContainer
     * @param {?} template
     * @param {?} context
     * @return {?}
     */
    FuiComponentFactory.prototype.createView = /**
     * @template T, U
     * @param {?} viewContainer
     * @param {?} template
     * @param {?} context
     * @return {?}
     */
    function (viewContainer, template, context) {
        viewContainer.createEmbeddedView(template, context);
    };
    // Inserts the component into the specified view container.
    // Inserts the component into the specified view container.
    /**
     * @template T
     * @param {?} componentRef
     * @param {?} viewContainer
     * @return {?}
     */
    FuiComponentFactory.prototype.attachToView = 
    // Inserts the component into the specified view container.
    /**
     * @template T
     * @param {?} componentRef
     * @param {?} viewContainer
     * @return {?}
     */
    function (componentRef, viewContainer) {
        viewContainer.insert(componentRef.hostView, 0);
    };
    // Inserts the component in the root application node.
    // Inserts the component in the root application node.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    FuiComponentFactory.prototype.attachToApplication = 
    // Inserts the component in the root application node.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this._applicationRef.attachView(componentRef.hostView);
    };
    // Detaches the component from the root application node.
    // Detaches the component from the root application node.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    FuiComponentFactory.prototype.detachFromApplication = 
    // Detaches the component from the root application node.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this._applicationRef.detachView(componentRef.hostView);
    };
    // Moves the component to the specified DOM element.
    // Moves the component to the specified DOM element.
    /**
     * @template T
     * @param {?} componentRef
     * @param {?} element
     * @return {?}
     */
    FuiComponentFactory.prototype.moveToElement = 
    // Moves the component to the specified DOM element.
    /**
     * @template T
     * @param {?} componentRef
     * @param {?} element
     * @return {?}
     */
    function (componentRef, element) {
        element.appendChild(componentRef.location.nativeElement);
    };
    // Moves the component to the document body.
    // Moves the component to the document body.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    FuiComponentFactory.prototype.moveToDocumentBody = 
    // Moves the component to the document body.
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.moveToElement(componentRef, (/** @type {?} */ (document.querySelector('body'))));
    };
    /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    FuiComponentFactory.prototype.detachFromDocument = /**
     * @template T
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        /** @type {?} */
        var element = (/** @type {?} */ (componentRef.location.nativeElement));
        // We can't use `element.remove()` due to lack of IE11 support.
        if (element.parentNode) {
            element.parentNode.removeChild(element);
        }
    };
    FuiComponentFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FuiComponentFactory.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return FuiComponentFactory;
}());
export { FuiComponentFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuiComponentFactory.prototype._applicationRef;
    /**
     * @type {?}
     * @private
     */
    FuiComponentFactory.prototype._componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FuiComponentFactory.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1pc2MvdXRpbC9zZXJ2aWNlcy9jb21wb25lbnQtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsY0FBYyxFQUNkLHdCQUF3QixFQUV4QixVQUFVLEVBQ1YsUUFBUSxFQUVSLGtCQUFrQixFQUluQixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFdkIsc0NBRUM7OztJQURDLHFDQUFjOztBQUdoQjtJQUVFLDZCQUFvQixlQUErQixFQUMvQix5QkFBbUQsRUFDbkQsU0FBbUI7UUFGbkIsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBQy9CLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMEI7UUFDbkQsY0FBUyxHQUFULFNBQVMsQ0FBVTtJQUN2QyxDQUFDOzs7Ozs7O0lBRU0sNkNBQWU7Ozs7OztJQUF0QixVQUEwQixJQUFhLEVBQUUsU0FBMEI7UUFBMUIsMEJBQUEsRUFBQSxjQUEwQjs7O1lBRTNELE9BQU8sR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsdUJBQXVCLENBQUMsbUJBQUEsSUFBSSxFQUFXLENBQUM7OztZQUdqRixRQUFRLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQ2xELFNBQVMsRUFDVCxJQUFJLENBQUMsU0FBUyxDQUNmOzs7WUFHSyxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFFN0MsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7Ozs7Ozs7SUFFTSx3Q0FBVTs7Ozs7OztJQUFqQixVQUFvRCxhQUErQixFQUFFLFFBQXdCLEVBQUUsT0FBVTtRQUN2SCxhQUFhLENBQUMsa0JBQWtCLENBQUksUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCwyREFBMkQ7Ozs7Ozs7O0lBQ3BELDBDQUFZOzs7Ozs7OztJQUFuQixVQUF1QixZQUE2QixFQUFFLGFBQStCO1FBQ25GLGFBQWEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsc0RBQXNEOzs7Ozs7O0lBQy9DLGlEQUFtQjs7Ozs7OztJQUExQixVQUE4QixZQUE2QjtRQUN6RCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELHlEQUF5RDs7Ozs7OztJQUNsRCxtREFBcUI7Ozs7Ozs7SUFBNUIsVUFBZ0MsWUFBNkI7UUFDM0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxvREFBb0Q7Ozs7Ozs7O0lBQzdDLDJDQUFhOzs7Ozs7OztJQUFwQixVQUF3QixZQUE2QixFQUFFLE9BQWdCO1FBQ3JFLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsNENBQTRDOzs7Ozs7O0lBQ3JDLGdEQUFrQjs7Ozs7OztJQUF6QixVQUE2QixZQUE2QjtRQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxtQkFBQSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7Ozs7SUFFTSxnREFBa0I7Ozs7O0lBQXpCLFVBQTZCLFlBQTZCOztZQUNsRCxPQUFPLEdBQUcsbUJBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQVc7UUFDOUQsK0RBQStEO1FBQy9ELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN0QixPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7O2dCQTFERixVQUFVOzs7O2dCQWhCVCxjQUFjO2dCQUNkLHdCQUF3QjtnQkFHeEIsUUFBUTs7SUF1RVYsMEJBQUM7Q0FBQSxBQTNERCxJQTJEQztTQTFEWSxtQkFBbUI7Ozs7OztJQUNsQiw4Q0FBdUM7Ozs7O0lBQ3ZDLHdEQUEyRDs7Ozs7SUFDM0Qsd0NBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBcHBsaWNhdGlvblJlZixcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgQ29tcG9uZW50UmVmLFxyXG4gIEluamVjdGFibGUsXHJcbiAgSW5qZWN0b3IsXHJcbiAgUHJvdmlkZXIsXHJcbiAgUmVmbGVjdGl2ZUluamVjdG9yLFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIFR5cGUsXHJcbiAgVmlld0NvbnRhaW5lclJlZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSW1wbGljaXRDb250ZXh0PFQ+IHtcclxuICAkaW1wbGljaXQ/OiBUO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGdWlDb21wb25lbnRGYWN0b3J5IHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9hcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlQ29tcG9uZW50PFQ+KHR5cGU6IFR5cGU8VD4sIHByb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtdKTogQ29tcG9uZW50UmVmPFQ+IHtcclxuICAgIC8vIFJlc29sdmUgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBjb21wb25lbnRzIG9mIHR5cGUgYHR5cGVgLlxyXG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0eXBlIGFzIFR5cGU8VD4pO1xyXG5cclxuICAgIC8vIFJlc29sdmUgYW5kIGNyZWF0ZSBhbiBpbmplY3RvciB3aXRoIHRoZSBzcGVjaWZpZWQgcHJvdmlkZXJzLlxyXG4gICAgY29uc3QgaW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShcclxuICAgICAgcHJvdmlkZXJzLFxyXG4gICAgICB0aGlzLl9pbmplY3RvclxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBjb21wb25lbnQgdXNpbmcgdGhlIHByZXZpb3VzbHkgcmVzb2x2ZWQgZmFjdG9yeSAmIGluamVjdG9yLlxyXG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gZmFjdG9yeS5jcmVhdGUoaW5qZWN0b3IpO1xyXG5cclxuICAgIHJldHVybiBjb21wb25lbnRSZWY7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlVmlldzxULCBVIGV4dGVuZHMgSUltcGxpY2l0Q29udGV4dDxUPj4odmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPFU+LCBjb250ZXh0OiBVKTogdm9pZCB7XHJcbiAgICB2aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldzxVPih0ZW1wbGF0ZSwgY29udGV4dCk7XHJcbiAgfVxyXG5cclxuICAvLyBJbnNlcnRzIHRoZSBjb21wb25lbnQgaW50byB0aGUgc3BlY2lmaWVkIHZpZXcgY29udGFpbmVyLlxyXG4gIHB1YmxpYyBhdHRhY2hUb1ZpZXc8VD4oY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VD4sIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpOiB2b2lkIHtcclxuICAgIHZpZXdDb250YWluZXIuaW5zZXJ0KGNvbXBvbmVudFJlZi5ob3N0VmlldywgMCk7XHJcbiAgfVxyXG5cclxuICAvLyBJbnNlcnRzIHRoZSBjb21wb25lbnQgaW4gdGhlIHJvb3QgYXBwbGljYXRpb24gbm9kZS5cclxuICBwdWJsaWMgYXR0YWNoVG9BcHBsaWNhdGlvbjxUPihjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xyXG4gICAgdGhpcy5fYXBwbGljYXRpb25SZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gIH1cclxuXHJcbiAgLy8gRGV0YWNoZXMgdGhlIGNvbXBvbmVudCBmcm9tIHRoZSByb290IGFwcGxpY2F0aW9uIG5vZGUuXHJcbiAgcHVibGljIGRldGFjaEZyb21BcHBsaWNhdGlvbjxUPihjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xyXG4gICAgdGhpcy5fYXBwbGljYXRpb25SZWYuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gIH1cclxuXHJcbiAgLy8gTW92ZXMgdGhlIGNvbXBvbmVudCB0byB0aGUgc3BlY2lmaWVkIERPTSBlbGVtZW50LlxyXG4gIHB1YmxpYyBtb3ZlVG9FbGVtZW50PFQ+KGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFQ+LCBlbGVtZW50OiBFbGVtZW50KTogdm9pZCB7XHJcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIC8vIE1vdmVzIHRoZSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJvZHkuXHJcbiAgcHVibGljIG1vdmVUb0RvY3VtZW50Qm9keTxUPihjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xyXG4gICAgdGhpcy5tb3ZlVG9FbGVtZW50KGNvbXBvbmVudFJlZiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpISk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGV0YWNoRnJvbURvY3VtZW50PFQ+KGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFQ+KTogdm9pZCB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQgYXMgRWxlbWVudDtcclxuICAgIC8vIFdlIGNhbid0IHVzZSBgZWxlbWVudC5yZW1vdmUoKWAgZHVlIHRvIGxhY2sgb2YgSUUxMSBzdXBwb3J0LlxyXG4gICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==