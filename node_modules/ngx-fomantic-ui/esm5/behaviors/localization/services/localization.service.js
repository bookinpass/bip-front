/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import enGB from '../locales/en-GB';
import * as $extend from 'extend';
/**
 * @template T
 * @param {?} obj
 * @return {?}
 */
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
/**
 * @template T, U
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function deepExtend(target, source) {
    // Rollup...
    /** @type {?} */
    var extend = ((/** @type {?} */ ($extend))).default || $extend;
    return extend(true, target, source);
}
/**
 * @param {?} language
 * @return {?}
 */
function lang(language) {
    return language.toLowerCase().replace('-', '');
}
/**
 * @record
 */
function ILocalizationValuesContainer() { }
var FuiLocalizationService = /** @class */ (function () {
    function FuiLocalizationService() {
        this.onLanguageUpdate = new EventEmitter();
        this._fallbackValues = enGB;
        this._values = {};
        this._language = 'en-GB';
        this.load('en-GB', enGB);
    }
    Object.defineProperty(FuiLocalizationService.prototype, "language", {
        get: /**
         * @return {?}
         */
        function () {
            return this._language;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} language
     * @return {?}
     */
    FuiLocalizationService.prototype.setLanguage = /**
     * @param {?} language
     * @return {?}
     */
    function (language) {
        if (lang(this._language) !== lang(language)) {
            this._language = language;
            this.onLanguageUpdate.emit();
        }
    };
    /**
     * @param {?=} language
     * @return {?}
     */
    FuiLocalizationService.prototype.get = /**
     * @param {?=} language
     * @return {?}
     */
    function (language) {
        if (language === void 0) { language = this.language; }
        /** @type {?} */
        var values = deepClone(this._fallbackValues);
        if (!this._values[lang(language)]) {
            throw new Error("Locale " + language + " is not loaded");
        }
        deepExtend(values, this._values[lang(language)]);
        return deepClone(values);
    };
    /**
     * @template T
     * @param {?} values
     * @param {?} overrides
     * @return {?}
     */
    FuiLocalizationService.prototype.override = /**
     * @template T
     * @param {?} values
     * @param {?} overrides
     * @return {?}
     */
    function (values, overrides) {
        return deepExtend(deepClone(values), overrides);
    };
    /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    FuiLocalizationService.prototype.load = /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    function (language, values) {
        this._values[lang(language)] = deepClone(values);
        this.onLanguageUpdate.emit();
    };
    /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    FuiLocalizationService.prototype.patch = /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    function (language, values) {
        deepExtend(this._values[lang(language)], values);
    };
    /**
     * @param {?} value
     * @param {?} variables
     * @return {?}
     */
    FuiLocalizationService.prototype.interpolate = /**
     * @param {?} value
     * @param {?} variables
     * @return {?}
     */
    function (value, variables) {
        return variables.reduce((/**
         * @param {?} s
         * @param {?} __1
         * @return {?}
         */
        function (s, _a) {
            var _b = tslib_1.__read(_a, 2), k = _b[0], v = _b[1];
            return s.replace(new RegExp("#{" + k + "}", 'g'), v);
        }), value);
    };
    FuiLocalizationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FuiLocalizationService.ctorParameters = function () { return []; };
    return FuiLocalizationService;
}());
export { FuiLocalizationService };
if (false) {
    /** @type {?} */
    FuiLocalizationService.prototype.onLanguageUpdate;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._fallbackValues;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._values;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._language;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJiZWhhdmlvcnMvbG9jYWxpemF0aW9uL3NlcnZpY2VzL2xvY2FsaXphdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxJQUFJLE1BQU0sa0JBQWtCLENBQUM7QUFDcEMsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7Ozs7OztBQUVsQyxTQUFTLFNBQVMsQ0FBSSxHQUFNO0lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQzs7Ozs7OztBQUVELFNBQVMsVUFBVSxDQUFPLE1BQVMsRUFBRSxNQUFTOzs7UUFFdEMsTUFBTSxHQUFHLENBQUMsbUJBQUEsT0FBTyxFQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTztJQUNsRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7Ozs7O0FBRUQsU0FBUyxJQUFJLENBQUMsUUFBZ0I7SUFDNUIsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDOzs7O0FBRUQsMkNBRUM7QUFFRDtJQU9FO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUlELHNCQUFXLDRDQUFROzs7O1FBQW5CO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBOzs7OztJQUVNLDRDQUFXOzs7O0lBQWxCLFVBQW1CLFFBQWdCO1FBQ2pDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxvQ0FBRzs7OztJQUFWLFVBQVcsUUFBZ0M7UUFBaEMseUJBQUEsRUFBQSxXQUFtQixJQUFJLENBQUMsUUFBUTs7WUFDbkMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO1lBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBVSxRQUFRLG1CQUFnQixDQUFDLENBQUM7U0FDckQ7UUFDRCxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7Ozs7O0lBRU0seUNBQVE7Ozs7OztJQUFmLFVBQ0UsTUFBd0IsRUFDeEIsU0FBNkM7UUFFN0MsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7OztJQUVNLHFDQUFJOzs7OztJQUFYLFVBQVksUUFBZ0IsRUFBRSxNQUE0QjtRQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU0sc0NBQUs7Ozs7O0lBQVosVUFBYSxRQUFnQixFQUFFLE1BQTRCO1FBQ3pELFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUVNLDRDQUFXOzs7OztJQUFsQixVQUFtQixLQUFhLEVBQUUsU0FBNkI7UUFDN0QsT0FBTyxTQUFTLENBQUMsTUFBTTs7Ozs7UUFBQyxVQUFDLENBQUMsRUFBRSxFQUFNO2dCQUFOLDBCQUFNLEVBQUwsU0FBQyxFQUFFLFNBQUM7WUFBTSxPQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBSyxDQUFDLE1BQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFBeEMsQ0FBd0MsR0FBRSxLQUFLLENBQUMsQ0FBQztJQUMxRixDQUFDOztnQkF4REYsVUFBVTs7OztJQXlEWCw2QkFBQztDQUFBLEFBekRELElBeURDO1NBeERZLHNCQUFzQjs7O0lBRWpDLGtEQUE0Qzs7Ozs7SUFDNUMsaURBQXVDOzs7OztJQUN2Qyx5Q0FBOEM7Ozs7O0lBVzlDLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtJTG9jYWxlVmFsdWVzLCBJUGFydGlhbExvY2FsZVZhbHVlcywgUmVjdXJzaXZlUGFydGlhbH0gZnJvbSAnLi4vbG9jYWxlcy9pbnRlcmZhY2VzL3ZhbHVlcyc7XHJcbmltcG9ydCBlbkdCIGZyb20gJy4uL2xvY2FsZXMvZW4tR0InO1xyXG5pbXBvcnQgKiBhcyAkZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XHJcblxyXG5mdW5jdGlvbiBkZWVwQ2xvbmU8VD4ob2JqOiBUKTogVCB7XHJcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQ8VCwgVT4odGFyZ2V0OiBULCBzb3VyY2U6IFUpOiBUICYgVSB7XHJcbiAgLy8gUm9sbHVwLi4uXHJcbiAgY29uc3QgZXh0ZW5kID0gKCRleHRlbmQgYXMgYW55KS5kZWZhdWx0IHx8ICRleHRlbmQ7XHJcbiAgcmV0dXJuIGV4dGVuZCh0cnVlLCB0YXJnZXQsIHNvdXJjZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxhbmcobGFuZ3VhZ2U6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGxhbmd1YWdlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnLScsICcnKTtcclxufVxyXG5cclxuaW50ZXJmYWNlIElMb2NhbGl6YXRpb25WYWx1ZXNDb250YWluZXIge1xyXG4gIFtuYW1lOiBzdHJpbmddOiBJUGFydGlhbExvY2FsZVZhbHVlcztcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnVpTG9jYWxpemF0aW9uU2VydmljZSB7XHJcblxyXG4gIHB1YmxpYyBvbkxhbmd1YWdlVXBkYXRlOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgcHJpdmF0ZSBfZmFsbGJhY2tWYWx1ZXM6IElMb2NhbGVWYWx1ZXM7XHJcbiAgcHJpdmF0ZSBfdmFsdWVzOiBJTG9jYWxpemF0aW9uVmFsdWVzQ29udGFpbmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMub25MYW5ndWFnZVVwZGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgICB0aGlzLl9mYWxsYmFja1ZhbHVlcyA9IGVuR0I7XHJcbiAgICB0aGlzLl92YWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2xhbmd1YWdlID0gJ2VuLUdCJztcclxuICAgIHRoaXMubG9hZCgnZW4tR0InLCBlbkdCKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2xhbmd1YWdlOiBzdHJpbmc7XHJcblxyXG4gIHB1YmxpYyBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAobGFuZyh0aGlzLl9sYW5ndWFnZSkgIT09IGxhbmcobGFuZ3VhZ2UpKSB7XHJcbiAgICAgIHRoaXMuX2xhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICAgIHRoaXMub25MYW5ndWFnZVVwZGF0ZS5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0KGxhbmd1YWdlOiBzdHJpbmcgPSB0aGlzLmxhbmd1YWdlKTogSUxvY2FsZVZhbHVlcyB7XHJcbiAgICBjb25zdCB2YWx1ZXMgPSBkZWVwQ2xvbmUodGhpcy5fZmFsbGJhY2tWYWx1ZXMpO1xyXG4gICAgaWYgKCF0aGlzLl92YWx1ZXNbbGFuZyhsYW5ndWFnZSldKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTG9jYWxlICR7bGFuZ3VhZ2V9IGlzIG5vdCBsb2FkZWRgKTtcclxuICAgIH1cclxuICAgIGRlZXBFeHRlbmQodmFsdWVzLCB0aGlzLl92YWx1ZXNbbGFuZyhsYW5ndWFnZSldKTtcclxuICAgIHJldHVybiBkZWVwQ2xvbmUodmFsdWVzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZTxUIGV4dGVuZHMga2V5b2YgSUxvY2FsZVZhbHVlcz4oXHJcbiAgICB2YWx1ZXM6IElMb2NhbGVWYWx1ZXNbVF0sXHJcbiAgICBvdmVycmlkZXM6IFJlY3Vyc2l2ZVBhcnRpYWw8SUxvY2FsZVZhbHVlc1tUXT5cclxuICApOiBJTG9jYWxlVmFsdWVzW1RdIHtcclxuICAgIHJldHVybiBkZWVwRXh0ZW5kKGRlZXBDbG9uZSh2YWx1ZXMpLCBvdmVycmlkZXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvYWQobGFuZ3VhZ2U6IHN0cmluZywgdmFsdWVzOiBJUGFydGlhbExvY2FsZVZhbHVlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5fdmFsdWVzW2xhbmcobGFuZ3VhZ2UpXSA9IGRlZXBDbG9uZSh2YWx1ZXMpO1xyXG4gICAgdGhpcy5vbkxhbmd1YWdlVXBkYXRlLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwYXRjaChsYW5ndWFnZTogc3RyaW5nLCB2YWx1ZXM6IElQYXJ0aWFsTG9jYWxlVmFsdWVzKTogdm9pZCB7XHJcbiAgICBkZWVwRXh0ZW5kKHRoaXMuX3ZhbHVlc1tsYW5nKGxhbmd1YWdlKV0sIHZhbHVlcyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW50ZXJwb2xhdGUodmFsdWU6IHN0cmluZywgdmFyaWFibGVzOiBbc3RyaW5nLCBzdHJpbmddW10pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHZhcmlhYmxlcy5yZWR1Y2UoKHMsIFtrLCB2XSkgPT4gcy5yZXBsYWNlKG5ldyBSZWdFeHAoYCN7JHtrfX1gLCAnZycpLCB2KSwgdmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=