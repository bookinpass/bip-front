import { ElementRef, EventEmitter } from '@angular/core';
import { CustomValueAccessor, ICustomValueAccessorHost } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { FuiSelectBase } from '../classes/select-base';
import { FuiSelectOption } from './select-option';
export declare class FuiMultiSelect<T, U> extends FuiSelectBase<T, U> implements ICustomValueAccessorHost<U[]> {
    selectedOptions: T[];
    selectedOptionsChange: EventEmitter<U[]>;
    maxSelected: number;
    readonly hasClasses: boolean;
    private _writtenOptions?;
    constructor(element: ElementRef, localizationService: FuiLocalizationService);
    readonly filteredOptions: T[];
    readonly availableOptions: T[];
    readonly maxSelectedReached: boolean;
    readonly maxSelectedMessage: string;
    readonly selectedMessage: string;
    private _hasLabels;
    hasLabels: boolean;
    private _showCountText;
    showCountText: string;
    private _placeholder;
    placeholder: string;
    selectOption(option: T): void;
    writeValue(values: U[]): void;
    deselectOption(option: T): void;
    onQueryInputKeydown(event: KeyboardEvent): void;
    protected optionsUpdateHook(): void;
    protected initialiseRenderedOption(option: FuiSelectOption<T>): void;
}
export declare class FuiMultiSelectValueAccessor<T, U> extends CustomValueAccessor<U[], FuiMultiSelect<T, U>> {
    constructor(host: FuiMultiSelect<T, U>);
}
