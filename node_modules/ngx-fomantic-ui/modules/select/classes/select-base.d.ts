import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';
import { DropdownService, FuiDropdownMenu } from '../../dropdown/internal';
import { FilterFn, LookupFn, SearchService } from '../../search/internal';
import { HandledEvent, IFocusEvent, ITemplateRefContext } from '../../../misc/util/internal';
import { ISelectLocaleValues, RecursivePartial, FuiLocalizationService } from '../../../behaviors/localization/internal';
import { FuiSelectOption } from '../components/select-option';
import { FuiSelectSearch } from '../directives/select-search';
export interface IOptionContext<T> extends ITemplateRefContext<T> {
    query?: string;
}
export declare abstract class FuiSelectBase<T, U> implements AfterContentInit, OnDestroy {
    private _element;
    protected _localizationService: FuiLocalizationService;
    dropdownService: DropdownService;
    searchService: SearchService<T, U>;
    readonly hasClasses: boolean;
    isClearable: boolean;
    isSearchable: boolean;
    isSearchExternal: boolean;
    valueField: string;
    optionTemplate: TemplateRef<IOptionContext<T>>;
    localeOverrides: RecursivePartial<ISelectLocaleValues>;
    icon: string;
    transition: string;
    transitionDuration: number;
    onTouched: EventEmitter<void>;
    protected _menu: FuiDropdownMenu;
    protected _renderedOptions: QueryList<FuiSelectOption<T>>;
    private _renderedSubscriptions;
    private _internalSearch?;
    private _manualSearch?;
    private _tabIndex?;
    constructor(_element: ElementRef, _localizationService: FuiLocalizationService);
    readonly isActive: boolean;
    readonly isVisible: boolean;
    readonly hasSearchClass: boolean;
    readonly isSearching: boolean;
    readonly isClearing: boolean;
    readonly searchInput: FuiSelectSearch | undefined;
    readonly tabindex: number;
    isDisabled: boolean;
    options: T[];
    optionsFilter: FilterFn<T> | undefined;
    optionsLookup: LookupFn<T, U> | undefined;
    readonly filteredOptions: T[];
    readonly availableOptions: T[];
    query: string | undefined;
    labelField: string | undefined;
    readonly labelGetter: (obj: T) => string;
    readonly valueGetter: (obj: T) => U;
    readonly configuredFormatter: (option: T) => string;
    private _optionFormatter?;
    optionFormatter: ((option: T, query?: string) => string) | undefined;
    private _localeValues;
    readonly localeValues: ISelectLocaleValues;
    ngAfterContentInit(): void;
    abstract selectOption(option: T): void;
    onCaretClick(e: HandledEvent): void;
    onClick(e: HandledEvent): void;
    onFocusIn(): void;
    onFocusOut(e: IFocusEvent): void;
    onKeyPress(e: KeyboardEvent): void;
    onKeyDown(e: KeyboardEvent): void;
    onQueryInputKeydown(event: KeyboardEvent): void;
    ngOnDestroy(): void;
    protected optionsUpdateHook(): void;
    protected queryUpdateHook(): void;
    protected updateQuery(query: string): void;
    protected resetQuery(delayed?: boolean): void;
    protected onAvailableOptionsRendered(): void;
    protected initialiseRenderedOption(option: FuiSelectOption<T>): void;
    protected findOption(options: T[], value: U): T | undefined;
    protected focus(): void;
    protected drawTemplate(siblingRef: ViewContainerRef, value: T): void;
    private onLocaleUpdate;
}
