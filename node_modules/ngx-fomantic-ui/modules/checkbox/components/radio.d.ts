import { EventEmitter } from '@angular/core';
import { CustomValueAccessor, ICustomValueAccessorHost } from '../../../misc/util/internal';
export declare class FuiRadio<T> implements ICustomValueAccessorHost<T> {
    readonly hasClasses: boolean;
    name: string;
    value: T;
    isChecked: boolean;
    currentValue: T;
    onCurrentValueChange: EventEmitter<T>;
    onTouched: EventEmitter<void>;
    isDisabled: boolean;
    isReadonly: boolean;
    private _radioElement;
    constructor();
    readonly checkedAttribute: string | undefined;
    readonly isDisabledAttribute: string | undefined;
    onMouseDown(e: MouseEvent): void;
    onClick(): void;
    onFocusOut(): void;
    update(): void;
    writeValue(value: T): void;
    private focusRadio;
}
export declare class FuiRadioValueAccessor<T> extends CustomValueAccessor<T, FuiRadio<T>> {
    constructor(host: FuiRadio<T>);
}
