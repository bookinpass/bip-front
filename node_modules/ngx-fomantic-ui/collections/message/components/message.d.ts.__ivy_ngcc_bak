import { EventEmitter } from '@angular/core';
import { TransitionController } from '../../../modules/transition/internal';
import { HandledEvent, IDynamicClasses } from '../../../misc/util/internal';
import { MessageConfig, MessageState } from '../classes/message-config';
export interface IMessage {
    dismiss(): void;
}
export declare class FuiMessage implements IMessage {
    isDynamic: boolean;
    isClosing: boolean;
    isDismissing: boolean;
    text: string;
    header?: string;
    state: MessageState;
    timeout: number;
    extendedTimeout: number;
    currentTimeout: number;
    hasDismissButton: boolean;
    hasProgress: boolean;
    timeoutProgress: number;
    transitionController: TransitionController;
    transition: string;
    transitionInDuration: number;
    transitionOutDuration: number;
    onClick: EventEmitter<void>;
    onDismiss: EventEmitter<void>;
    classes: string;
    private _displayTimeout;
    constructor();
    readonly dynamicClasses: IDynamicClasses;
    loadConfig(config: MessageConfig): void;
    show(): void;
    dismiss(): void;
    hide(): void;
    beginTimer(timeout: number): void;
    cancelTimer(): void;
    onClicked(e: HandledEvent): void;
    onDismissClicked(e: HandledEvent): void;
    private onTimedOut;
}
