/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const KeyCode = {
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40,
    Escape: 27,
    Enter: 13,
    Space: 32,
    Backspace: 8,
};
export { KeyCode };
KeyCode[KeyCode.Left] = 'Left';
KeyCode[KeyCode.Up] = 'Up';
KeyCode[KeyCode.Right] = 'Right';
KeyCode[KeyCode.Down] = 'Down';
KeyCode[KeyCode.Escape] = 'Escape';
KeyCode[KeyCode.Enter] = 'Enter';
KeyCode[KeyCode.Space] = 'Space';
KeyCode[KeyCode.Backspace] = 'Backspace';
/**
 * @record
 */
function IRecursiveObject() { }
/**
 * @record
 * @template T
 */
export function ITemplateRefContext() { }
if (false) {
    /** @type {?} */
    ITemplateRefContext.prototype.$implicit;
}
/**
 * @record
 */
export function IAugmentedElement() { }
if (false) {
    /**
     * @param {?} selector
     * @return {?}
     */
    IAugmentedElement.prototype.closest = function (selector) { };
}
export class HandledEvent {
}
if (false) {
    /** @type {?} */
    HandledEvent.prototype.eventHandled;
}
/**
 * @record
 */
export function IDynamicClasses() { }
/** @type {?} */
export const Util = {
    Array: {
        /**
         * @param {?} n
         * @param {?=} offset
         * @return {?}
         */
        range(n, offset = 0) {
            return Array(n).fill(0).map((/**
             * @param {?} z
             * @param {?} i
             * @return {?}
             */
            (z, i) => i + offset));
        },
        /**
         * @template T
         * @param {?} items
         * @param {?} groupLength
         * @return {?}
         */
        group(items, groupLength) {
            /** @type {?} */
            const mutable = items.slice(0);
            /** @type {?} */
            const groups = [];
            while (mutable.length > 0) {
                groups.push(mutable.splice(0, groupLength));
            }
            return groups;
        },
        /**
         * @template T
         * @param {?} items
         * @param {?} field
         * @return {?}
         */
        groupBy(items, field) {
            return items.reduce((/**
             * @param {?} groups
             * @param {?} i
             * @return {?}
             */
            (groups, i) => {
                /** @type {?} */
                const fieldValue = i[field].toString();
                groups[fieldValue] = groups[fieldValue] || [];
                groups[fieldValue].push(i);
                return groups;
            }), Object());
        },
        /**
         * @template T
         * @param {?} items
         * @return {?}
         */
        flatten(items) {
            return items.reduce((/**
             * @param {?} is
             * @param {?} i
             * @return {?}
             */
            (is, i) => is.concat(i)), []);
        }
    },
    String: {
        /**
         * @param {?} str
         * @param {?} length
         * @param {?} padding
         * @return {?}
         */
        padLeft(str, length, padding) {
            /** @type {?} */
            let s = str;
            while (s.length < length) {
                s = padding + s;
            }
            return s;
        }
    },
    DOM: {
        /**
         * @param {?} attributeValue
         * @return {?}
         */
        parseBooleanAttribute(attributeValue) {
            /** @type {?} */
            let value = attributeValue;
            if (typeof attributeValue === 'string') {
                value = true;
            }
            return value;
        },
        /**
         * @return {?}
         */
        getDocumentFontSize() {
            return parseFloat(window
                .getComputedStyle(document.documentElement, undefined)
                .getPropertyValue('font-size'));
        }
    },
    Object: {
        /**
         * @template T, U
         * @param {?} object
         * @param {?=} path
         * @return {?}
         */
        readValue(object, path) {
            if (!path) {
                return (/** @type {?} */ ((/** @type {?} */ (object))));
            }
            /** @type {?} */
            let recursed = (/** @type {?} */ ((/** @type {?} */ (object))));
            for (let i = 0, p = path.split('.'), len = p.length; i < len; i++) {
                recursed = ((/** @type {?} */ ((/** @type {?} */ (recursed)))))[p[i]];
            }
            return (/** @type {?} */ ((/** @type {?} */ (recursed))));
        }
    },
    Math: {
        /**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        round(r, n) {
            return Math.round(r / n) * n;
        },
        /**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        roundUp(r, n) {
            return Math.ceil(r / n) * n;
        },
        /**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        roundDown(r, n) {
            return Math.floor(r / n) * n;
        },
        /**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        mod(r, n) {
            /** @type {?} */
            const rem = r % n;
            if (rem < 0) {
                return rem + n;
            }
            return rem;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1pc2MvdXRpbC9oZWxwZXJzL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBRUUsUUFBUztJQUNULE1BQU87SUFDUCxTQUFVO0lBQ1YsUUFBUztJQUVULFVBQVc7SUFDWCxTQUFVO0lBRVYsU0FBVTtJQUNWLFlBQWE7Ozs7Ozs7Ozs7Ozs7O0FBR2YsK0JBRUM7Ozs7O0FBRUQseUNBRUM7OztJQURDLHdDQUFhOzs7OztBQUdmLHVDQUVDOzs7Ozs7SUFEQyw4REFBNkM7O0FBRy9DLE1BQU0sT0FBTyxZQUFZO0NBRXhCOzs7SUFEQyxvQ0FBNkI7Ozs7O0FBRy9CLHFDQUVDOztBQUVELE1BQU0sT0FBTyxJQUFJLEdBQUc7SUFDbEIsS0FBSyxFQUFFOzs7Ozs7UUFDTCxLQUFLLENBQUMsQ0FBUyxFQUFFLFNBQWlCLENBQUM7WUFDakMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7Ozs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFDLENBQUM7UUFDcEQsQ0FBQzs7Ozs7OztRQUNELEtBQUssQ0FBSSxLQUFVLEVBQUUsV0FBbUI7O2tCQUNoQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O2tCQUV4QixNQUFNLEdBQVUsRUFBRTtZQUN4QixPQUFPLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7YUFDN0M7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDOzs7Ozs7O1FBQ0QsT0FBTyxDQUFJLEtBQVUsRUFBRSxLQUFjO1lBQ25DLE9BQU8sS0FBSyxDQUFDLE1BQU07Ozs7O1lBQ2pCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztzQkFDTixVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRTtnQkFDdEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUMsR0FDRCxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsQ0FBQzs7Ozs7O1FBQ0QsT0FBTyxDQUFJLEtBQVk7WUFDckIsT0FBTyxLQUFLLENBQUMsTUFBTTs7Ozs7WUFBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkQsQ0FBQztLQUNGO0lBRUQsTUFBTSxFQUFFOzs7Ozs7O1FBQ04sT0FBTyxDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQUUsT0FBZTs7Z0JBQzlDLENBQUMsR0FBRyxHQUFHO1lBQ1gsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRTtnQkFDeEIsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7YUFDakI7WUFDRCxPQUFPLENBQUMsQ0FBQztRQUNYLENBQUM7S0FDRjtJQUVELEdBQUcsRUFBRTs7Ozs7UUFDSCxxQkFBcUIsQ0FBQyxjQUF1Qjs7Z0JBQ3ZDLEtBQUssR0FBRyxjQUFjO1lBQzFCLElBQUksT0FBTyxjQUFjLEtBQUssUUFBUSxFQUFFO2dCQUN0QyxLQUFLLEdBQUcsSUFBSSxDQUFDO2FBQ2Q7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7Ozs7UUFDRCxtQkFBbUI7WUFDakIsT0FBTyxVQUFVLENBQUMsTUFBTTtpQkFDckIsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUM7aUJBQ3JELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsQ0FBQztLQUNGO0lBRUQsTUFBTSxFQUFFOzs7Ozs7O1FBQ04sU0FBUyxDQUFPLE1BQVMsRUFBRSxJQUFhO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsT0FBTyxtQkFBQSxtQkFBQSxNQUFNLEVBQU8sRUFBSyxDQUFDO2FBQzNCOztnQkFFRyxRQUFRLEdBQUcsbUJBQUEsbUJBQUEsTUFBTSxFQUFPLEVBQW9CO1lBRWhELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pFLFFBQVEsR0FBRyxDQUFDLG1CQUFBLG1CQUFBLFFBQVEsRUFBTyxFQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEQ7WUFFRCxPQUFPLG1CQUFBLG1CQUFBLFFBQVEsRUFBTyxFQUFLLENBQUM7UUFDOUIsQ0FBQztLQUNGO0lBRUQsSUFBSSxFQUFFOzs7Ozs7UUFDSixLQUFLLENBQUMsQ0FBUyxFQUFFLENBQVM7WUFDeEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQzs7Ozs7O1FBQ0QsT0FBTyxDQUFDLENBQVMsRUFBRSxDQUFTO1lBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7Ozs7OztRQUNELFNBQVMsQ0FBQyxDQUFTLEVBQUUsQ0FBUztZQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDOzs7Ozs7UUFDRCxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVM7O2tCQUNoQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDakIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQzthQUNoQjtZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztLQUNGO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBLZXlib2FyZCBrZXljb2Rlcy5cclxuZXhwb3J0IGVudW0gS2V5Q29kZSB7XHJcbiAgTGVmdCA9IDM3LFxyXG4gIFVwID0gMzgsXHJcbiAgUmlnaHQgPSAzOSxcclxuICBEb3duID0gNDAsXHJcblxyXG4gIEVzY2FwZSA9IDI3LFxyXG4gIEVudGVyID0gMTMsXHJcblxyXG4gIFNwYWNlID0gMzIsXHJcbiAgQmFja3NwYWNlID0gOFxyXG59XHJcblxyXG5pbnRlcmZhY2UgSVJlY3Vyc2l2ZU9iamVjdCB7XHJcbiAgW25hbWU6IHN0cmluZ106IElSZWN1cnNpdmVPYmplY3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRlbXBsYXRlUmVmQ29udGV4dDxUPiB7XHJcbiAgJGltcGxpY2l0OiBUO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBdWdtZW50ZWRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XHJcbiAgY2xvc2VzdChzZWxlY3Rvcjogc3RyaW5nKTogSUF1Z21lbnRlZEVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIYW5kbGVkRXZlbnQge1xyXG4gIHB1YmxpYyBldmVudEhhbmRsZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUR5bmFtaWNDbGFzc2VzIHtcclxuICBbbmFtZTogc3RyaW5nXTogdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFV0aWwgPSB7XHJcbiAgQXJyYXk6IHtcclxuICAgIHJhbmdlKG46IG51bWJlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyW10ge1xyXG4gICAgICByZXR1cm4gQXJyYXkobikuZmlsbCgwKS5tYXAoKHosIGkpID0+IGkgKyBvZmZzZXQpO1xyXG4gICAgfSxcclxuICAgIGdyb3VwPFQ+KGl0ZW1zOiBUW10sIGdyb3VwTGVuZ3RoOiBudW1iZXIpOiBUW11bXSB7XHJcbiAgICAgIGNvbnN0IG11dGFibGUgPSBpdGVtcy5zbGljZSgwKTtcclxuXHJcbiAgICAgIGNvbnN0IGdyb3VwczogVFtdW10gPSBbXTtcclxuICAgICAgd2hpbGUgKG11dGFibGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGdyb3Vwcy5wdXNoKG11dGFibGUuc3BsaWNlKDAsIGdyb3VwTGVuZ3RoKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGdyb3VwcztcclxuICAgIH0sXHJcbiAgICBncm91cEJ5PFQ+KGl0ZW1zOiBUW10sIGZpZWxkOiBrZXlvZiBUKTogeyBbbmFtZTogc3RyaW5nXTogVFtdIH0ge1xyXG4gICAgICByZXR1cm4gaXRlbXMucmVkdWNlPHsgW25hbWU6IHN0cmluZ106IFRbXSB9PihcclxuICAgICAgICAoZ3JvdXBzLCBpKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gaVtmaWVsZF0udG9TdHJpbmcoKTtcclxuICAgICAgICAgIGdyb3Vwc1tmaWVsZFZhbHVlXSA9IGdyb3Vwc1tmaWVsZFZhbHVlXSB8fCBbXTtcclxuICAgICAgICAgIGdyb3Vwc1tmaWVsZFZhbHVlXS5wdXNoKGkpO1xyXG4gICAgICAgICAgcmV0dXJuIGdyb3VwcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIE9iamVjdCgpKTtcclxuICAgIH0sXHJcbiAgICBmbGF0dGVuPFQ+KGl0ZW1zOiBUW11bXSk6IFRbXSB7XHJcbiAgICAgIHJldHVybiBpdGVtcy5yZWR1Y2UoKGlzLCBpKSA9PiBpcy5jb25jYXQoaSksIFtdKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBTdHJpbmc6IHtcclxuICAgIHBhZExlZnQoc3RyOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyLCBwYWRkaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICBsZXQgcyA9IHN0cjtcclxuICAgICAgd2hpbGUgKHMubGVuZ3RoIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgcyA9IHBhZGRpbmcgKyBzO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIERPTToge1xyXG4gICAgcGFyc2VCb29sZWFuQXR0cmlidXRlKGF0dHJpYnV0ZVZhbHVlOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgIGxldCB2YWx1ZSA9IGF0dHJpYnV0ZVZhbHVlO1xyXG4gICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZVZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSxcclxuICAgIGdldERvY3VtZW50Rm9udFNpemUoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQod2luZG93XHJcbiAgICAgICAgLmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB1bmRlZmluZWQpXHJcbiAgICAgICAgLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBPYmplY3Q6IHtcclxuICAgIHJlYWRWYWx1ZTxULCBVPihvYmplY3Q6IFQsIHBhdGg/OiBzdHJpbmcpOiBVIHtcclxuICAgICAgaWYgKCFwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdCBhcyBhbnkgYXMgVTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJlY3Vyc2VkID0gb2JqZWN0IGFzIGFueSBhcyBJUmVjdXJzaXZlT2JqZWN0O1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDAsIHAgPSBwYXRoLnNwbGl0KCcuJyksIGxlbiA9IHAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICByZWN1cnNlZCA9IChyZWN1cnNlZCBhcyBhbnkgYXMgSVJlY3Vyc2l2ZU9iamVjdClbcFtpXV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZWN1cnNlZCBhcyBhbnkgYXMgVTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBNYXRoOiB7XHJcbiAgICByb3VuZChyOiBudW1iZXIsIG46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHIgLyBuKSAqIG47XHJcbiAgICB9LFxyXG4gICAgcm91bmRVcChyOiBudW1iZXIsIG46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLmNlaWwociAvIG4pICogbjtcclxuICAgIH0sXHJcbiAgICByb3VuZERvd24ocjogbnVtYmVyLCBuOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihyIC8gbikgKiBuO1xyXG4gICAgfSxcclxuICAgIG1vZChyOiBudW1iZXIsIG46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgIGNvbnN0IHJlbSA9IHIgJSBuO1xyXG4gICAgICBpZiAocmVtIDwgMCkge1xyXG4gICAgICAgIHJldHVybiByZW0gKyBuO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZW07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iXX0=