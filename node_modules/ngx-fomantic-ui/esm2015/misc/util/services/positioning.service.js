/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import Popper from 'popper.js';
/** @type {?} */
export const PositioningPlacement = {
    Auto: (/** @type {?} */ ('auto')),
    TopLeft: (/** @type {?} */ ('top left')),
    Top: (/** @type {?} */ ('top')),
    TopRight: (/** @type {?} */ ('top right')),
    LeftTop: (/** @type {?} */ ('left top')),
    Left: (/** @type {?} */ ('left')),
    LeftBottom: (/** @type {?} */ ('left bottom')),
    BottomLeft: (/** @type {?} */ ('bottom left')),
    Bottom: (/** @type {?} */ ('bottom')),
    BottomRight: (/** @type {?} */ ('bottom right')),
    RightTop: (/** @type {?} */ ('right top')),
    Right: (/** @type {?} */ ('right')),
    RightBottom: (/** @type {?} */ ('right bottom'))
};
/**
 * @record
 */
export function IPositionBoundingBox() { }
if (false) {
    /** @type {?} */
    IPositionBoundingBox.prototype.width;
    /** @type {?} */
    IPositionBoundingBox.prototype.height;
    /** @type {?} */
    IPositionBoundingBox.prototype.top;
    /** @type {?} */
    IPositionBoundingBox.prototype.left;
    /** @type {?} */
    IPositionBoundingBox.prototype.bottom;
    /** @type {?} */
    IPositionBoundingBox.prototype.right;
}
/**
 * @param {?} placement
 * @return {?}
 */
function placementToPopper(placement) {
    if (!placement || placement === PositioningPlacement.Auto) {
        return 'auto';
    }
    // All placements of the format: `direction alignment`, e.g. `top left`.
    const [direction, alignment] = placement.split(' ');
    // Direction alone covers case of just `top`, `left`, `bottom`, `right`.
    /** @type {?} */
    const chosenPlacement = [direction];
    // Add `start` / `end` to placement, depending on alignment direction.
    switch (alignment) {
        case 'top':
        case 'left':
            chosenPlacement.push('start');
            break;
        case 'bottom':
        case 'right':
            chosenPlacement.push('end');
            break;
    }
    // Join with hyphen to create Popper compatible placement.
    return (/** @type {?} */ (chosenPlacement.join('-')));
}
/**
 * @param {?} popper
 * @return {?}
 */
function popperToPlacement(popper) {
    if (!popper || popper === 'auto') {
        return 'auto';
    }
    const [direction, alignment] = popper.split('-');
    /** @type {?} */
    const chosenPlacement = [direction];
    switch (direction) {
        case 'top':
        case 'bottom':
            switch (alignment) {
                case 'start':
                    chosenPlacement.push('left');
                    break;
                case 'end':
                    chosenPlacement.push('right');
                    break;
            }
            break;
        case 'left':
        case 'right':
            switch (alignment) {
                case 'start':
                    chosenPlacement.push('top');
                    break;
                case 'end':
                    chosenPlacement.push('bottom');
                    break;
            }
            break;
    }
    return (/** @type {?} */ (chosenPlacement.join(' ')));
}
export class PositioningService {
    /**
     * @param {?} anchor
     * @param {?} subject
     * @param {?} placement
     * @param {?=} arrowSelector
     */
    constructor(anchor, subject, placement, arrowSelector) {
        this.anchor = anchor;
        this.subject = subject;
        this._placement = placement;
        this._arrowSelector = arrowSelector;
        this.init();
    }
    /**
     * @return {?}
     */
    get actualPlacement() {
        if (!this._popperState) {
            return PositioningPlacement.Auto;
        }
        return popperToPlacement(this._popperState.placement);
    }
    /**
     * @return {?}
     */
    get state() {
        return this._popperState;
    }
    /**
     * @return {?}
     */
    get placement() {
        return this._placement;
    }
    /**
     * @param {?} placement
     * @return {?}
     */
    set placement(placement) {
        this._placement = placement;
        if (this._popper) {
            this._popper.options.placement = placementToPopper(placement);
        }
    }
    /**
     * @param {?} hasArrow
     * @return {?}
     */
    set hasArrow(hasArrow) {
        this._hasArrow = hasArrow;
    }
    /**
     * @return {?}
     */
    init() {
        /** @type {?} */
        const modifiers = {
            computeStyle: {
                gpuAcceleration: false
            },
            preventOverflow: {
                escapeWithReference: true,
                boundariesElement: document.body
            },
            arrow: {
                element: this._arrowSelector
            },
            offset: {
                fn: (/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    if (this._hasArrow) {
                        /** @type {?} */
                        const offsets = this.calculateOffsets();
                        data.offsets.popper.left += offsets.left;
                        data.offsets.popper.top += offsets.top;
                    }
                    return data;
                })
            }
        };
        if (!this._arrowSelector) {
            delete modifiers.arrow;
        }
        this._popper = (/** @type {?} */ (new Popper(this.anchor.nativeElement, this.subject.nativeElement, {
            placement: placementToPopper(this._placement),
            modifiers,
            onCreate: (/**
             * @param {?} initial
             * @return {?}
             */
            initial => this._popperState = initial),
            onUpdate: (/**
             * @param {?} update
             * @return {?}
             */
            update => this._popperState = update)
        })));
    }
    /**
     * @return {?}
     */
    update() {
        this._popper.update();
    }
    /**
     * @return {?}
     */
    destroy() {
        this._popper.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    calculateOffsets() {
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let top = 0;
        // To support correct positioning for all popup sizes we should calculate offset using em
        /** @type {?} */
        const fontSize = parseFloat(window.getComputedStyle(this.subject.nativeElement).getPropertyValue('font-size'));
        // The Fomantic UI popup arrow width and height are 0.71428571em and the margin from the popup edge is 1em
        /** @type {?} */
        const arrowCenter = (0.71428571 / 2 + 1) * fontSize;
        if (this.anchor.nativeElement.offsetWidth <= arrowCenter * 2) {
            /** @type {?} */
            const anchorCenterWidth = this.anchor.nativeElement.offsetWidth / 2;
            if (this._placement === PositioningPlacement.TopLeft || this._placement === PositioningPlacement.BottomLeft) {
                left = anchorCenterWidth - arrowCenter;
            }
            if (this._placement === PositioningPlacement.TopRight || this._placement === PositioningPlacement.BottomRight) {
                left = arrowCenter - anchorCenterWidth;
            }
        }
        if (this.anchor.nativeElement.offsetHeight <= arrowCenter * 2) {
            /** @type {?} */
            const anchorCenterHeight = this.anchor.nativeElement.offsetHeight / 2;
            if (this._placement === PositioningPlacement.LeftTop || this._placement === PositioningPlacement.RightTop) {
                top = anchorCenterHeight - arrowCenter;
            }
            if (this._placement === PositioningPlacement.LeftBottom || this._placement === PositioningPlacement.RightBottom) {
                top = arrowCenter - anchorCenterHeight;
            }
        }
        return { top, left, width: 0, height: 0 };
    }
}
if (false) {
    /** @type {?} */
    PositioningService.prototype.anchor;
    /** @type {?} */
    PositioningService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._popper;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._popperState;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._arrowSelector;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._placement;
    /**
     * @type {?}
     * @private
     */
    PositioningService.prototype._hasArrow;
}
//# sourceMappingURL=data:application/json;base64,