/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import enGB from '../locales/en-GB';
import * as $extend from 'extend';
/**
 * @template T
 * @param {?} obj
 * @return {?}
 */
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
/**
 * @template T, U
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function deepExtend(target, source) {
    // Rollup...
    /** @type {?} */
    const extend = ((/** @type {?} */ ($extend))).default || $extend;
    return extend(true, target, source);
}
/**
 * @param {?} language
 * @return {?}
 */
function lang(language) {
    return language.toLowerCase().replace('-', '');
}
/**
 * @record
 */
function ILocalizationValuesContainer() { }
export class FuiLocalizationService {
    constructor() {
        this.onLanguageUpdate = new EventEmitter();
        this._fallbackValues = enGB;
        this._values = {};
        this._language = 'en-GB';
        this.load('en-GB', enGB);
    }
    /**
     * @return {?}
     */
    get language() {
        return this._language;
    }
    /**
     * @param {?} language
     * @return {?}
     */
    setLanguage(language) {
        if (lang(this._language) !== lang(language)) {
            this._language = language;
            this.onLanguageUpdate.emit();
        }
    }
    /**
     * @param {?=} language
     * @return {?}
     */
    get(language = this.language) {
        /** @type {?} */
        const values = deepClone(this._fallbackValues);
        if (!this._values[lang(language)]) {
            throw new Error(`Locale ${language} is not loaded`);
        }
        deepExtend(values, this._values[lang(language)]);
        return deepClone(values);
    }
    /**
     * @template T
     * @param {?} values
     * @param {?} overrides
     * @return {?}
     */
    override(values, overrides) {
        return deepExtend(deepClone(values), overrides);
    }
    /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    load(language, values) {
        this._values[lang(language)] = deepClone(values);
        this.onLanguageUpdate.emit();
    }
    /**
     * @param {?} language
     * @param {?} values
     * @return {?}
     */
    patch(language, values) {
        deepExtend(this._values[lang(language)], values);
    }
    /**
     * @param {?} value
     * @param {?} variables
     * @return {?}
     */
    interpolate(value, variables) {
        return variables.reduce((/**
         * @param {?} s
         * @param {?} __1
         * @return {?}
         */
        (s, [k, v]) => s.replace(new RegExp(`#{${k}}`, 'g'), v)), value);
    }
}
FuiLocalizationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FuiLocalizationService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    FuiLocalizationService.prototype.onLanguageUpdate;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._fallbackValues;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._values;
    /**
     * @type {?}
     * @private
     */
    FuiLocalizationService.prototype._language;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJiZWhhdmlvcnMvbG9jYWxpemF0aW9uL3NlcnZpY2VzL2xvY2FsaXphdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLElBQUksTUFBTSxrQkFBa0IsQ0FBQztBQUNwQyxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQzs7Ozs7O0FBRWxDLFNBQVMsU0FBUyxDQUFJLEdBQU07SUFDMUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDOzs7Ozs7O0FBRUQsU0FBUyxVQUFVLENBQU8sTUFBUyxFQUFFLE1BQVM7OztVQUV0QyxNQUFNLEdBQUcsQ0FBQyxtQkFBQSxPQUFPLEVBQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPO0lBQ2xELE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsQ0FBQzs7Ozs7QUFFRCxTQUFTLElBQUksQ0FBQyxRQUFnQjtJQUM1QixPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUM7Ozs7QUFFRCwyQ0FFQztBQUdELE1BQU0sT0FBTyxzQkFBc0I7SUFNakM7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVqRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7O0lBSUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxRQUFnQjtRQUNqQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7O0lBRU0sR0FBRyxDQUFDLFdBQW1CLElBQUksQ0FBQyxRQUFROztjQUNuQyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLFFBQVEsZ0JBQWdCLENBQUMsQ0FBQztTQUNyRDtRQUNELFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7Ozs7SUFFTSxRQUFRLENBQ2IsTUFBd0IsRUFDeEIsU0FBNkM7UUFFN0MsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7OztJQUVNLElBQUksQ0FBQyxRQUFnQixFQUFFLE1BQTRCO1FBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTSxLQUFLLENBQUMsUUFBZ0IsRUFBRSxNQUE0QjtRQUN6RCxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7Ozs7SUFFTSxXQUFXLENBQUMsS0FBYSxFQUFFLFNBQTZCO1FBQzdELE9BQU8sU0FBUyxDQUFDLE1BQU07Ozs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRSxLQUFLLENBQUMsQ0FBQztJQUMxRixDQUFDOzs7WUF4REYsVUFBVTs7Ozs7O0lBR1Qsa0RBQTRDOzs7OztJQUM1QyxpREFBdUM7Ozs7O0lBQ3ZDLHlDQUE4Qzs7Ozs7SUFXOUMsMkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXIsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lMb2NhbGVWYWx1ZXMsIElQYXJ0aWFsTG9jYWxlVmFsdWVzLCBSZWN1cnNpdmVQYXJ0aWFsfSBmcm9tICcuLi9sb2NhbGVzL2ludGVyZmFjZXMvdmFsdWVzJztcclxuaW1wb3J0IGVuR0IgZnJvbSAnLi4vbG9jYWxlcy9lbi1HQic7XHJcbmltcG9ydCAqIGFzICRleHRlbmQgZnJvbSAnZXh0ZW5kJztcclxuXHJcbmZ1bmN0aW9uIGRlZXBDbG9uZTxUPihvYmo6IFQpOiBUIHtcclxuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVlcEV4dGVuZDxULCBVPih0YXJnZXQ6IFQsIHNvdXJjZTogVSk6IFQgJiBVIHtcclxuICAvLyBSb2xsdXAuLi5cclxuICBjb25zdCBleHRlbmQgPSAoJGV4dGVuZCBhcyBhbnkpLmRlZmF1bHQgfHwgJGV4dGVuZDtcclxuICByZXR1cm4gZXh0ZW5kKHRydWUsIHRhcmdldCwgc291cmNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGFuZyhsYW5ndWFnZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCctJywgJycpO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSUxvY2FsaXphdGlvblZhbHVlc0NvbnRhaW5lciB7XHJcbiAgW25hbWU6IHN0cmluZ106IElQYXJ0aWFsTG9jYWxlVmFsdWVzO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGdWlMb2NhbGl6YXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgcHVibGljIG9uTGFuZ3VhZ2VVcGRhdGU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICBwcml2YXRlIF9mYWxsYmFja1ZhbHVlczogSUxvY2FsZVZhbHVlcztcclxuICBwcml2YXRlIF92YWx1ZXM6IElMb2NhbGl6YXRpb25WYWx1ZXNDb250YWluZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5vbkxhbmd1YWdlVXBkYXRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIHRoaXMuX2ZhbGxiYWNrVmFsdWVzID0gZW5HQjtcclxuICAgIHRoaXMuX3ZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5fbGFuZ3VhZ2UgPSAnZW4tR0InO1xyXG4gICAgdGhpcy5sb2FkKCdlbi1HQicsIGVuR0IpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfbGFuZ3VhZ2U6IHN0cmluZztcclxuXHJcbiAgcHVibGljIGdldCBsYW5ndWFnZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChsYW5nKHRoaXMuX2xhbmd1YWdlKSAhPT0gbGFuZyhsYW5ndWFnZSkpIHtcclxuICAgICAgdGhpcy5fbGFuZ3VhZ2UgPSBsYW5ndWFnZTtcclxuICAgICAgdGhpcy5vbkxhbmd1YWdlVXBkYXRlLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQobGFuZ3VhZ2U6IHN0cmluZyA9IHRoaXMubGFuZ3VhZ2UpOiBJTG9jYWxlVmFsdWVzIHtcclxuICAgIGNvbnN0IHZhbHVlcyA9IGRlZXBDbG9uZSh0aGlzLl9mYWxsYmFja1ZhbHVlcyk7XHJcbiAgICBpZiAoIXRoaXMuX3ZhbHVlc1tsYW5nKGxhbmd1YWdlKV0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMb2NhbGUgJHtsYW5ndWFnZX0gaXMgbm90IGxvYWRlZGApO1xyXG4gICAgfVxyXG4gICAgZGVlcEV4dGVuZCh2YWx1ZXMsIHRoaXMuX3ZhbHVlc1tsYW5nKGxhbmd1YWdlKV0pO1xyXG4gICAgcmV0dXJuIGRlZXBDbG9uZSh2YWx1ZXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlPFQgZXh0ZW5kcyBrZXlvZiBJTG9jYWxlVmFsdWVzPihcclxuICAgIHZhbHVlczogSUxvY2FsZVZhbHVlc1tUXSxcclxuICAgIG92ZXJyaWRlczogUmVjdXJzaXZlUGFydGlhbDxJTG9jYWxlVmFsdWVzW1RdPlxyXG4gICk6IElMb2NhbGVWYWx1ZXNbVF0ge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQoZGVlcENsb25lKHZhbHVlcyksIG92ZXJyaWRlcyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9hZChsYW5ndWFnZTogc3RyaW5nLCB2YWx1ZXM6IElQYXJ0aWFsTG9jYWxlVmFsdWVzKTogdm9pZCB7XHJcbiAgICB0aGlzLl92YWx1ZXNbbGFuZyhsYW5ndWFnZSldID0gZGVlcENsb25lKHZhbHVlcyk7XHJcbiAgICB0aGlzLm9uTGFuZ3VhZ2VVcGRhdGUuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhdGNoKGxhbmd1YWdlOiBzdHJpbmcsIHZhbHVlczogSVBhcnRpYWxMb2NhbGVWYWx1ZXMpOiB2b2lkIHtcclxuICAgIGRlZXBFeHRlbmQodGhpcy5fdmFsdWVzW2xhbmcobGFuZ3VhZ2UpXSwgdmFsdWVzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnRlcnBvbGF0ZSh2YWx1ZTogc3RyaW5nLCB2YXJpYWJsZXM6IFtzdHJpbmcsIHN0cmluZ11bXSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdmFyaWFibGVzLnJlZHVjZSgocywgW2ssIHZdKSA9PiBzLnJlcGxhY2UobmV3IFJlZ0V4cChgI3ske2t9fWAsICdnJyksIHYpLCB2YWx1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==