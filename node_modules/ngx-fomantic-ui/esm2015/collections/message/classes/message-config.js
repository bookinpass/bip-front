/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
/** @type {?} */
export const MessageState = {
    Default: (/** @type {?} */ ('')),
    Info: (/** @type {?} */ ('info')),
    Success: (/** @type {?} */ ('success')),
    Warning: (/** @type {?} */ ('warning')),
    Error: (/** @type {?} */ ('error'))
};
export class MessageConfig {
    /**
     * @param {?} text
     * @param {?=} state
     * @param {?=} header
     */
    constructor(text, state = MessageState.Default, header) {
        this.text = text;
        this.state = state;
        this.header = header;
        this.timeout = 5000;
        this.extendedTimeout = 1000;
        this.hasDismissButton = true;
        this.hasProgress = false;
        this.transition = 'fade';
        this.transitionInDuration = 400;
        this.transitionOutDuration = 1000;
        this.onClick = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
}
if (false) {
    /** @type {?} */
    MessageConfig.prototype.text;
    /** @type {?} */
    MessageConfig.prototype.header;
    /** @type {?} */
    MessageConfig.prototype.state;
    /** @type {?} */
    MessageConfig.prototype.timeout;
    /** @type {?} */
    MessageConfig.prototype.extendedTimeout;
    /** @type {?} */
    MessageConfig.prototype.hasDismissButton;
    /** @type {?} */
    MessageConfig.prototype.hasProgress;
    /** @type {?} */
    MessageConfig.prototype.transition;
    /** @type {?} */
    MessageConfig.prototype.transitionInDuration;
    /** @type {?} */
    MessageConfig.prototype.transitionOutDuration;
    /** @type {?} */
    MessageConfig.prototype.onClick;
    /** @type {?} */
    MessageConfig.prototype.onDismiss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy9tZXNzYWdlL2NsYXNzZXMvbWVzc2FnZS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBSTNDLE1BQU0sT0FBTyxZQUFZLEdBQUc7SUFDMUIsT0FBTyxFQUFFLG1CQUFBLEVBQUUsRUFBZ0I7SUFDM0IsSUFBSSxFQUFFLG1CQUFBLE1BQU0sRUFBZ0I7SUFDNUIsT0FBTyxFQUFFLG1CQUFBLFNBQVMsRUFBZ0I7SUFDbEMsT0FBTyxFQUFFLG1CQUFBLFNBQVMsRUFBZ0I7SUFDbEMsS0FBSyxFQUFFLG1CQUFBLE9BQU8sRUFBZ0I7Q0FDL0I7QUFFRCxNQUFNLE9BQU8sYUFBYTs7Ozs7O0lBa0J4QixZQUFZLElBQVksRUFBRSxRQUFzQixZQUFZLENBQUMsT0FBTyxFQUFFLE1BQWU7UUFDbkYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUV6QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUN6QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFFbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUM1QyxDQUFDO0NBQ0Y7OztJQW5DQyw2QkFBb0I7O0lBQ3BCLCtCQUF1Qjs7SUFDdkIsOEJBQTJCOztJQUUzQixnQ0FBdUI7O0lBQ3ZCLHdDQUErQjs7SUFFL0IseUNBQWlDOztJQUNqQyxvQ0FBNEI7O0lBRTVCLG1DQUEwQjs7SUFDMUIsNkNBQW9DOztJQUNwQyw4Q0FBcUM7O0lBRXJDLGdDQUFtQzs7SUFDbkMsa0NBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IHR5cGUgTWVzc2FnZVN0YXRlID0gJycgfCAnaW5mbycgfCAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VTdGF0ZSA9IHtcclxuICBEZWZhdWx0OiAnJyBhcyBNZXNzYWdlU3RhdGUsXHJcbiAgSW5mbzogJ2luZm8nIGFzIE1lc3NhZ2VTdGF0ZSxcclxuICBTdWNjZXNzOiAnc3VjY2VzcycgYXMgTWVzc2FnZVN0YXRlLFxyXG4gIFdhcm5pbmc6ICd3YXJuaW5nJyBhcyBNZXNzYWdlU3RhdGUsXHJcbiAgRXJyb3I6ICdlcnJvcicgYXMgTWVzc2FnZVN0YXRlXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZUNvbmZpZyB7XHJcbiAgcHVibGljIHRleHQ6IHN0cmluZztcclxuICBwdWJsaWMgaGVhZGVyPzogc3RyaW5nO1xyXG4gIHB1YmxpYyBzdGF0ZTogTWVzc2FnZVN0YXRlO1xyXG5cclxuICBwdWJsaWMgdGltZW91dDogbnVtYmVyO1xyXG4gIHB1YmxpYyBleHRlbmRlZFRpbWVvdXQ6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGhhc0Rpc21pc3NCdXR0b246IGJvb2xlYW47XHJcbiAgcHVibGljIGhhc1Byb2dyZXNzOiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgdHJhbnNpdGlvbjogc3RyaW5nO1xyXG4gIHB1YmxpYyB0cmFuc2l0aW9uSW5EdXJhdGlvbjogbnVtYmVyO1xyXG4gIHB1YmxpYyB0cmFuc2l0aW9uT3V0RHVyYXRpb246IG51bWJlcjtcclxuXHJcbiAgcHVibGljIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICBwdWJsaWMgb25EaXNtaXNzOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgc3RhdGU6IE1lc3NhZ2VTdGF0ZSA9IE1lc3NhZ2VTdGF0ZS5EZWZhdWx0LCBoZWFkZXI/OiBzdHJpbmcpIHtcclxuICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcclxuXHJcbiAgICB0aGlzLnRpbWVvdXQgPSA1MDAwO1xyXG4gICAgdGhpcy5leHRlbmRlZFRpbWVvdXQgPSAxMDAwO1xyXG5cclxuICAgIHRoaXMuaGFzRGlzbWlzc0J1dHRvbiA9IHRydWU7XHJcbiAgICB0aGlzLmhhc1Byb2dyZXNzID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy50cmFuc2l0aW9uID0gJ2ZhZGUnO1xyXG4gICAgdGhpcy50cmFuc2l0aW9uSW5EdXJhdGlvbiA9IDQwMDtcclxuICAgIHRoaXMudHJhbnNpdGlvbk91dER1cmF0aW9uID0gMTAwMDtcclxuXHJcbiAgICB0aGlzLm9uQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgICB0aGlzLm9uRGlzbWlzcyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICB9XHJcbn1cclxuIl19