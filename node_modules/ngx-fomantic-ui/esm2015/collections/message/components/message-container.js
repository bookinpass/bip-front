/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { ActiveMessage } from '../classes/active-message';
import { FuiMessage } from './message';
import { FuiComponentFactory } from '../../../misc/util/internal';
import { MessageController } from '../classes/message-controller';
export class FuiMessageContainer {
    /**
     * @param {?} _componentFactory
     * @param {?} _element
     */
    constructor(_componentFactory, _element) {
        this._componentFactory = _componentFactory;
        this._element = _element;
        this._messages = [];
        this._queue = [];
    }
    /**
     * @param {?} controller
     * @return {?}
     */
    set controller(controller) {
        controller.registerContainer(this);
    }
    /**
     * @param {?} config
     * @param {?} maxShown
     * @param {?} showNewestFirst
     * @return {?}
     */
    show(config, maxShown, showNewestFirst) {
        /** @type {?} */
        const componentRef = this._componentFactory.createComponent(FuiMessage);
        componentRef.instance.loadConfig(config);
        /** @type {?} */
        const active = new ActiveMessage(config, componentRef)
            .onDismiss((/**
         * @return {?}
         */
        () => this.onMessageClose(active, showNewestFirst)));
        if (this._messages.length < maxShown) {
            this.open(active, showNewestFirst);
        }
        else {
            this.queue(active);
        }
        return active;
    }
    /**
     * @return {?}
     */
    dismissAll() {
        this._queue = [];
        this._messages.forEach((/**
         * @param {?} m
         * @return {?}
         */
        m => m.dismiss()));
    }
    /**
     * @private
     * @param {?} message
     * @param {?} showNewestFirst
     * @return {?}
     */
    open(message, showNewestFirst) {
        this._messages.push(message);
        this._componentFactory.attachToView(message.componentRef, this.containerSibling);
        if (!showNewestFirst) {
            this._componentFactory.moveToElement(message.componentRef, this._element.nativeElement);
        }
        message.component.show();
    }
    /**
     * @private
     * @param {?} message
     * @return {?}
     */
    queue(message) {
        this._queue.push(message);
    }
    /**
     * @private
     * @param {?} message
     * @param {?} showNewestFirst
     * @return {?}
     */
    onMessageClose(message, showNewestFirst) {
        this._messages = this._messages.filter((/**
         * @param {?} m
         * @return {?}
         */
        m => m !== message));
        if (this._queue.length > 0) {
            const [queued] = this._queue.slice(0, 1);
            this.open(queued, showNewestFirst);
        }
    }
}
FuiMessageContainer.decorators = [
    { type: Component, args: [{
                selector: 'fui-message-container',
                template: `
<div #containerSibling></div>
`,
                styles: [`
:host {
    display: block;
}
:host >>> fui-message {
    display: block;
    margin-bottom: 1rem;
}
:host >>> fui-message:last-of-type {
    margin-bottom: 0;
}
:host >>> fui-message {
    cursor: pointer;
}
`]
            }] }
];
/** @nocollapse */
FuiMessageContainer.ctorParameters = () => [
    { type: FuiComponentFactory },
    { type: ElementRef }
];
FuiMessageContainer.propDecorators = {
    containerSibling: [{ type: ViewChild, args: ['containerSibling', { read: ViewContainerRef, static: false },] }],
    controller: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FuiMessageContainer.prototype.containerSibling;
    /**
     * @type {?}
     * @private
     */
    FuiMessageContainer.prototype._messages;
    /**
     * @type {?}
     * @private
     */
    FuiMessageContainer.prototype._queue;
    /**
     * @type {?}
     * @private
     */
    FuiMessageContainer.prototype._componentFactory;
    /**
     * @type {?}
     * @private
     */
    FuiMessageContainer.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1jb250YWluZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy9tZXNzYWdlL2NvbXBvbmVudHMvbWVzc2FnZS1jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEYsT0FBTyxFQUFDLGFBQWEsRUFBbUIsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBdUJoRSxNQUFNLE9BQU8sbUJBQW1COzs7OztJQU05QixZQUFvQixpQkFBc0MsRUFBVSxRQUFvQjtRQUFwRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXFCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUN0RixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVELElBQ1csVUFBVSxDQUFDLFVBQTZCO1FBQ2pELFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7O0lBRU0sSUFBSSxDQUFDLE1BQXFCLEVBQUUsUUFBZ0IsRUFBRSxlQUF3Qjs7Y0FDckUsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO1FBQ3ZFLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUVuQyxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQzthQUNuRCxTQUFTOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBQztRQUVoRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFFBQVEsRUFBRTtZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUFFTSxVQUFVO1FBQ2YsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsQ0FBQztJQUMzQyxDQUFDOzs7Ozs7O0lBRU8sSUFBSSxDQUFDLE9BQXNCLEVBQUUsZUFBd0I7UUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDekY7UUFFRCxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUVPLEtBQUssQ0FBQyxPQUFzQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7Ozs7O0lBRU8sY0FBYyxDQUFDLE9BQXNCLEVBQUUsZUFBd0I7UUFDckUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUMsQ0FBQztRQUUzRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtrQkFDcEIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXhDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQzs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxRQUFRLEVBQUU7O0NBRVg7eUJBQ1U7Ozs7Ozs7Ozs7Ozs7O0NBY1Y7YUFDQTs7OztZQXZCTyxtQkFBbUI7WUFKUixVQUFVOzs7K0JBNkIxQixTQUFTLFNBQUMsa0JBQWtCLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQzt5QkFVckUsS0FBSzs7OztJQVZOLCtDQUMwQzs7Ozs7SUFDMUMsd0NBQW1DOzs7OztJQUNuQyxxQ0FBZ0M7Ozs7O0lBRXBCLGdEQUE4Qzs7Ozs7SUFBRSx1Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TWVzc2FnZUNvbmZpZ30gZnJvbSAnLi4vY2xhc3Nlcy9tZXNzYWdlLWNvbmZpZyc7XHJcbmltcG9ydCB7QWN0aXZlTWVzc2FnZSwgRnVpQWN0aXZlTWVzc2FnZX0gZnJvbSAnLi4vY2xhc3Nlcy9hY3RpdmUtbWVzc2FnZSc7XHJcbmltcG9ydCB7RnVpTWVzc2FnZX0gZnJvbSAnLi9tZXNzYWdlJztcclxuaW1wb3J0IHtGdWlDb21wb25lbnRGYWN0b3J5fSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge01lc3NhZ2VDb250cm9sbGVyfSBmcm9tICcuLi9jbGFzc2VzL21lc3NhZ2UtY29udHJvbGxlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1tZXNzYWdlLWNvbnRhaW5lcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuPGRpdiAjY29udGFpbmVyU2libGluZz48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgXHJcbjpob3N0IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbjpob3N0ID4+PiBmdWktbWVzc2FnZSB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuOmhvc3QgPj4+IGZ1aS1tZXNzYWdlOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG59XHJcbjpob3N0ID4+PiBmdWktbWVzc2FnZSB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aU1lc3NhZ2VDb250YWluZXIge1xyXG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lclNpYmxpbmcnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZX0pXHJcbiAgcHVibGljIGNvbnRhaW5lclNpYmxpbmc6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgcHJpdmF0ZSBfbWVzc2FnZXM6IEFjdGl2ZU1lc3NhZ2VbXTtcclxuICBwcml2YXRlIF9xdWV1ZTogQWN0aXZlTWVzc2FnZVtdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5OiBGdWlDb21wb25lbnRGYWN0b3J5LCBwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLl9tZXNzYWdlcyA9IFtdO1xyXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCBjb250cm9sbGVyKGNvbnRyb2xsZXI6IE1lc3NhZ2VDb250cm9sbGVyKSB7XHJcbiAgICBjb250cm9sbGVyLnJlZ2lzdGVyQ29udGFpbmVyKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNob3coY29uZmlnOiBNZXNzYWdlQ29uZmlnLCBtYXhTaG93bjogbnVtYmVyLCBzaG93TmV3ZXN0Rmlyc3Q6IGJvb2xlYW4pOiBGdWlBY3RpdmVNZXNzYWdlIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuY3JlYXRlQ29tcG9uZW50KEZ1aU1lc3NhZ2UpO1xyXG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmxvYWRDb25maWcoY29uZmlnKTtcclxuXHJcbiAgICBjb25zdCBhY3RpdmUgPSBuZXcgQWN0aXZlTWVzc2FnZShjb25maWcsIGNvbXBvbmVudFJlZilcclxuICAgICAgLm9uRGlzbWlzcygoKSA9PiB0aGlzLm9uTWVzc2FnZUNsb3NlKGFjdGl2ZSwgc2hvd05ld2VzdEZpcnN0KSk7XHJcblxyXG4gICAgaWYgKHRoaXMuX21lc3NhZ2VzLmxlbmd0aCA8IG1heFNob3duKSB7XHJcbiAgICAgIHRoaXMub3BlbihhY3RpdmUsIHNob3dOZXdlc3RGaXJzdCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnF1ZXVlKGFjdGl2ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFjdGl2ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNtaXNzQWxsKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcclxuICAgIHRoaXMuX21lc3NhZ2VzLmZvckVhY2gobSA9PiBtLmRpc21pc3MoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9wZW4obWVzc2FnZTogQWN0aXZlTWVzc2FnZSwgc2hvd05ld2VzdEZpcnN0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xyXG5cclxuICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuYXR0YWNoVG9WaWV3KG1lc3NhZ2UuY29tcG9uZW50UmVmLCB0aGlzLmNvbnRhaW5lclNpYmxpbmcpO1xyXG4gICAgaWYgKCFzaG93TmV3ZXN0Rmlyc3QpIHtcclxuICAgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeS5tb3ZlVG9FbGVtZW50KG1lc3NhZ2UuY29tcG9uZW50UmVmLCB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG1lc3NhZ2UuY29tcG9uZW50LnNob3coKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcXVldWUobWVzc2FnZTogQWN0aXZlTWVzc2FnZSk6IHZvaWQge1xyXG4gICAgdGhpcy5fcXVldWUucHVzaChtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25NZXNzYWdlQ2xvc2UobWVzc2FnZTogQWN0aXZlTWVzc2FnZSwgc2hvd05ld2VzdEZpcnN0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tZXNzYWdlcyA9IHRoaXMuX21lc3NhZ2VzLmZpbHRlcihtID0+IG0gIT09IG1lc3NhZ2UpO1xyXG5cclxuICAgIGlmICh0aGlzLl9xdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IFtxdWV1ZWRdID0gdGhpcy5fcXVldWUuc2xpY2UoMCwgMSk7XHJcblxyXG4gICAgICB0aGlzLm9wZW4ocXVldWVkLCBzaG93TmV3ZXN0Rmlyc3QpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=