/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostListener } from '@angular/core';
import { Util } from '../../../misc/util/internal';
/** @type {?} */
export const MessagePosition = {
    Top: (/** @type {?} */ ('top')),
    TopLeft: (/** @type {?} */ ('top-left')),
    TopRight: (/** @type {?} */ ('top-right')),
    Bottom: (/** @type {?} */ ('bottom')),
    BottomLeft: (/** @type {?} */ ('bottom-left')),
    BottomRight: (/** @type {?} */ ('bottom-right'))
};
export class FuiMessageGlobalContainer {
    /**
     * @return {?}
     */
    get dynamicClasses() {
        /** @type {?} */
        const classes = {};
        this.position
            .split('-')
            .forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => classes[p] = true));
        return classes;
    }
    /**
     * @return {?}
     */
    get dynamicWidth() {
        /** @type {?} */
        const margin = Util.DOM.getDocumentFontSize();
        /** @type {?} */
        let width = this.width;
        if (this.position === MessagePosition.Top ||
            this.position === MessagePosition.Bottom ||
            window.innerWidth < width + margin * 2) {
            width = window.innerWidth - margin * 2;
        }
        return width;
    }
    /**
     * @return {?}
     */
    onDocumentResize() {
    }
}
FuiMessageGlobalContainer.decorators = [
    { type: Component, args: [{
                selector: 'fui-message-global-container',
                template: `
<div class="global container" [ngClass]="dynamicClasses" [style.width.px]="dynamicWidth">
    <fui-message-container [controller]="controller"></fui-message-container>
</div>
`,
                styles: [`
.global.container {
    display: block;
    position: fixed;
}
.global.container.top {
    top: 1rem;
}
.global.container.bottom {
    bottom: 1rem;
}
.global.container.left {
    left: 1rem;
}
.global.container.right {
    right: 1rem;
}
.global.container:not(.left):not(.right) {
    left: 1rem;
}
`]
            }] }
];
FuiMessageGlobalContainer.propDecorators = {
    onDocumentResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    FuiMessageGlobalContainer.prototype.controller;
    /** @type {?} */
    FuiMessageGlobalContainer.prototype.position;
    /** @type {?} */
    FuiMessageGlobalContainer.prototype.width;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1nbG9iYWwtY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsiY29sbGVjdGlvbnMvbWVzc2FnZS9jb21wb25lbnRzL21lc3NhZ2UtZ2xvYmFsLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdEQsT0FBTyxFQUFrQixJQUFJLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7QUFLbEUsTUFBTSxPQUFPLGVBQWUsR0FBRztJQUM3QixHQUFHLEVBQUUsbUJBQUEsS0FBSyxFQUFtQjtJQUM3QixPQUFPLEVBQUUsbUJBQUEsVUFBVSxFQUFtQjtJQUN0QyxRQUFRLEVBQUUsbUJBQUEsV0FBVyxFQUFtQjtJQUN4QyxNQUFNLEVBQUUsbUJBQUEsUUFBUSxFQUFtQjtJQUNuQyxVQUFVLEVBQUUsbUJBQUEsYUFBYSxFQUFtQjtJQUM1QyxXQUFXLEVBQUUsbUJBQUEsY0FBYyxFQUFtQjtDQUMvQztBQStCRCxNQUFNLE9BQU8seUJBQXlCOzs7O0lBTXBDLElBQVcsY0FBYzs7Y0FDakIsT0FBTyxHQUFvQixFQUFFO1FBRW5DLElBQUksQ0FBQyxRQUFRO2FBQ1YsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUMsQ0FBQztRQUVuQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7O0lBRUQsSUFBVyxZQUFZOztjQUNmLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFOztZQUN6QyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFFdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGVBQWUsQ0FBQyxHQUFHO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEtBQUssZUFBZSxDQUFDLE1BQU07WUFDeEMsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUV4QyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7O0lBR00sZ0JBQWdCO0lBQ3ZCLENBQUM7OztZQTdERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtnQkFDeEMsUUFBUSxFQUFFOzs7O0NBSVg7eUJBQ1U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0JWO2FBQ0E7OzsrQkErQkUsWUFBWSxTQUFDLGVBQWU7Ozs7SUE3QjdCLCtDQUFxQzs7SUFFckMsNkNBQWlDOztJQUNqQywwQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSG9zdExpc3RlbmVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtNZXNzYWdlQ29udHJvbGxlcn0gZnJvbSAnLi4vY2xhc3Nlcy9tZXNzYWdlLWNvbnRyb2xsZXInO1xyXG5pbXBvcnQge0lEeW5hbWljQ2xhc3NlcywgVXRpbH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuXHJcbmV4cG9ydCB0eXBlIE1lc3NhZ2VQb3NpdGlvbiA9ICd0b3AnIHwgJ3RvcC1sZWZ0JyB8ICd0b3AtcmlnaHQnIHxcclxuICAnYm90dG9tJyB8ICdib3R0b20tbGVmdCcgfCAnYm90dG9tLXJpZ2h0JztcclxuXHJcbmV4cG9ydCBjb25zdCBNZXNzYWdlUG9zaXRpb24gPSB7XHJcbiAgVG9wOiAndG9wJyBhcyBNZXNzYWdlUG9zaXRpb24sXHJcbiAgVG9wTGVmdDogJ3RvcC1sZWZ0JyBhcyBNZXNzYWdlUG9zaXRpb24sXHJcbiAgVG9wUmlnaHQ6ICd0b3AtcmlnaHQnIGFzIE1lc3NhZ2VQb3NpdGlvbixcclxuICBCb3R0b206ICdib3R0b20nIGFzIE1lc3NhZ2VQb3NpdGlvbixcclxuICBCb3R0b21MZWZ0OiAnYm90dG9tLWxlZnQnIGFzIE1lc3NhZ2VQb3NpdGlvbixcclxuICBCb3R0b21SaWdodDogJ2JvdHRvbS1yaWdodCcgYXMgTWVzc2FnZVBvc2l0aW9uXHJcbn07XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1tZXNzYWdlLWdsb2JhbC1jb250YWluZXInLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxkaXYgY2xhc3M9XCJnbG9iYWwgY29udGFpbmVyXCIgW25nQ2xhc3NdPVwiZHluYW1pY0NsYXNzZXNcIiBbc3R5bGUud2lkdGgucHhdPVwiZHluYW1pY1dpZHRoXCI+XHJcbiAgICA8ZnVpLW1lc3NhZ2UtY29udGFpbmVyIFtjb250cm9sbGVyXT1cImNvbnRyb2xsZXJcIj48L2Z1aS1tZXNzYWdlLWNvbnRhaW5lcj5cclxuPC9kaXY+XHJcbmAsXHJcbiAgc3R5bGVzOiBbYFxyXG4uZ2xvYmFsLmNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxufVxyXG4uZ2xvYmFsLmNvbnRhaW5lci50b3Age1xyXG4gICAgdG9wOiAxcmVtO1xyXG59XHJcbi5nbG9iYWwuY29udGFpbmVyLmJvdHRvbSB7XHJcbiAgICBib3R0b206IDFyZW07XHJcbn1cclxuLmdsb2JhbC5jb250YWluZXIubGVmdCB7XHJcbiAgICBsZWZ0OiAxcmVtO1xyXG59XHJcbi5nbG9iYWwuY29udGFpbmVyLnJpZ2h0IHtcclxuICAgIHJpZ2h0OiAxcmVtO1xyXG59XHJcbi5nbG9iYWwuY29udGFpbmVyOm5vdCgubGVmdCk6bm90KC5yaWdodCkge1xyXG4gICAgbGVmdDogMXJlbTtcclxufVxyXG5gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpTWVzc2FnZUdsb2JhbENvbnRhaW5lciB7XHJcbiAgcHVibGljIGNvbnRyb2xsZXI6IE1lc3NhZ2VDb250cm9sbGVyO1xyXG5cclxuICBwdWJsaWMgcG9zaXRpb246IE1lc3NhZ2VQb3NpdGlvbjtcclxuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGdldCBkeW5hbWljQ2xhc3NlcygpOiBJRHluYW1pY0NsYXNzZXMge1xyXG4gICAgY29uc3QgY2xhc3NlczogSUR5bmFtaWNDbGFzc2VzID0ge307XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvblxyXG4gICAgICAuc3BsaXQoJy0nKVxyXG4gICAgICAuZm9yRWFjaChwID0+IGNsYXNzZXNbcF0gPSB0cnVlKTtcclxuXHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZHluYW1pY1dpZHRoKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBtYXJnaW4gPSBVdGlsLkRPTS5nZXREb2N1bWVudEZvbnRTaXplKCk7XHJcbiAgICBsZXQgd2lkdGggPSB0aGlzLndpZHRoO1xyXG5cclxuICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSBNZXNzYWdlUG9zaXRpb24uVG9wIHx8XHJcbiAgICAgIHRoaXMucG9zaXRpb24gPT09IE1lc3NhZ2VQb3NpdGlvbi5Cb3R0b20gfHxcclxuICAgICAgd2luZG93LmlubmVyV2lkdGggPCB3aWR0aCArIG1hcmdpbiAqIDIpIHtcclxuXHJcbiAgICAgIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBtYXJnaW4gKiAyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB3aWR0aDtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnKVxyXG4gIHB1YmxpYyBvbkRvY3VtZW50UmVzaXplKCk6IHZvaWQge1xyXG4gIH1cclxufVxyXG4iXX0=