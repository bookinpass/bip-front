/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Transition, TransitionController, TransitionDirection } from '../../../modules/transition/internal';
import { MessageConfig } from '../classes/message-config';
/**
 * @record
 */
export function IMessage() { }
if (false) {
    /**
     * @return {?}
     */
    IMessage.prototype.dismiss = function () { };
}
export class FuiMessage {
    constructor() {
        /** @type {?} */
        const config = new MessageConfig('');
        this.loadConfig(config);
        this.isDynamic = false;
        this.transitionOutDuration = 300;
        this.timeoutProgress = 100;
        this.transitionController = new TransitionController(false);
        this.show();
    }
    /**
     * @return {?}
     */
    get dynamicClasses() {
        /** @type {?} */
        const classes = {};
        classes[this.state] = true;
        if (this.isDynamic && this.hasProgress) {
            classes.attached = true;
        }
        (this.classes || '')
            .split(' ')
            .forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => classes[c] = true));
        return classes;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    loadConfig(config) {
        this.isDynamic = true;
        this.text = config.text;
        this.header = config.header;
        this.state = config.state;
        this.timeout = config.timeout;
        this.extendedTimeout = config.extendedTimeout;
        this.hasDismissButton = config.hasDismissButton;
        this.hasProgress = config.hasProgress;
        this.transition = config.transition;
        this.transitionInDuration = config.transitionInDuration;
        this.transitionOutDuration = config.transitionOutDuration;
        this.onClick = config.onClick;
        this.onDismiss = config.onDismiss;
    }
    /**
     * @return {?}
     */
    show() {
        this.transitionController.stopAll();
        this.transitionController.animate(new Transition(this.transition, this.isDynamic ? this.transitionInDuration : 0, TransitionDirection.In, (/**
         * @return {?}
         */
        () => {
            if (this.isDynamic) {
                this.beginTimer(this.timeout);
            }
        })));
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.isDismissing = true;
        this.transitionOutDuration = this.transitionInDuration;
        this.hide();
    }
    /**
     * @return {?}
     */
    hide() {
        this.isClosing = true;
        this.transitionController.stopAll();
        this.transitionController.animate(new Transition(this.transition, this.transitionOutDuration, TransitionDirection.Out, (/**
         * @return {?}
         */
        () => {
            this.isClosing = false;
            this.onDismiss.emit();
        })));
    }
    /**
     * @param {?} timeout
     * @return {?}
     */
    beginTimer(timeout) {
        if (this.isDynamic && !this.isDismissing) {
            this.timeoutProgress = 0;
            this.currentTimeout = timeout;
            this._displayTimeout = window.setTimeout((/**
             * @return {?}
             */
            () => this.onTimedOut()), timeout);
        }
    }
    /**
     * @return {?}
     */
    cancelTimer() {
        if (this.isDynamic && !this.isDismissing) {
            this.timeoutProgress = 100;
            this.currentTimeout = 0;
            clearTimeout(this._displayTimeout);
            if (this.isClosing) {
                this.isClosing = false;
                this.transitionController.cancel();
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClicked(e) {
        if (!e.eventHandled) {
            this.cancelTimer();
            this.onClick.emit();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDismissClicked(e) {
        e.eventHandled = true;
        this.dismiss();
    }
    /**
     * @private
     * @return {?}
     */
    onTimedOut() {
        this.hide();
    }
}
FuiMessage.decorators = [
    { type: Component, args: [{
                selector: 'fui-message',
                template: `
<div [fuiTransition]="transitionController">
    <div class="ui message"
         [ngClass]="dynamicClasses"
         (mousemove)="cancelTimer()"
         (mouseleave)="beginTimer(extendedTimeout)"
         (click)="onClicked($event)">
        <i class="close icon" *ngIf="hasDismissButton" (click)="onDismissClicked($event)"></i>
        <ng-content></ng-content>
        <ng-container *ngIf="isDynamic">
            <div class="header" *ngIf="header">{{ header }}</div>
            <p>{{ text }}</p>
        </ng-container>
    </div>
    <fui-progress *ngIf="isDynamic && hasProgress"
                  class="bottom attached"
                  [value]="timeoutProgress"
                  [autoSuccess]="false"
                  transition="linear"
                  [transitionDuration]="currentTimeout"
                  [canCompletelyEmpty]="true"></fui-progress>
</div>
`
            }] }
];
/** @nocollapse */
FuiMessage.ctorParameters = () => [];
FuiMessage.propDecorators = {
    hasDismissButton: [{ type: Input }],
    transition: [{ type: Input }],
    transitionOutDuration: [{ type: Input, args: ['transitionDuration',] }],
    onClick: [{ type: Output, args: ['click',] }],
    onDismiss: [{ type: Output, args: ['dismiss',] }],
    classes: [{ type: Input, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    FuiMessage.prototype.isDynamic;
    /** @type {?} */
    FuiMessage.prototype.isClosing;
    /** @type {?} */
    FuiMessage.prototype.isDismissing;
    /** @type {?} */
    FuiMessage.prototype.text;
    /** @type {?} */
    FuiMessage.prototype.header;
    /** @type {?} */
    FuiMessage.prototype.state;
    /** @type {?} */
    FuiMessage.prototype.timeout;
    /** @type {?} */
    FuiMessage.prototype.extendedTimeout;
    /** @type {?} */
    FuiMessage.prototype.currentTimeout;
    /** @type {?} */
    FuiMessage.prototype.hasDismissButton;
    /** @type {?} */
    FuiMessage.prototype.hasProgress;
    /** @type {?} */
    FuiMessage.prototype.timeoutProgress;
    /** @type {?} */
    FuiMessage.prototype.transitionController;
    /** @type {?} */
    FuiMessage.prototype.transition;
    /** @type {?} */
    FuiMessage.prototype.transitionInDuration;
    /** @type {?} */
    FuiMessage.prototype.transitionOutDuration;
    /** @type {?} */
    FuiMessage.prototype.onClick;
    /** @type {?} */
    FuiMessage.prototype.onDismiss;
    /** @type {?} */
    FuiMessage.prototype.classes;
    /**
     * @type {?}
     * @private
     */
    FuiMessage.prototype._displayTimeout;
}
//# sourceMappingURL=data:application/json;base64,