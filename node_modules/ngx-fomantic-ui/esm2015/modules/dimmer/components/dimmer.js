/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
import { FuiTransition, Transition, TransitionController, TransitionDirection } from '../../transition/internal';
export class FuiDimmer extends FuiTransition {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} changeDetector
     */
    constructor(renderer, element, changeDetector) {
        super(renderer, element, changeDetector);
        this._isDimmed = false;
        this.isDimmedChange = new EventEmitter();
        this.isClickable = true;
        this.wrapContent = true;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get isDimmed() {
        return this._isDimmed;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isDimmed(value) {
        /** @type {?} */
        const isDimmed = !!value;
        if (!this._transitionController) {
            // Initialise transition functionality when first setting dimmed, to ensure initial state doesn't transition.
            this._transitionController = new TransitionController(isDimmed, 'block');
            this.setTransitionController(this._transitionController);
            this._isDimmed = isDimmed;
        }
        else if (this._isDimmed !== isDimmed) {
            this._isDimmed = isDimmed;
            this._transitionController.stopAll();
            this._transitionController.animate(new Transition('fade', this.transitionDuration, isDimmed ? TransitionDirection.In : TransitionDirection.Out));
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.isClickable) {
            this.isDimmed = false;
            this.isDimmedChange.emit(this.isDimmed);
        }
    }
}
FuiDimmer.decorators = [
    { type: Component, args: [{
                selector: 'fui-dimmer',
                template: `
<div [class.content]="wrapContent">
    <ng-content></ng-content>
</div>
`,
                styles: [`
:host.dimmer:not(.hidden) {
    transition: none;
    display: flex !important;
}
`]
            }] }
];
/** @nocollapse */
FuiDimmer.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
FuiDimmer.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.dimmer',] }],
    isDimmedChange: [{ type: Output }],
    isClickable: [{ type: Input }],
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    wrapContent: [{ type: Input }],
    isDimmed: [{ type: HostBinding, args: ['class.active',] }, { type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    FuiDimmer.prototype.hasClasses;
    /** @type {?} */
    FuiDimmer.prototype.isDimmedChange;
    /** @type {?} */
    FuiDimmer.prototype.isClickable;
    /** @type {?} */
    FuiDimmer.prototype.transition;
    /** @type {?} */
    FuiDimmer.prototype.transitionDuration;
    /** @type {?} */
    FuiDimmer.prototype.wrapContent;
    /**
     * @type {?}
     * @private
     */
    FuiDimmer.prototype._transitionController;
    /**
     * @type {?}
     * @private
     */
    FuiDimmer.prototype._isDimmed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltbWVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kaW1tZXIvY29tcG9uZW50cy9kaW1tZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFJLE9BQU8sRUFBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLG1CQUFtQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFnQi9HLE1BQU0sT0FBTyxTQUFVLFNBQVEsYUFBYTs7Ozs7O0lBa0IxQyxZQUFZLFFBQW1CLEVBQUUsT0FBbUIsRUFBRSxjQUFpQztRQUNyRixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFFeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFFeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQzs7OztJQUlELElBRVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxJQUFXLFFBQVEsQ0FBQyxLQUFjOztjQUMxQixRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUs7UUFFeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUMvQiw2R0FBNkc7WUFDN0csSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksb0JBQW9CLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXpFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztTQUMzQjthQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFFdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFFMUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQ2hDLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDakg7SUFDSCxDQUFDOzs7O0lBR00sT0FBTztRQUNaLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDOzs7WUE5RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUU7Ozs7Q0FJWDt5QkFDVTs7Ozs7Q0FLVjthQUNBOzs7O1lBaEJ5RyxTQUFTO1lBQTdFLFVBQVU7WUFBeEMsaUJBQWlCOzs7eUJBbUJ0QixXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsY0FBYzs2QkFFMUIsTUFBTTswQkFFTixLQUFLO3lCQUVMLEtBQUs7aUNBRUwsS0FBSzswQkFHTCxLQUFLO3VCQWtCTCxXQUFXLFNBQUMsY0FBYyxjQUMxQixLQUFLO3NCQXlCTCxZQUFZLFNBQUMsT0FBTzs7OztJQXhEckIsK0JBRW9DOztJQUNwQyxtQ0FDNkM7O0lBQzdDLGdDQUM0Qjs7SUFDNUIsK0JBQzBCOztJQUMxQix1Q0FDa0M7O0lBRWxDLGdDQUM0Qjs7Ozs7SUFDNUIsMENBQW9EOzs7OztJQWNwRCw4QkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGdWlUcmFuc2l0aW9uLCBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uQ29udHJvbGxlciwgVHJhbnNpdGlvbkRpcmVjdGlvbn0gZnJvbSAnLi4vLi4vdHJhbnNpdGlvbi9pbnRlcm5hbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1kaW1tZXInLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxkaXYgW2NsYXNzLmNvbnRlbnRdPVwid3JhcENvbnRlbnRcIj5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuPC9kaXY+XHJcbmAsXHJcbiAgc3R5bGVzOiBbYFxyXG46aG9zdC5kaW1tZXI6bm90KC5oaWRkZW4pIHtcclxuICAgIHRyYW5zaXRpb246IG5vbmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XHJcbn1cclxuYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aURpbW1lciBleHRlbmRzIEZ1aVRyYW5zaXRpb24ge1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnVpJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpbW1lcicpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcbiAgQE91dHB1dCgpXHJcbiAgcHVibGljIGlzRGltbWVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNDbGlja2FibGU6IGJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgdHJhbnNpdGlvbjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyO1xyXG4gIC8qIEludGVybmFsIGZvciBub3cgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB3cmFwQ29udGVudDogYm9vbGVhbjtcclxuICBwcml2YXRlIF90cmFuc2l0aW9uQ29udHJvbGxlcjogVHJhbnNpdGlvbkNvbnRyb2xsZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgc3VwZXIocmVuZGVyZXIsIGVsZW1lbnQsIGNoYW5nZURldGVjdG9yKTtcclxuXHJcbiAgICB0aGlzLl9pc0RpbW1lZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0RpbW1lZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuICAgIHRoaXMuaXNDbGlja2FibGUgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMud3JhcENvbnRlbnQgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9pc0RpbW1lZDogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKVxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBpc0RpbW1lZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0RpbW1lZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgaXNEaW1tZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGlzRGltbWVkID0gISF2YWx1ZTtcclxuXHJcbiAgICBpZiAoIXRoaXMuX3RyYW5zaXRpb25Db250cm9sbGVyKSB7XHJcbiAgICAgIC8vIEluaXRpYWxpc2UgdHJhbnNpdGlvbiBmdW5jdGlvbmFsaXR5IHdoZW4gZmlyc3Qgc2V0dGluZyBkaW1tZWQsIHRvIGVuc3VyZSBpbml0aWFsIHN0YXRlIGRvZXNuJ3QgdHJhbnNpdGlvbi5cclxuICAgICAgdGhpcy5fdHJhbnNpdGlvbkNvbnRyb2xsZXIgPSBuZXcgVHJhbnNpdGlvbkNvbnRyb2xsZXIoaXNEaW1tZWQsICdibG9jaycpO1xyXG5cclxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uQ29udHJvbGxlcih0aGlzLl90cmFuc2l0aW9uQ29udHJvbGxlcik7XHJcblxyXG4gICAgICB0aGlzLl9pc0RpbW1lZCA9IGlzRGltbWVkO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9pc0RpbW1lZCAhPT0gaXNEaW1tZWQpIHtcclxuXHJcbiAgICAgIHRoaXMuX2lzRGltbWVkID0gaXNEaW1tZWQ7XHJcblxyXG4gICAgICB0aGlzLl90cmFuc2l0aW9uQ29udHJvbGxlci5zdG9wQWxsKCk7XHJcbiAgICAgIHRoaXMuX3RyYW5zaXRpb25Db250cm9sbGVyLmFuaW1hdGUoXHJcbiAgICAgICAgbmV3IFRyYW5zaXRpb24oJ2ZhZGUnLCB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiwgaXNEaW1tZWQgPyBUcmFuc2l0aW9uRGlyZWN0aW9uLkluIDogVHJhbnNpdGlvbkRpcmVjdGlvbi5PdXQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBwdWJsaWMgb25DbGljaygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlzQ2xpY2thYmxlKSB7XHJcbiAgICAgIHRoaXMuaXNEaW1tZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5pc0RpbW1lZENoYW5nZS5lbWl0KHRoaXMuaXNEaW1tZWQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=