/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, QueryList } from '@angular/core';
import { HandledEvent, KeyCode } from '../../../misc/util/internal';
import { DropdownAutoCloseType, DropdownService } from '../services/dropdown.service';
import { FuiDropdownMenu } from './dropdown-menu';
export class FuiDropdown {
    /**
     * @param {?} _element
     */
    constructor(_element) {
        this._element = _element;
        this.service = new DropdownService();
        this.service.isOpenChange.subscribe((/**
         * @return {?}
         */
        () => {
            if (this.service.isOpen) {
                this._element.nativeElement.focus();
            }
        }));
    }
    /**
     * @return {?}
     */
    get isOpenChange() {
        return this.service.isOpenChange;
    }
    /**
     * @return {?}
     */
    get isActive() {
        // This is to ensure nested dropdowns don't get made bold.
        return this.service.isOpen && !this.service.isNested;
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this.service.isOpen;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        // If we are opening the dropdown, we want to always open its parents.
        this.service.setOpenState(value, !!value);
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        return this.service.isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isDisabled(value) {
        this.service.setDisabledState(value);
    }
    /**
     * @return {?}
     */
    get autoClose() {
        return this.service.autoCloseMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoClose(value) {
        this.service.autoCloseMode = value;
    }
    /**
     * @return {?}
     */
    get children() {
        // @ContentChildren includes the current element by default.
        return this._children.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c !== this));
    }
    /**
     * @return {?}
     */
    get tabIndex() {
        if (this.isDisabled || this.service.isNested) {
            // If disabled, remove from tabindex.
            return undefined;
        }
        if (this._tabIndex != undefined) {
            // If custom tabindex, default to that.
            return this._tabIndex;
        }
        // Otherwise, return default of 0.
        return 0;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (!this._menu) {
            throw new Error('You must set [fuiDropdownMenu] on the menu element.');
        }
        this._menu.service = this.service;
        this._menu.parentElement = this._element;
        this.childrenUpdated();
        this._children.changes
            .subscribe((/**
         * @return {?}
         */
        () => this.childrenUpdated()));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            this.service.toggleOpenState();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocusOut(e) {
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.externallyClose();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeypress(e) {
        // Block the keyboard event from being fired on parent dropdowns.
        if (!e.eventHandled) {
            if (e.keyCode === KeyCode.Enter) {
                e.eventHandled = true;
                this.service.setOpenState(true);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    childrenUpdated() {
        // Reregister child dropdowns each time the menu content changes.
        this.children
            .map((/**
         * @param {?} c
         * @return {?}
         */
        c => c.service))
            .forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => this.service.registerChild(s)));
    }
    /**
     * @private
     * @return {?}
     */
    externallyClose() {
        if (this.service.autoCloseMode === DropdownAutoCloseType.ItemClick ||
            this.service.autoCloseMode === DropdownAutoCloseType.OutsideClick) {
            // No need to reflect in parent since they are also bound to document.
            this.service.setOpenState(false);
        }
    }
}
FuiDropdown.decorators = [
    { type: Directive, args: [{
                selector: '[fuiDropdown]'
            },] }
];
/** @nocollapse */
FuiDropdown.ctorParameters = () => [
    { type: ElementRef }
];
FuiDropdown.propDecorators = {
    _menu: [{ type: ContentChild, args: [FuiDropdownMenu, { static: false },] }],
    isOpenChange: [{ type: Output }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    isOpen: [{ type: Input }],
    isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
    autoClose: [{ type: Input }],
    _children: [{ type: ContentChildren, args: [FuiDropdown, { descendants: true },] }],
    _tabIndex: [{ type: Input, args: ['tabindex',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }],
    onKeypress: [{ type: HostListener, args: ['keypress', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiDropdown.prototype.service;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._menu;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._children;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    FuiDropdown.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,