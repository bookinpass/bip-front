/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FuiComponentFactory } from '../../../misc/util/internal';
import { ComponentModalConfig, TemplateModalConfig } from '../classes/modal-config';
import { FuiModal } from '../components/modal';
import { Modal } from '../classes/modal-controls';
import { ActiveModal } from '../classes/active-modal';
export class FuiModalService {
    /**
     * @param {?} _componentFactory
     */
    constructor(_componentFactory) {
        this._componentFactory = _componentFactory;
    }
    /**
     * @template T, U, V
     * @param {?} modal
     * @return {?}
     */
    open(modal) {
        // Generate the modal component to be shown.
        /** @type {?} */
        const componentRef = this._componentFactory.createComponent(FuiModal);
        // Shorthand for the created modal component instance.
        /** @type {?} */
        const modalComponent = componentRef.instance;
        if (modal instanceof TemplateModalConfig) {
            // Inject the template into the view.
            this._componentFactory.createView(modalComponent.templateSibling, modal.template, {
                // `let-context`
                $implicit: modal.context,
                // `let-modal="modal"`
                modal: componentRef.instance.controls
            });
        }
        else if (modal instanceof ComponentModalConfig) {
            // Generate the component to be used as the modal content,
            // injecting an instance of `Modal` to be used in the component constructor.
            /** @type {?} */
            const contentComponentRef = this._componentFactory.createComponent(modal.component, [
                {
                    provide: Modal,
                    useValue: new Modal(modalComponent.controls, modal.context)
                }
            ]);
            // Insert the new component into the content of the modal.
            this._componentFactory.attachToView(contentComponentRef, modalComponent.templateSibling);
            // Shorthand for access to the content component's DOM element.
            /** @type {?} */
            const contentElement = (/** @type {?} */ (contentComponentRef.location.nativeElement));
            // Move all of the DOM elements inside the component to the main modal element.
            // This is done so that CSS classes apply correctly. It does stop any custom styles from working however,
            // so other ways may have to be investigated.
            while (contentElement.hasChildNodes() && contentElement.parentElement && contentElement.firstChild) {
                contentElement.parentElement.appendChild(contentElement.removeChild(contentElement.firstChild));
            }
            // Remove the generated component's 'empty shell' from the DOM.
            this._componentFactory.detachFromDocument(contentComponentRef);
        }
        // Attach the new modal component to the application.
        // The component will move itself to the document body for correctl styling.
        this._componentFactory.attachToApplication(componentRef);
        // Initialise the generated modal with the provided config.
        modalComponent.loadConfig(modal);
        // Return an instance of an `ActiveModal`, so the user can control the new modal.
        return new ActiveModal(modal, componentRef);
    }
}
FuiModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FuiModalService.ctorParameters = () => [
    { type: FuiComponentFactory }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuiModalService.prototype._componentFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvbW9kYWwvc2VydmljZXMvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsb0JBQW9CLEVBQWUsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUdwRCxNQUFNLE9BQU8sZUFBZTs7OztJQUMxQixZQUFvQixpQkFBc0M7UUFBdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFxQjtJQUMxRCxDQUFDOzs7Ozs7SUFFTSxJQUFJLENBQVUsS0FBMkI7OztjQUV4QyxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBaUIsUUFBUSxDQUFDOzs7Y0FHL0UsY0FBYyxHQUFHLFlBQVksQ0FBQyxRQUFRO1FBRTVDLElBQUksS0FBSyxZQUFZLG1CQUFtQixFQUFFO1lBQ3hDLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTs7Z0JBRWhGLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTzs7Z0JBRXhCLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVE7YUFDdEMsQ0FBQyxDQUFDO1NBQ0o7YUFBTSxJQUFJLEtBQUssWUFBWSxvQkFBb0IsRUFBRTs7OztrQkFHMUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FDaEUsS0FBSyxDQUFDLFNBQVMsRUFDZjtnQkFDRTtvQkFDRSxPQUFPLEVBQUUsS0FBSztvQkFDZCxRQUFRLEVBQUUsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDO2lCQUM1RDthQUNGLENBQ0Y7WUFFRCwwREFBMEQ7WUFDMUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7OztrQkFHbkYsY0FBYyxHQUFHLG1CQUFBLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQVc7WUFFNUUsK0VBQStFO1lBQy9FLHlHQUF5RztZQUN6Ryw2Q0FBNkM7WUFDN0MsT0FBTyxjQUFjLENBQUMsYUFBYSxFQUFFLElBQUksY0FBYyxDQUFDLGFBQWEsSUFBSSxjQUFjLENBQUMsVUFBVSxFQUFFO2dCQUNsRyxjQUFjLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQ2pHO1lBQ0QsK0RBQStEO1lBQy9ELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQscURBQXFEO1FBQ3JELDRFQUE0RTtRQUM1RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFekQsMkRBQTJEO1FBQzNELGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakMsaUZBQWlGO1FBQ2pGLE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzlDLENBQUM7OztZQTFERixVQUFVOzs7O1lBTkgsbUJBQW1COzs7Ozs7O0lBUWIsNENBQThDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGdWlDb21wb25lbnRGYWN0b3J5fSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge0NvbXBvbmVudE1vZGFsQ29uZmlnLCBNb2RhbENvbmZpZywgVGVtcGxhdGVNb2RhbENvbmZpZ30gZnJvbSAnLi4vY2xhc3Nlcy9tb2RhbC1jb25maWcnO1xyXG5pbXBvcnQge0Z1aU1vZGFsfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGFsJztcclxuaW1wb3J0IHtNb2RhbH0gZnJvbSAnLi4vY2xhc3Nlcy9tb2RhbC1jb250cm9scyc7XHJcbmltcG9ydCB7QWN0aXZlTW9kYWx9IGZyb20gJy4uL2NsYXNzZXMvYWN0aXZlLW1vZGFsJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZ1aU1vZGFsU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeTogRnVpQ29tcG9uZW50RmFjdG9yeSkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9wZW48VCwgVSwgVj4obW9kYWw6IE1vZGFsQ29uZmlnPFQsIFUsIFY+KTogQWN0aXZlTW9kYWw8VCwgVSwgVj4ge1xyXG4gICAgLy8gR2VuZXJhdGUgdGhlIG1vZGFsIGNvbXBvbmVudCB0byBiZSBzaG93bi5cclxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuY3JlYXRlQ29tcG9uZW50PEZ1aU1vZGFsPFUsIFY+PihGdWlNb2RhbCk7XHJcblxyXG4gICAgLy8gU2hvcnRoYW5kIGZvciB0aGUgY3JlYXRlZCBtb2RhbCBjb21wb25lbnQgaW5zdGFuY2UuXHJcbiAgICBjb25zdCBtb2RhbENvbXBvbmVudCA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcclxuXHJcbiAgICBpZiAobW9kYWwgaW5zdGFuY2VvZiBUZW1wbGF0ZU1vZGFsQ29uZmlnKSB7XHJcbiAgICAgIC8vIEluamVjdCB0aGUgdGVtcGxhdGUgaW50byB0aGUgdmlldy5cclxuICAgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeS5jcmVhdGVWaWV3KG1vZGFsQ29tcG9uZW50LnRlbXBsYXRlU2libGluZywgbW9kYWwudGVtcGxhdGUsIHtcclxuICAgICAgICAvLyBgbGV0LWNvbnRleHRgXHJcbiAgICAgICAgJGltcGxpY2l0OiBtb2RhbC5jb250ZXh0LFxyXG4gICAgICAgIC8vIGBsZXQtbW9kYWw9XCJtb2RhbFwiYFxyXG4gICAgICAgIG1vZGFsOiBjb21wb25lbnRSZWYuaW5zdGFuY2UuY29udHJvbHNcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKG1vZGFsIGluc3RhbmNlb2YgQ29tcG9uZW50TW9kYWxDb25maWcpIHtcclxuICAgICAgLy8gR2VuZXJhdGUgdGhlIGNvbXBvbmVudCB0byBiZSB1c2VkIGFzIHRoZSBtb2RhbCBjb250ZW50LFxyXG4gICAgICAvLyBpbmplY3RpbmcgYW4gaW5zdGFuY2Ugb2YgYE1vZGFsYCB0byBiZSB1c2VkIGluIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3IuXHJcbiAgICAgIGNvbnN0IGNvbnRlbnRDb21wb25lbnRSZWYgPSB0aGlzLl9jb21wb25lbnRGYWN0b3J5LmNyZWF0ZUNvbXBvbmVudChcclxuICAgICAgICBtb2RhbC5jb21wb25lbnQsXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBNb2RhbCxcclxuICAgICAgICAgICAgdXNlVmFsdWU6IG5ldyBNb2RhbChtb2RhbENvbXBvbmVudC5jb250cm9scywgbW9kYWwuY29udGV4dClcclxuICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBJbnNlcnQgdGhlIG5ldyBjb21wb25lbnQgaW50byB0aGUgY29udGVudCBvZiB0aGUgbW9kYWwuXHJcbiAgICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnkuYXR0YWNoVG9WaWV3KGNvbnRlbnRDb21wb25lbnRSZWYsIG1vZGFsQ29tcG9uZW50LnRlbXBsYXRlU2libGluZyk7XHJcblxyXG4gICAgICAvLyBTaG9ydGhhbmQgZm9yIGFjY2VzcyB0byB0aGUgY29udGVudCBjb21wb25lbnQncyBET00gZWxlbWVudC5cclxuICAgICAgY29uc3QgY29udGVudEVsZW1lbnQgPSBjb250ZW50Q29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQgYXMgRWxlbWVudDtcclxuXHJcbiAgICAgIC8vIE1vdmUgYWxsIG9mIHRoZSBET00gZWxlbWVudHMgaW5zaWRlIHRoZSBjb21wb25lbnQgdG8gdGhlIG1haW4gbW9kYWwgZWxlbWVudC5cclxuICAgICAgLy8gVGhpcyBpcyBkb25lIHNvIHRoYXQgQ1NTIGNsYXNzZXMgYXBwbHkgY29ycmVjdGx5LiBJdCBkb2VzIHN0b3AgYW55IGN1c3RvbSBzdHlsZXMgZnJvbSB3b3JraW5nIGhvd2V2ZXIsXHJcbiAgICAgIC8vIHNvIG90aGVyIHdheXMgbWF5IGhhdmUgdG8gYmUgaW52ZXN0aWdhdGVkLlxyXG4gICAgICB3aGlsZSAoY29udGVudEVsZW1lbnQuaGFzQ2hpbGROb2RlcygpICYmIGNvbnRlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgJiYgY29udGVudEVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgIGNvbnRlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY29udGVudEVsZW1lbnQuZmlyc3RDaGlsZCkpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFJlbW92ZSB0aGUgZ2VuZXJhdGVkIGNvbXBvbmVudCdzICdlbXB0eSBzaGVsbCcgZnJvbSB0aGUgRE9NLlxyXG4gICAgICB0aGlzLl9jb21wb25lbnRGYWN0b3J5LmRldGFjaEZyb21Eb2N1bWVudChjb250ZW50Q29tcG9uZW50UmVmKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBdHRhY2ggdGhlIG5ldyBtb2RhbCBjb21wb25lbnQgdG8gdGhlIGFwcGxpY2F0aW9uLlxyXG4gICAgLy8gVGhlIGNvbXBvbmVudCB3aWxsIG1vdmUgaXRzZWxmIHRvIHRoZSBkb2N1bWVudCBib2R5IGZvciBjb3JyZWN0bCBzdHlsaW5nLlxyXG4gICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeS5hdHRhY2hUb0FwcGxpY2F0aW9uKGNvbXBvbmVudFJlZik7XHJcblxyXG4gICAgLy8gSW5pdGlhbGlzZSB0aGUgZ2VuZXJhdGVkIG1vZGFsIHdpdGggdGhlIHByb3ZpZGVkIGNvbmZpZy5cclxuICAgIG1vZGFsQ29tcG9uZW50LmxvYWRDb25maWcobW9kYWwpO1xyXG5cclxuICAgIC8vIFJldHVybiBhbiBpbnN0YW5jZSBvZiBhbiBgQWN0aXZlTW9kYWxgLCBzbyB0aGUgdXNlciBjYW4gY29udHJvbCB0aGUgbmV3IG1vZGFsLlxyXG4gICAgcmV0dXJuIG5ldyBBY3RpdmVNb2RhbChtb2RhbCwgY29tcG9uZW50UmVmKTtcclxuICB9XHJcbn1cclxuIl19