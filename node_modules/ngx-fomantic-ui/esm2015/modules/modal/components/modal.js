/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { KeyCode, FuiComponentFactory, Util } from '../../../misc/util/internal';
import { Transition, TransitionController, TransitionDirection } from '../../transition/internal';
import { ModalControls } from '../classes/modal-controls';
import { ModalConfig, ModalSize } from '../classes/modal-config';
/**
 * @template T, U
 */
export class FuiModal {
    /**
     * @param {?} _renderer
     * @param {?} _element
     * @param {?} _componentFactory
     */
    constructor(_renderer, _element, _componentFactory) {
        this._renderer = _renderer;
        this._element = _element;
        this._componentFactory = _componentFactory;
        // Initialise with default configuration from `ModalConfig` (to avoid writing defaults twice).
        /** @type {?} */
        const config = new ModalConfig();
        this.loadConfig(config);
        // Event emitters for each of the possible modal outcomes.
        this.onApprove = new EventEmitter();
        this.onDeny = new EventEmitter();
        this.onDismiss = new EventEmitter();
        // Initialise controls with actions for the `approve` and `deny` cases.
        this.controls = new ModalControls((/**
         * @param {?} res
         * @return {?}
         */
        res => this.dismiss((/**
         * @return {?}
         */
        () => this.onApprove.emit(res)))), (/**
         * @param {?} res
         * @return {?}
         */
        res => this.dismiss((/**
         * @return {?}
         */
        () => this.onDeny.emit(res)))));
        // Internal variable initialisation.
        this.dimBackground = false;
        this._isClosing = false;
        this.transitionController = new TransitionController(false);
    }
    /**
     * @return {?}
     */
    get approve() {
        return this.controls.approve;
    }
    /**
     * @return {?}
     */
    get deny() {
        return this.controls.deny;
    }
    /**
     * @return {?}
     */
    get dynamicClasses() {
        /** @type {?} */
        const classes = {};
        if (this.size) {
            classes[this.size] = true;
        }
        return classes;
    }
    // Value to deny with when closing via `isClosable`.
    /**
     * @return {?}
     */
    get isFullScreen() {
        return this._isFullScreen;
    }
    /**
     * @param {?} fullScreen
     * @return {?}
     */
    set isFullScreen(fullScreen) {
        this._isFullScreen = Util.DOM.parseBooleanAttribute(fullScreen);
    }
    /**
     * @return {?}
     */
    get mustScroll() {
        return this._mustScroll;
    }
    /**
     * @param {?} mustScroll
     * @return {?}
     */
    set mustScroll(mustScroll) {
        this._mustScroll = mustScroll;
        // 'Cache' value in _mustAlwaysScroll so that if `true`, _mustScroll isn't ever auto-updated.
        this._mustAlwaysScroll = mustScroll;
        this.updateScroll();
    }
    /**
     * @return {?}
     */
    get isInverted() {
        return this._isInverted;
    }
    /**
     * @param {?} inverted
     * @return {?}
     */
    set isInverted(inverted) {
        this._isInverted = Util.DOM.parseBooleanAttribute(inverted);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Transition the modal to be visible.
        this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.In));
        setTimeout((/**
         * @return {?}
         */
        () => this.dimBackground = true));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Move the modal to the document body to ensure correct scrolling.
        this._originalContainer = this._element.nativeElement.parentNode;
        (/** @type {?} */ (document.querySelector('body'))).appendChild(this._element.nativeElement);
        // Remove the #templateSibling element from the DOM to fix bottom border styles.
        /** @type {?} */
        const templateElement = (/** @type {?} */ (this.templateSibling.element.nativeElement));
        if (templateElement.parentNode) {
            templateElement.parentNode.removeChild(templateElement);
        }
        /** @type {?} */
        const element = (/** @type {?} */ (this._modalElement.nativeElement));
        setTimeout((/**
         * @return {?}
         */
        () => this.updateScroll()));
        // Focus any element with [autofocus] attribute.
        /** @type {?} */
        const autoFocus = (/** @type {?} */ (element.querySelector('[autofocus]')));
        if (autoFocus) {
            // Autofocus after the browser has had time to process other event handlers.
            setTimeout((/**
             * @return {?}
             */
            () => autoFocus.focus()), 10);
            // Try to focus again when the modal has opened so that autofocus works in IE11.
            setTimeout((/**
             * @return {?}
             */
            () => autoFocus.focus()), this.transitionDuration);
        }
    }
    // Updates the modal with the specified configuration.
    /**
     * @template V
     * @param {?} config
     * @return {?}
     */
    loadConfig(config) {
        this.isClosable = config.isClosable;
        this.closeResult = config.closeResult;
        this.size = config.size;
        this.isFullScreen = config.isFullScreen;
        this.isBasic = config.isBasic;
        this.isInverted = config.isInverted;
        this.isCentered = config.isCentered;
        this.mustScroll = config.mustScroll;
        this.transition = config.transition;
        this.transitionDuration = config.transitionDuration;
    }
    // Closes the modal with a 'deny' outcome, using the specified default reason.
    /**
     * @return {?}
     */
    close() {
        if (this.isClosable) {
            // If we are allowed to close, fire the deny result with the default value.
            this.deny(this.closeResult);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        // Makes sense here, as the modal shouldn't be attached to any DOM element.
        e.stopPropagation();
    }
    // Document listener is fine here because nobody will have enough modals open.
    /**
     * @param {?} e
     * @return {?}
     */
    onDocumentKeyUp(e) {
        if (e.keyCode === KeyCode.Escape) {
            // Close automatically covers case of `!isClosable`, so check not needed.
            this.close();
        }
    }
    /**
     * @return {?}
     */
    onDocumentResize() {
        this.updateScroll();
    }
    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.
    /**
     * @private
     * @param {?=} callback
     * @return {?}
     */
    dismiss(callback = (/**
     * @return {?}
     */
    () => {
    })) {
        // If we aren't currently closing,
        if (!this._isClosing) {
            this._isClosing = true;
            // Transition the modal to be invisible.
            this.dimBackground = false;
            this.transitionController.stopAll();
            this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.Out, (/**
             * @return {?}
             */
            () => {
                // When done, move the modal back to its original location, emit a dismiss event, and fire the callback.
                if (this._originalContainer) {
                    this._originalContainer.appendChild(this._element.nativeElement);
                }
                this.onDismiss.emit();
                callback();
            })));
        }
    }
    // Decides whether the modal needs to reposition to allow scrolling.
    /**
     * @private
     * @return {?}
     */
    updateScroll() {
        // _mustAlwaysScroll works by stopping _mustScroll from being automatically updated, so it stays `true`.
        if (!this._mustAlwaysScroll && this._modalElement) {
            // Fomantic UI modal margin and dimmer padding are 1rem, which is relative to the global font size, so for compatibility:
            /** @type {?} */
            const fontSize = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));
            /** @type {?} */
            const margin = fontSize * 2;
            /** @type {?} */
            const element = (/** @type {?} */ (this._modalElement.nativeElement));
            // The modal must scroll if the window height is smaller than the modal height + both margins.
            this._mustScroll = window.innerHeight < element.clientHeight + margin * 2;
        }
    }
}
FuiModal.decorators = [
    { type: Component, args: [{
                selector: 'fui-modal',
                template: `
<!-- Page dimmer for modal background. -->
<fui-modal-dimmer [ngClass]="{'top aligned': !isCentered}"
                  [class.inverted]="isInverted"
                  [(isDimmed)]="dimBackground"
                  [transitionDuration]="transitionDuration"
                  (click)="close()">

    <!-- Modal component, with transition component attached -->
    <div class="ui modal"
         [fuiTransition]="transitionController"
         [class.active]="transitionController?.isVisible"
         [class.fullscreen]="isFullScreen"
         [class.basic]="isBasic"
         [class.scrolling]="mustScroll"
         [class.inverted]="isInverted"
         [ngClass]="dynamicClasses"
         (click)="onClick($event)"
         #modal>

        <!-- Configurable close icon -->
        <i class="close icon" *ngIf="isClosable" (click)="close()"></i>
        <!-- <ng-content> so that <fui-modal> can be used as a normal component. -->
        <ng-content></ng-content>
        <!-- @ViewChild reference so we can insert elements beside this div. -->
        <div #templateSibling></div>
    </div>
</fui-modal-dimmer>
`,
                styles: [``]
            }] }
];
/** @nocollapse */
FuiModal.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: FuiComponentFactory }
];
FuiModal.propDecorators = {
    isClosable: [{ type: Input }],
    closeResult: [{ type: Input }],
    onApprove: [{ type: Output, args: ['approved',] }],
    onDeny: [{ type: Output, args: ['denied',] }],
    onDismiss: [{ type: Output, args: ['dismissed',] }],
    size: [{ type: Input }],
    isCentered: [{ type: Input }],
    isBasic: [{ type: Input }],
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    templateSibling: [{ type: ViewChild, args: ['templateSibling', { read: ViewContainerRef, static: true },] }],
    _modalElement: [{ type: ViewChild, args: ['modal', { static: false },] }],
    isFullScreen: [{ type: Input }],
    mustScroll: [{ type: Input }],
    isInverted: [{ type: Input }],
    onDocumentKeyUp: [{ type: HostListener, args: ['document:keyup', ['$event'],] }],
    onDocumentResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    FuiModal.prototype.isClosable;
    /** @type {?} */
    FuiModal.prototype.closeResult;
    /** @type {?} */
    FuiModal.prototype.controls;
    /** @type {?} */
    FuiModal.prototype.onApprove;
    /** @type {?} */
    FuiModal.prototype.onDeny;
    /** @type {?} */
    FuiModal.prototype.onDismiss;
    /** @type {?} */
    FuiModal.prototype.size;
    /** @type {?} */
    FuiModal.prototype.isCentered;
    /** @type {?} */
    FuiModal.prototype.isBasic;
    /** @type {?} */
    FuiModal.prototype.transitionController;
    /** @type {?} */
    FuiModal.prototype.transition;
    /** @type {?} */
    FuiModal.prototype.transitionDuration;
    /** @type {?} */
    FuiModal.prototype.dimBackground;
    /** @type {?} */
    FuiModal.prototype.templateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._modalElement;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._mustAlwaysScroll;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isClosing;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._originalContainer;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isFullScreen;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._mustScroll;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._isInverted;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiModal.prototype._componentFactory;
}
//# sourceMappingURL=data:application/json;base64,