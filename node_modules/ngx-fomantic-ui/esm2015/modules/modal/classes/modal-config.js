/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const ModalSize = {
    Mini: (/** @type {?} */ ('mini')),
    Tiny: (/** @type {?} */ ('tiny')),
    Small: (/** @type {?} */ ('small')),
    Normal: (/** @type {?} */ ('normal')),
    Large: (/** @type {?} */ ('large'))
};
// Stores a basic set of configuration options for a modal.
/**
 * @template T, U, V
 */
export class ModalConfig {
    /**
     * @param {?=} context
     * @param {?=} isClosable
     */
    constructor(context = undefined, isClosable = true) {
        // Initialise with default values.
        this.isClosable = isClosable;
        this.context = context;
        this.size = ModalSize.Normal;
        this.isFullScreen = false;
        this.isBasic = false;
        this.isInverted = false;
        this.isCentered = true;
        this.mustScroll = false;
        this.transition = 'scale';
        this.transitionDuration = 500;
    }
}
if (false) {
    /** @type {?} */
    ModalConfig.prototype.isClosable;
    /** @type {?} */
    ModalConfig.prototype.closeResult;
    /** @type {?} */
    ModalConfig.prototype.context;
    /** @type {?} */
    ModalConfig.prototype.size;
    /** @type {?} */
    ModalConfig.prototype.isFullScreen;
    /** @type {?} */
    ModalConfig.prototype.isBasic;
    /** @type {?} */
    ModalConfig.prototype.isInverted;
    /** @type {?} */
    ModalConfig.prototype.isCentered;
    /** @type {?} */
    ModalConfig.prototype.mustScroll;
    /** @type {?} */
    ModalConfig.prototype.transition;
    /** @type {?} */
    ModalConfig.prototype.transitionDuration;
}
// Used when creating a modal from a `TemplateRef`.
/**
 * @template T, U, V
 */
export class TemplateModalConfig extends ModalConfig {
    /**
     * @param {?} template
     * @param {?=} context
     * @param {?=} isClosable
     */
    constructor(template, context = undefined, isClosable = true) {
        super(context, isClosable);
        this.template = template;
    }
}
if (false) {
    /** @type {?} */
    TemplateModalConfig.prototype.template;
}
// Used when creating a modal from an existing component.
/**
 * @template T, U, V
 */
export class ComponentModalConfig extends ModalConfig {
    /**
     * @param {?} component
     * @param {?=} context
     * @param {?=} isClosable
     */
    constructor(component, context = undefined, isClosable = true) {
        super(context, isClosable);
        this.component = component;
    }
}
if (false) {
    /** @type {?} */
    ComponentModalConfig.prototype.component;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9tb2RhbC9jbGFzc2VzL21vZGFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLE1BQU0sT0FBTyxTQUFTLEdBQUc7SUFDdkIsSUFBSSxFQUFFLG1CQUFBLE1BQU0sRUFBYTtJQUN6QixJQUFJLEVBQUUsbUJBQUEsTUFBTSxFQUFhO0lBQ3pCLEtBQUssRUFBRSxtQkFBQSxPQUFPLEVBQWE7SUFDM0IsTUFBTSxFQUFFLG1CQUFBLFFBQVEsRUFBYTtJQUM3QixLQUFLLEVBQUUsbUJBQUEsT0FBTyxFQUFhO0NBQzVCOzs7OztBQUdELE1BQU0sT0FBTyxXQUFXOzs7OztJQTRCdEIsWUFBWSxVQUF5QixTQUFTLEVBQUUsYUFBc0IsSUFBSTtRQUN4RSxrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUM7SUFDaEMsQ0FBQztDQUNGOzs7SUExQ0MsaUNBQTJCOztJQUUzQixrQ0FBc0I7O0lBR3RCLDhCQUFtQjs7SUFHbkIsMkJBQXVCOztJQUV2QixtQ0FBNkI7O0lBRTdCLDhCQUF3Qjs7SUFFeEIsaUNBQTJCOztJQUUzQixpQ0FBMkI7O0lBRzNCLGlDQUEyQjs7SUFHM0IsaUNBQTBCOztJQUUxQix5Q0FBa0M7Ozs7OztBQXFCcEMsTUFBTSxPQUFPLG1CQUFxRCxTQUFRLFdBQW9COzs7Ozs7SUFHNUYsWUFBWSxRQUFnQyxFQUFFLFVBQXlCLFNBQVMsRUFBRSxhQUFzQixJQUFJO1FBQzFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztDQUNGOzs7SUFQQyx1Q0FBd0M7Ozs7OztBQVUxQyxNQUFNLE9BQU8sb0JBQXNELFNBQVEsV0FBb0I7Ozs7OztJQUc3RixZQUFZLFNBQW9CLEVBQUUsVUFBeUIsU0FBUyxFQUFFLGFBQXNCLElBQUk7UUFDOUYsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7OztJQVBDLHlDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TW9kYWxUZW1wbGF0ZX0gZnJvbSAnLi9tb2RhbC10ZW1wbGF0ZSc7XHJcblxyXG5leHBvcnQgdHlwZSBNb2RhbFNpemUgPSAnbWluaScgfCAndGlueScgfCAnc21hbGwnIHwgJ25vcm1hbCcgfCAnbGFyZ2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1vZGFsU2l6ZSA9IHtcclxuICBNaW5pOiAnbWluaScgYXMgTW9kYWxTaXplLFxyXG4gIFRpbnk6ICd0aW55JyBhcyBNb2RhbFNpemUsXHJcbiAgU21hbGw6ICdzbWFsbCcgYXMgTW9kYWxTaXplLFxyXG4gIE5vcm1hbDogJ25vcm1hbCcgYXMgTW9kYWxTaXplLFxyXG4gIExhcmdlOiAnbGFyZ2UnIGFzIE1vZGFsU2l6ZVxyXG59O1xyXG5cclxuLy8gU3RvcmVzIGEgYmFzaWMgc2V0IG9mIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYSBtb2RhbC5cclxuZXhwb3J0IGNsYXNzIE1vZGFsQ29uZmlnPFQsIFUgPSB1bmRlZmluZWQsIFYgPSB1bmRlZmluZWQ+IHtcclxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG1vZGFsIGNhbiBiZSBjbG9zZWQgd2l0aCBhIGNsb3NlIGJ1dHRvbiwgY2xpY2tpbmcgb3V0c2lkZSwgb3IgdGhlIGVzY2FwZSBrZXkuXHJcbiAgcHVibGljIGlzQ2xvc2FibGU6IGJvb2xlYW47XHJcbiAgLy8gVmFsdWUgdG8gZGVueSB3aXRoIHdoZW4gY2xvc2luZyB2aWEgYGlzQ2xvc2FibGVgLlxyXG4gIHB1YmxpYyBjbG9zZVJlc3VsdDogVjtcclxuXHJcbiAgLy8gRGF0YSB0byBwYXNzIHRvIHRoZSBtb2RhbCBpbnN0YW5jZSB3aGVuIG9wZW5lZC5cclxuICBwdWJsaWMgY29udGV4dD86IFQ7XHJcblxyXG4gIC8vIFNpemUgdXNlZCB0byBkaXNwbGF5IHRoZSBtb2RhbC5cclxuICBwdWJsaWMgc2l6ZTogTW9kYWxTaXplO1xyXG4gIC8vIFdoZXRoZXIgdGhlIG1vZGFsIHRha2VzIHVwIHRoZSBmdWxsIHdpZHRoIG9mIHRoZSBzY3JlZW4uXHJcbiAgcHVibGljIGlzRnVsbFNjcmVlbjogYm9vbGVhbjtcclxuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgbW9kYWwgaGFzIGJhc2ljIHN0eWxlcyBhcHBsaWVkLlxyXG4gIHB1YmxpYyBpc0Jhc2ljOiBib29sZWFuO1xyXG4gIC8vIFdoZXRoZXIgdGhlIG1vZGFsIHNob3dzIGFnYWluc3QgYSBsaWdodCBiYWNrZ3JvdW5kLlxyXG4gIHB1YmxpYyBpc0ludmVydGVkOiBib29sZWFuO1xyXG4gIC8vIFdoZXRoZXIgb3Igbm90IHRoZSBtb2RhbCBzaG91bGQgYmUgcGxhY2VkIGluIHRoZSBjZW50ZXIgb2YgdGhlIHBhZ2UuXHJcbiAgcHVibGljIGlzQ2VudGVyZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8vIFdoZXRoZXIgb3Igbm90IHRoZSBtb2RhbCBzaG91bGQgYWx3YXlzIGRpc3BsYXkgYSBzY3JvbGxiYXIuXHJcbiAgcHVibGljIG11c3RTY3JvbGw6IGJvb2xlYW47XHJcblxyXG4gIC8vIFRyYW5zaXRpb24gdG8gZGlzcGxheSBtb2RhbCB3aXRoLlxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uOiBzdHJpbmc7XHJcbiAgLy8gRHVyYXRpb24gb2YgdGhlIG1vZGFsICYgZGltbWVyIHRyYW5zaXRpb25zLlxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dDogVCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgaXNDbG9zYWJsZTogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgIC8vIEluaXRpYWxpc2Ugd2l0aCBkZWZhdWx0IHZhbHVlcy5cclxuICAgIHRoaXMuaXNDbG9zYWJsZSA9IGlzQ2xvc2FibGU7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG5cclxuICAgIHRoaXMuc2l6ZSA9IE1vZGFsU2l6ZS5Ob3JtYWw7XHJcbiAgICB0aGlzLmlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0Jhc2ljID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzSW52ZXJ0ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNDZW50ZXJlZCA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5tdXN0U2Nyb2xsID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy50cmFuc2l0aW9uID0gJ3NjYWxlJztcclxuICAgIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uID0gNTAwO1xyXG4gIH1cclxufVxyXG5cclxuLy8gVXNlZCB3aGVuIGNyZWF0aW5nIGEgbW9kYWwgZnJvbSBhIGBUZW1wbGF0ZVJlZmAuXHJcbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU1vZGFsQ29uZmlnPFQsIFUgPSB1bmRlZmluZWQsIFYgPSB1bmRlZmluZWQ+IGV4dGVuZHMgTW9kYWxDb25maWc8VCwgVSwgVj4ge1xyXG4gIHB1YmxpYyB0ZW1wbGF0ZTogTW9kYWxUZW1wbGF0ZTxULCBVLCBWPjtcclxuXHJcbiAgY29uc3RydWN0b3IodGVtcGxhdGU6IE1vZGFsVGVtcGxhdGU8VCwgVSwgVj4sIGNvbnRleHQ6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIGlzQ2xvc2FibGU6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCBpc0Nsb3NhYmxlKTtcclxuXHJcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBVc2VkIHdoZW4gY3JlYXRpbmcgYSBtb2RhbCBmcm9tIGFuIGV4aXN0aW5nIGNvbXBvbmVudC5cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudE1vZGFsQ29uZmlnPFQsIFUgPSB1bmRlZmluZWQsIFYgPSB1bmRlZmluZWQ+IGV4dGVuZHMgTW9kYWxDb25maWc8VCwgVSwgVj4ge1xyXG4gIHB1YmxpYyBjb21wb25lbnQ6IFR5cGU8YW55PjtcclxuXHJcbiAgY29uc3RydWN0b3IoY29tcG9uZW50OiBUeXBlPGFueT4sIGNvbnRleHQ6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIGlzQ2xvc2FibGU6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCBpc0Nsb3NhYmxlKTtcclxuXHJcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuICB9XHJcbn1cclxuIl19