/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
export class FuiRating {
    constructor() {
        this.hoveredIndex = -1;
        this.value = 0;
        this.valueChange = new EventEmitter();
        this.type = 'star';
        this.maximum = 5;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get icons() {
        // tslint:disable-next-line:prefer-literal
        return new Array(this.maximum);
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = value;
    }
    /**
     * @return {?}
     */
    get maximum() {
        return this._maximum;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maximum(value) {
        this._maximum = +value;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    onClick(i) {
        if (!this.isReadonly) {
            this.value = i + 1;
            this.valueChange.emit(this.value);
        }
    }
    /**
     * @param {?} i
     * @return {?}
     */
    onMouseover(i) {
        this.hoveredIndex = i;
    }
    /**
     * @return {?}
     */
    onMouseout() {
        this.hoveredIndex = -1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
}
FuiRating.decorators = [
    { type: Component, args: [{
                selector: 'fui-rating',
                // tslint:disable-next-line
                template: `<i *ngFor="let icon of icons; let i = index" class="icon {{type}}" (mouseover)="onMouseover(i)" (click)="onClick(i)" [class.selected]="hoveredIndex >= i && !isReadonly" [class.active]="value > i"></i>`,
                styles: [`
:host.read-only .icon {
    cursor: auto
}
`]
            }] }
];
/** @nocollapse */
FuiRating.ctorParameters = () => [];
FuiRating.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.rating',] }],
    valueChange: [{ type: Output }],
    isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
    type: [{ type: Input }],
    maximum: [{ type: Input }],
    onMouseout: [{ type: HostListener, args: ['mouseout',] }]
};
if (false) {
    /** @type {?} */
    FuiRating.prototype.hasClasses;
    /** @type {?} */
    FuiRating.prototype.value;
    /** @type {?} */
    FuiRating.prototype.valueChange;
    /** @type {?} */
    FuiRating.prototype.isReadonly;
    /** @type {?} */
    FuiRating.prototype.hoveredIndex;
    /**
     * @type {?}
     * @private
     */
    FuiRating.prototype._type;
    /**
     * @type {?}
     * @private
     */
    FuiRating.prototype._maximum;
}
export class FuiRatingValueAccessor extends CustomValueAccessor {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
    }
}
FuiRatingValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'fui-rating',
                host: { '(valueChange)': 'onChange($event)' },
                providers: [customValueAccessorFactory(FuiRatingValueAccessor)]
            },] }
];
/** @nocollapse */
FuiRatingValueAccessor.ctorParameters = () => [
    { type: FuiRating }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9yYXRpbmcvY29tcG9uZW50cy9yYXRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0csT0FBTyxFQUFDLG1CQUFtQixFQUFFLDBCQUEwQixFQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBWXRILE1BQU0sT0FBTyxTQUFTO0lBYXBCO1FBRk8saUJBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUd2QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUU5QyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsSUFBVyxLQUFLO1FBQ2QsMENBQTBDO1FBQzFDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFJRCxJQUNXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQzs7Ozs7SUFFRCxJQUFXLElBQUksQ0FBQyxLQUFhO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFJRCxJQUNXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBVyxPQUFPLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRU0sT0FBTyxDQUFDLENBQVM7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLENBQVM7UUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7OztJQUdNLFVBQVU7UUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRU0sVUFBVSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTs7Z0JBRXRCLFFBQVEsRUFBRSwwTUFBME07eUJBQzNNOzs7O0NBSVY7YUFDQTs7Ozs7eUJBR0UsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGNBQWM7MEJBRzFCLE1BQU07eUJBRU4sV0FBVyxTQUFDLGlCQUFpQixjQUM3QixLQUFLO21CQXNCTCxLQUFLO3NCQVdMLEtBQUs7eUJBb0JMLFlBQVksU0FBQyxVQUFVOzs7O0lBNUR4QiwrQkFFb0M7O0lBQ3BDLDBCQUFxQjs7SUFDckIsZ0NBQ3lDOztJQUN6QywrQkFFMkI7O0lBQzNCLGlDQUF5Qjs7Ozs7SUFrQnpCLDBCQUFzQjs7Ozs7SUFXdEIsNkJBQXlCOztBQXFDM0IsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG1CQUFzQzs7OztJQUNoRixZQUFZLElBQWU7UUFDekIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQzs7O1lBUkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixJQUFJLEVBQUUsRUFBQyxlQUFlLEVBQUUsa0JBQWtCLEVBQUM7Z0JBQzNDLFNBQVMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDaEU7Ozs7WUFFbUIsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Q3VzdG9tVmFsdWVBY2Nlc3NvciwgY3VzdG9tVmFsdWVBY2Nlc3NvckZhY3RvcnksIElDdXN0b21WYWx1ZUFjY2Vzc29ySG9zdH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLXJhdGluZycsXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgdGVtcGxhdGU6IGA8aSAqbmdGb3I9XCJsZXQgaWNvbiBvZiBpY29uczsgbGV0IGkgPSBpbmRleFwiIGNsYXNzPVwiaWNvbiB7e3R5cGV9fVwiIChtb3VzZW92ZXIpPVwib25Nb3VzZW92ZXIoaSlcIiAoY2xpY2spPVwib25DbGljayhpKVwiIFtjbGFzcy5zZWxlY3RlZF09XCJob3ZlcmVkSW5kZXggPj0gaSAmJiAhaXNSZWFkb25seVwiIFtjbGFzcy5hY3RpdmVdPVwidmFsdWUgPiBpXCI+PC9pPmAsXHJcbiAgc3R5bGVzOiBbYFxyXG46aG9zdC5yZWFkLW9ubHkgLmljb24ge1xyXG4gICAgY3Vyc29yOiBhdXRvXHJcbn1cclxuYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVJhdGluZyBpbXBsZW1lbnRzIElDdXN0b21WYWx1ZUFjY2Vzc29ySG9zdDxudW1iZXI+IHtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5yYXRpbmcnKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG4gIHB1YmxpYyB2YWx1ZTogbnVtYmVyO1xyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5yZWFkLW9ubHknKVxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGlzUmVhZG9ubHk6IGJvb2xlYW47XHJcbiAgcHVibGljIGhvdmVyZWRJbmRleCA9IC0xO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudmFsdWUgPSAwO1xyXG4gICAgdGhpcy52YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICAgIHRoaXMudHlwZSA9ICdzdGFyJztcclxuICAgIHRoaXMubWF4aW11bSA9IDU7XHJcbiAgICB0aGlzLmlzUmVhZG9ubHkgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmhhc0NsYXNzZXMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpY29ucygpOiB1bmRlZmluZWRbXSB7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWxpdGVyYWxcclxuICAgIHJldHVybiBuZXcgQXJyYXkodGhpcy5tYXhpbXVtKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3R5cGU6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IHR5cGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX21heGltdW06IG51bWJlcjtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IG1heGltdW0oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9tYXhpbXVtO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBtYXhpbXVtKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX21heGltdW0gPSArdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb25DbGljayhpOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5pc1JlYWRvbmx5KSB7XHJcbiAgICAgIHRoaXMudmFsdWUgPSBpICsgMTtcclxuICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uTW91c2VvdmVyKGk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5ob3ZlcmVkSW5kZXggPSBpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2VvdXQnKVxyXG4gIHB1YmxpYyBvbk1vdXNlb3V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5ob3ZlcmVkSW5kZXggPSAtMTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLXJhdGluZycsXHJcbiAgaG9zdDogeycodmFsdWVDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudCknfSxcclxuICBwcm92aWRlcnM6IFtjdXN0b21WYWx1ZUFjY2Vzc29yRmFjdG9yeShGdWlSYXRpbmdWYWx1ZUFjY2Vzc29yKV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVJhdGluZ1ZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBDdXN0b21WYWx1ZUFjY2Vzc29yPG51bWJlciwgRnVpUmF0aW5nPiB7XHJcbiAgY29uc3RydWN0b3IoaG9zdDogRnVpUmF0aW5nKSB7XHJcbiAgICBzdXBlcihob3N0KTtcclxuICB9XHJcbn1cclxuIl19