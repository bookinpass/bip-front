/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TemplateRef } from '@angular/core';
import { FuiPopupController } from './popup-controller';
import { PopupConfig } from './popup-config';
/** @type {?} */
const templateRef = TemplateRef;
/**
 * @record
 * @template T
 */
export function ITemplatePopupContext() { }
if (false) {
    /** @type {?|undefined} */
    ITemplatePopupContext.prototype.context;
}
/**
 * @record
 * @template T
 */
export function ITemplatePopupConfig() { }
if (false) {
    /** @type {?|undefined} */
    ITemplatePopupConfig.prototype.template;
    /** @type {?|undefined} */
    ITemplatePopupConfig.prototype.context;
}
/**
 * @template T
 */
export class TemplatePopupConfig extends PopupConfig {
}
if (false) {
    /** @type {?} */
    TemplatePopupConfig.prototype.template;
    /** @type {?} */
    TemplatePopupConfig.prototype.context;
}
/**
 * @template T
 */
export class FuiPopupTemplateController extends FuiPopupController {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} componentFactory
     * @param {?} config
     */
    constructor(renderer, element, componentFactory, config) {
        super(renderer, element, componentFactory, config);
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configure(config) {
        super.configure(config);
        if (config) {
            this.template = config.template;
            this.context = config.context;
        }
    }
    /**
     * @return {?}
     */
    open() {
        // If there is a template, inject it into the view.
        if (this.template) {
            this.popup.templateSibling.clear();
            this._componentFactory.createView(this.popup.templateSibling, this.template, {
                $implicit: this.popup,
                context: this.context
            });
        }
        super.open();
    }
}
if (false) {
    /** @type {?} */
    FuiPopupTemplateController.prototype.template;
    /** @type {?} */
    FuiPopupTemplateController.prototype.context;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAtdGVtcGxhdGUtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvcG9wdXAvY2xhc3Nlcy9wb3B1cC10ZW1wbGF0ZS1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXdCLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQVMsa0JBQWtCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUU5RCxPQUFPLEVBQWUsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O01BRW5ELFdBQVcsR0FBRyxXQUFXOzs7OztBQUUvQiwyQ0FFQzs7O0lBREMsd0NBQVk7Ozs7OztBQUdkLDBDQUdDOzs7SUFGQyx3Q0FBaUQ7O0lBQ2pELHVDQUFZOzs7OztBQUdkLE1BQU0sT0FBTyxtQkFBdUIsU0FBUSxXQUFXO0NBR3REOzs7SUFGQyx1Q0FBd0Q7O0lBQ3hELHNDQUFtQjs7Ozs7QUFHckIsTUFBTSxPQUFPLDBCQUE4QixTQUFRLGtCQUFrQjs7Ozs7OztJQUluRSxZQUFZLFFBQW1CLEVBQ25CLE9BQW1CLEVBQ25CLGdCQUFxQyxFQUNyQyxNQUFtQjtRQUU3QixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVNLFNBQVMsQ0FBQyxNQUFnQztRQUMvQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUMvQjtJQUNILENBQUM7Ozs7SUFFTSxJQUFJO1FBQ1QsbURBQW1EO1FBQ25ELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUVuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQzNFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2YsQ0FBQztDQUNGOzs7SUFqQ0MsOENBQXdEOztJQUN4RCw2Q0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lQb3B1cCwgRnVpUG9wdXBDb250cm9sbGVyfSBmcm9tICcuL3BvcHVwLWNvbnRyb2xsZXInO1xyXG5pbXBvcnQge0lJbXBsaWNpdENvbnRleHQsIEZ1aUNvbXBvbmVudEZhY3Rvcnl9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7SVBvcHVwQ29uZmlnLCBQb3B1cENvbmZpZ30gZnJvbSAnLi9wb3B1cC1jb25maWcnO1xyXG5cclxuY29uc3QgdGVtcGxhdGVSZWYgPSBUZW1wbGF0ZVJlZjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRlbXBsYXRlUG9wdXBDb250ZXh0PFQ+IGV4dGVuZHMgSUltcGxpY2l0Q29udGV4dDxJUG9wdXA+IHtcclxuICBjb250ZXh0PzogVDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVGVtcGxhdGVQb3B1cENvbmZpZzxUPiBleHRlbmRzIElQb3B1cENvbmZpZyB7XHJcbiAgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxJVGVtcGxhdGVQb3B1cENvbnRleHQ8VD4+O1xyXG4gIGNvbnRleHQ/OiBUO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVQb3B1cENvbmZpZzxUPiBleHRlbmRzIFBvcHVwQ29uZmlnIHtcclxuICBwdWJsaWMgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxJVGVtcGxhdGVQb3B1cENvbnRleHQ8VD4+O1xyXG4gIHB1YmxpYyBjb250ZXh0PzogVDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1aVBvcHVwVGVtcGxhdGVDb250cm9sbGVyPFQ+IGV4dGVuZHMgRnVpUG9wdXBDb250cm9sbGVyIHtcclxuICBwdWJsaWMgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxJVGVtcGxhdGVQb3B1cENvbnRleHQ8VD4+O1xyXG4gIHB1YmxpYyBjb250ZXh0PzogVDtcclxuXHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIGNvbXBvbmVudEZhY3Rvcnk6IEZ1aUNvbXBvbmVudEZhY3RvcnksXHJcbiAgICAgICAgICAgICAgY29uZmlnOiBQb3B1cENvbmZpZykge1xyXG5cclxuICAgIHN1cGVyKHJlbmRlcmVyLCBlbGVtZW50LCBjb21wb25lbnRGYWN0b3J5LCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNvbmZpZ3VyZShjb25maWc/OiBJVGVtcGxhdGVQb3B1cENvbmZpZzxUPik6IHZvaWQge1xyXG4gICAgc3VwZXIuY29uZmlndXJlKGNvbmZpZyk7XHJcblxyXG4gICAgaWYgKGNvbmZpZykge1xyXG4gICAgICB0aGlzLnRlbXBsYXRlID0gY29uZmlnLnRlbXBsYXRlO1xyXG4gICAgICB0aGlzLmNvbnRleHQgPSBjb25maWcuY29udGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBvcGVuKCk6IHZvaWQge1xyXG4gICAgLy8gSWYgdGhlcmUgaXMgYSB0ZW1wbGF0ZSwgaW5qZWN0IGl0IGludG8gdGhlIHZpZXcuXHJcbiAgICBpZiAodGhpcy50ZW1wbGF0ZSkge1xyXG4gICAgICB0aGlzLnBvcHVwLnRlbXBsYXRlU2libGluZy5jbGVhcigpO1xyXG5cclxuICAgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeS5jcmVhdGVWaWV3KHRoaXMucG9wdXAudGVtcGxhdGVTaWJsaW5nLCB0aGlzLnRlbXBsYXRlLCB7XHJcbiAgICAgICAgJGltcGxpY2l0OiB0aGlzLnBvcHVwLFxyXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==