/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input } from '@angular/core';
export class FuiProgress {
    constructor() {
        this.value = 0;
        this.maximum = 100;
        this.precision = 0;
        this._overrideSuccess = false;
        this.autoSuccess = true;
        this.showProgress = true;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get reachedMaximum() {
        return this._overrideSuccess || ((this.value >= this.maximum) && this.autoSuccess);
    }
    /**
     * @return {?}
     */
    get percentage() {
        /** @type {?} */
        const boundedValue = Math.min(Math.max(this.value, 0), this.maximum);
        /** @type {?} */
        const percentage = (boundedValue / this.maximum) * 100;
        return percentage.toFixed(this.precision);
    }
    /**
     * @param {?} classes
     * @return {?}
     */
    set classValue(classes) {
        if (classes.includes('attached') || classes.includes('tiny')) {
            this.showProgress = false;
        }
        if (classes.includes('success')) {
            this._overrideSuccess = true;
        }
        this.transition = 'ease';
        this.transitionDuration = 350;
        this.canCompletelyEmpty = false;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        // Convert value from string to number where necessary.
        /** @type {?} */
        const converted = +value;
        if (Number.isNaN(converted)) {
            return;
        }
        this._value = converted;
    }
    /**
     * @return {?}
     */
    get maximum() {
        return this._maximum;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maximum(value) {
        // Convert value from string to number where necessary.
        /** @type {?} */
        const converted = +value;
        if (Number.isNaN(converted)) {
            return;
        }
        this._maximum = converted;
    }
    /**
     * @return {?}
     */
    get precision() {
        return this._precision;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set precision(value) {
        // Convert value from string to number where necessary.
        /** @type {?} */
        const converted = +value;
        if (Number.isNaN(converted)) {
            return;
        }
        this._precision = Math.min(Math.max(converted, 0), 20);
    }
}
FuiProgress.decorators = [
    { type: Component, args: [{
                selector: 'fui-progress',
                template: `
<div class="bar"
    [style.width.%]="percentage"
    [style.minWidth]="canCompletelyEmpty ? 0 : null"
    [style.transitionTimingFunction]="transition"
    [style.transitionDuration.ms]="transitionDuration">
    <div class="progress" *ngIf="showProgress">{{ percentage }}%</div>
</div>
<div class="label">
    <ng-content></ng-content>
</div>
`,
                styles: [`
.bar {
    transition-duration: 300ms !important;
    z-index: 1;
}
`]
            }] }
];
/** @nocollapse */
FuiProgress.ctorParameters = () => [];
FuiProgress.propDecorators = {
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    canCompletelyEmpty: [{ type: Input }],
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.progress',] }],
    autoSuccess: [{ type: Input }],
    showProgress: [{ type: Input }],
    reachedMaximum: [{ type: HostBinding, args: ['class.success',] }],
    percentage: [{ type: HostBinding, args: ['attr.data-percent',] }],
    classValue: [{ type: Input, args: ['class',] }],
    value: [{ type: Input }],
    maximum: [{ type: Input }],
    precision: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FuiProgress.prototype.transition;
    /** @type {?} */
    FuiProgress.prototype.transitionDuration;
    /** @type {?} */
    FuiProgress.prototype.canCompletelyEmpty;
    /** @type {?} */
    FuiProgress.prototype.hasClasses;
    /** @type {?} */
    FuiProgress.prototype.autoSuccess;
    /** @type {?} */
    FuiProgress.prototype.showProgress;
    /**
     * @type {?}
     * @private
     */
    FuiProgress.prototype._overrideSuccess;
    /**
     * @type {?}
     * @private
     */
    FuiProgress.prototype._value;
    /**
     * @type {?}
     * @private
     */
    FuiProgress.prototype._maximum;
    /**
     * @type {?}
     * @private
     */
    FuiProgress.prototype._precision;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL3Byb2dyZXNzL2NvbXBvbmVudHMvcHJvZ3Jlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQXVCNUQsTUFBTSxPQUFPLFdBQVc7SUFrQnRCO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUVuQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXpCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxJQUNXLGNBQWM7UUFDdkIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRixDQUFDOzs7O0lBRUQsSUFDVyxVQUFVOztjQUNiLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDOztjQUU5RCxVQUFVLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUc7UUFFdEQsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVELElBQ1csVUFBVSxDQUFDLE9BQWU7UUFDbkMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDM0I7UUFDRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUM7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDOzs7O0lBSUQsSUFDVyxLQUFLO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsSUFBVyxLQUFLLENBQUMsS0FBYTs7O2NBRXRCLFNBQVMsR0FBRyxDQUFDLEtBQUs7UUFFeEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFJRCxJQUNXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBVyxPQUFPLENBQUMsS0FBYTs7O2NBRXhCLFNBQVMsR0FBRyxDQUFDLEtBQUs7UUFFeEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFJRCxJQUNXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRUQsSUFBVyxTQUFTLENBQUMsS0FBYTs7O2NBRTFCLFNBQVMsR0FBRyxDQUFDLEtBQUs7UUFFeEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUFuSUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0NBV1g7eUJBQ1U7Ozs7O0NBS1Y7YUFDQTs7Ozs7eUJBRUUsS0FBSztpQ0FHTCxLQUFLO2lDQUdMLEtBQUs7eUJBRUwsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGdCQUFnQjswQkFFNUIsS0FBSzsyQkFFTCxLQUFLOzZCQWdCTCxXQUFXLFNBQUMsZUFBZTt5QkFLM0IsV0FBVyxTQUFDLG1CQUFtQjt5QkFTL0IsS0FBSyxTQUFDLE9BQU87b0JBZ0JiLEtBQUs7c0JBa0JMLEtBQUs7d0JBa0JMLEtBQUs7Ozs7SUEvRk4saUNBQzBCOztJQUUxQix5Q0FDa0M7O0lBRWxDLHlDQUNtQzs7SUFDbkMsaUNBRW9DOztJQUNwQyxrQ0FDNEI7O0lBQzVCLG1DQUM2Qjs7Ozs7SUFDN0IsdUNBQWtDOzs7OztJQTBDbEMsNkJBQXVCOzs7OztJQWtCdkIsK0JBQXlCOzs7OztJQWtCekIsaUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1wcm9ncmVzcycsXHJcbiAgdGVtcGxhdGU6IGBcclxuPGRpdiBjbGFzcz1cImJhclwiXHJcbiAgICBbc3R5bGUud2lkdGguJV09XCJwZXJjZW50YWdlXCJcclxuICAgIFtzdHlsZS5taW5XaWR0aF09XCJjYW5Db21wbGV0ZWx5RW1wdHkgPyAwIDogbnVsbFwiXHJcbiAgICBbc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXT1cInRyYW5zaXRpb25cIlxyXG4gICAgW3N0eWxlLnRyYW5zaXRpb25EdXJhdGlvbi5tc109XCJ0cmFuc2l0aW9uRHVyYXRpb25cIj5cclxuICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiICpuZ0lmPVwic2hvd1Byb2dyZXNzXCI+e3sgcGVyY2VudGFnZSB9fSU8L2Rpdj5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJsYWJlbFwiPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgXHJcbi5iYXIge1xyXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXMgIWltcG9ydGFudDtcclxuICAgIHotaW5kZXg6IDE7XHJcbn1cclxuYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVByb2dyZXNzIHtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBjYW5Db21wbGV0ZWx5RW1wdHk6IGJvb2xlYW47XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5wcm9ncmVzcycpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgYXV0b1N1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc2hvd1Byb2dyZXNzOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX292ZXJyaWRlU3VjY2VzczogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gMDtcclxuICAgIHRoaXMubWF4aW11bSA9IDEwMDtcclxuICAgIHRoaXMucHJlY2lzaW9uID0gMDtcclxuXHJcbiAgICB0aGlzLl9vdmVycmlkZVN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgIHRoaXMuYXV0b1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgdGhpcy5zaG93UHJvZ3Jlc3MgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnN1Y2Nlc3MnKVxyXG4gIHB1YmxpYyBnZXQgcmVhY2hlZE1heGltdW0oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3ZlcnJpZGVTdWNjZXNzIHx8ICgodGhpcy52YWx1ZSA+PSB0aGlzLm1heGltdW0pICYmIHRoaXMuYXV0b1N1Y2Nlc3MpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtcGVyY2VudCcpXHJcbiAgcHVibGljIGdldCBwZXJjZW50YWdlKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBib3VuZGVkVmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnZhbHVlLCAwKSwgdGhpcy5tYXhpbXVtKTtcclxuXHJcbiAgICBjb25zdCBwZXJjZW50YWdlID0gKGJvdW5kZWRWYWx1ZSAvIHRoaXMubWF4aW11bSkgKiAxMDA7XHJcblxyXG4gICAgcmV0dXJuIHBlcmNlbnRhZ2UudG9GaXhlZCh0aGlzLnByZWNpc2lvbik7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ2NsYXNzJylcclxuICBwdWJsaWMgc2V0IGNsYXNzVmFsdWUoY2xhc3Nlczogc3RyaW5nKSB7XHJcbiAgICBpZiAoY2xhc3Nlcy5pbmNsdWRlcygnYXR0YWNoZWQnKSB8fCBjbGFzc2VzLmluY2x1ZGVzKCd0aW55JykpIHtcclxuICAgICAgdGhpcy5zaG93UHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChjbGFzc2VzLmluY2x1ZGVzKCdzdWNjZXNzJykpIHtcclxuICAgICAgdGhpcy5fb3ZlcnJpZGVTdWNjZXNzID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyYW5zaXRpb24gPSAnZWFzZSc7XHJcbiAgICB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiA9IDM1MDtcclxuICAgIHRoaXMuY2FuQ29tcGxldGVseUVtcHR5ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgdmFsdWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgLy8gQ29udmVydCB2YWx1ZSBmcm9tIHN0cmluZyB0byBudW1iZXIgd2hlcmUgbmVjZXNzYXJ5LlxyXG4gICAgY29uc3QgY29udmVydGVkID0gK3ZhbHVlO1xyXG5cclxuICAgIGlmIChOdW1iZXIuaXNOYU4oY29udmVydGVkKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fdmFsdWUgPSBjb252ZXJ0ZWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9tYXhpbXVtOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBtYXhpbXVtKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWF4aW11bTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgbWF4aW11bSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAvLyBDb252ZXJ0IHZhbHVlIGZyb20gc3RyaW5nIHRvIG51bWJlciB3aGVyZSBuZWNlc3NhcnkuXHJcbiAgICBjb25zdCBjb252ZXJ0ZWQgPSArdmFsdWU7XHJcblxyXG4gICAgaWYgKE51bWJlci5pc05hTihjb252ZXJ0ZWQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9tYXhpbXVtID0gY29udmVydGVkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfcHJlY2lzaW9uOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGdldCBwcmVjaXNpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9wcmVjaXNpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHByZWNpc2lvbih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAvLyBDb252ZXJ0IHZhbHVlIGZyb20gc3RyaW5nIHRvIG51bWJlciB3aGVyZSBuZWNlc3NhcnkuXHJcbiAgICBjb25zdCBjb252ZXJ0ZWQgPSArdmFsdWU7XHJcblxyXG4gICAgaWYgKE51bWJlci5pc05hTihjb252ZXJ0ZWQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9wcmVjaXNpb24gPSBNYXRoLm1pbihNYXRoLm1heChjb252ZXJ0ZWQsIDApLCAyMCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==