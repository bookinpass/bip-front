/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { FuiToastTitle } from '../directives/toast-title';
import { FuiToastMessage } from '../directives/toast-message';
export class FuiToast {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.closeEvent = new EventEmitter();
        this.icons = {
            info: 'info',
            success: 'checkmark',
            warning: 'warning',
            error: 'times'
        };
        this.dismissible = this.dismissible || true;
        this.title = this.title || '';
        this.message = this.message || '';
        this.class = this.class || 'info';
        if (typeof this.showIcon !== 'string') {
            if (this.showIcon === undefined || this.showIcon === null) {
                this.showIcon = this.icons[this.class];
            }
            else {
                this.showIcon = false;
            }
        }
        this.closeIcon = this.closeIcon || false;
        this.className = this.className || 'ui toast';
        this.progressUp = this.progressUp || true;
        this.displayTime = this.displayTime || 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.displayTime) {
            window.setTimeout((/**
             * @return {?}
             */
            () => this.close()), this.displayTime);
            if (this.showProgress) {
                this.progress = this.progressUp ? 0 : 100;
                window.setTimeout((/**
                 * @return {?}
                 */
                () => this.progress = this.progressUp ? 100 : 0), 300);
            }
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.elementRef.nativeElement.remove();
        this.closeEvent.next(this.id);
    }
}
FuiToast.decorators = [
    { type: Component, args: [{
                selector: 'fui-toast',
                exportAs: 'fuiToast',
                template: `
    <div class="toast-box compact" (click)="(dismissible ? (!closeIcon ? close() : null) : null)">
      <div *ngIf="showProgress && showProgress === 'top'" class="ui attached active progress {{class}} {{showProgress}}">
        <div class="bar" [ngStyle]="{'transition': 'width ' + (displayTime / 1000)  + 's', 'width': progress + '%'}"
             style="width: 100%;"></div>
      </div>
      <div class="{{class}} {{className}}" [ngClass]="{'icon': showIcon}">
        <i *ngIf="closeIcon" class="close icon" (click)="close()"></i>
        <i *ngIf="showIcon" class="{{showIcon}} icon"></i>
        <div class="content">
          <ng-container *ngIf="title">
            <div class="header">{{title}}</div>
          </ng-container>
          <div class="header" *ngIf="titleTpl">
            <ng-template [ngTemplateOutlet]="titleTpl.templateRef"></ng-template>
          </div>
          <ng-container *ngIf="message">
            <div class="body">{{message}}</div>
          </ng-container>
          <div *ngIf="messageTpl" class="body">
            <ng-template [ngTemplateOutlet]="messageTpl.templateRef"></ng-template>
          </div>
        </div>
      </div>
      <div *ngIf="showProgress && showProgress === 'bottom'" class="ui attached active progress {{class}} {{showProgress}}">
        <div class="bar" [ngStyle]="{'transition': 'width ' + (displayTime / 1000)  + 's', 'width': progress + '%'}"
             style="width: 100%;"></div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
FuiToast.ctorParameters = () => [
    { type: ElementRef }
];
FuiToast.propDecorators = {
    dismissible: [{ type: Input }],
    title: [{ type: Input }],
    message: [{ type: Input }],
    class: [{ type: Input }],
    showIcon: [{ type: Input }],
    closeIcon: [{ type: Input }],
    className: [{ type: Input }],
    progressUp: [{ type: Input }],
    showProgress: [{ type: Input }],
    displayTime: [{ type: Input }],
    id: [{ type: Input }],
    closeEvent: [{ type: Output, args: ['close',] }],
    titleTpl: [{ type: ContentChild, args: [FuiToastTitle, { static: false },] }],
    messageTpl: [{ type: ContentChild, args: [FuiToastMessage, { static: false },] }]
};
if (false) {
    /** @type {?} */
    FuiToast.prototype.dismissible;
    /** @type {?} */
    FuiToast.prototype.title;
    /** @type {?} */
    FuiToast.prototype.message;
    /** @type {?} */
    FuiToast.prototype.class;
    /** @type {?} */
    FuiToast.prototype.showIcon;
    /** @type {?} */
    FuiToast.prototype.closeIcon;
    /** @type {?} */
    FuiToast.prototype.className;
    /** @type {?} */
    FuiToast.prototype.progressUp;
    /** @type {?} */
    FuiToast.prototype.showProgress;
    /** @type {?} */
    FuiToast.prototype.displayTime;
    /** @type {?} */
    FuiToast.prototype.id;
    /** @type {?} */
    FuiToast.prototype.closeEvent;
    /** @type {?} */
    FuiToast.prototype.titleTpl;
    /** @type {?} */
    FuiToast.prototype.messageTpl;
    /** @type {?} */
    FuiToast.prototype.progress;
    /** @type {?} */
    FuiToast.prototype.icons;
    /**
     * @type {?}
     * @private
     */
    FuiToast.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,