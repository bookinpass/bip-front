/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { Util } from '../../../misc/util/internal';
import { DropdownService, FuiDropdownMenu } from '../../dropdown/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { SearchService } from '../services/search.service';
/**
 * @record
 * @template T
 */
export function IResultContext() { }
if (false) {
    /** @type {?} */
    IResultContext.prototype.query;
}
/**
 * @template T
 */
export class FuiSearch {
    /**
     * @param {?} _element
     * @param {?} renderer
     * @param {?} _localizationService
     */
    constructor(_element, renderer, _localizationService) {
        this._element = _element;
        this._localizationService = _localizationService;
        this.dropdownService = new DropdownService();
        this.searchService = new SearchService();
        this.onLocaleUpdate();
        this._localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        () => this.onLocaleUpdate()));
        this.hasClasses = true;
        this.tabindex = 0;
        this.hasIcon = true;
        this.retainSelectedResult = true;
        this.searchDelay = 200;
        this.maxResults = 7;
        this.onResultSelected = new EventEmitter();
        this.transition = 'scale';
        this.transitionDuration = 200;
    }
    /**
     * @return {?}
     */
    get isActive() {
        return this.dropdownService.isOpen;
    }
    /**
     * @return {?}
     */
    get query() {
        return this.searchService.query;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    set query(query) {
        this.selectedResult = undefined;
        // Initialise a delayed search.
        this.searchService.updateQueryDelayed(query, (/**
         * @return {?}
         */
        () => {
            // Set the results open state depending on whether a query has been entered.
            return this.dropdownService.setOpenState(this.searchService.query.length > 0);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        if (options) {
            this.searchService.options = options;
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    set optionsFilter(filter) {
        if (filter) {
            this.searchService.optionsFilter = filter;
        }
    }
    /**
     * @param {?} lookupFn
     * @return {?}
     */
    set optionsLookup(lookupFn) {
        this.searchService.optionsLookup = lookupFn;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    set optionsField(field) {
        this.searchService.optionsField = field;
    }
    /**
     * @param {?} delay
     * @return {?}
     */
    set searchDelay(delay) {
        this.searchService.searchDelay = delay;
    }
    /**
     * @return {?}
     */
    get isSearching() {
        return this.searchService.isSearching;
    }
    /**
     * @return {?}
     */
    get results() {
        return this.searchService.results.slice(0, this.maxResults);
    }
    // Gets & sets the placeholder text displayed inside the text input.
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder || this.localeValues.placeholder;
    }
    /**
     * @param {?} placeholder
     * @return {?}
     */
    set placeholder(placeholder) {
        this._placeholder = placeholder;
    }
    /**
     * @return {?}
     */
    get localeValues() {
        return this._localizationService.override(this._localeValues, this.localeOverrides);
    }
    /**
     * @return {?}
     */
    get resultFormatter() {
        if (this._resultFormatter) {
            return this._resultFormatter;
        }
        else if (this.searchService.optionsLookup) {
            return (/**
             * @param {?} r
             * @return {?}
             */
            r => this.readValue(r));
        }
        else {
            return (/**
             * @param {?} r
             * @param {?} q
             * @return {?}
             */
            (r, q) => this.searchService.highlightMatches(this.readValue(r), q));
        }
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set resultFormatter(formatter) {
        this._resultFormatter = formatter;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._menu.service = this.dropdownService;
    }
    // Selects a result.
    /**
     * @param {?} result
     * @return {?}
     */
    select(result) {
        this.onResultSelected.emit(result);
        this.dropdownService.setOpenState(false);
        if (this.retainSelectedResult) {
            this.selectedResult = result;
            this.searchService.updateQuery(this.readValue(result));
        }
        else {
            this.searchService.updateQuery('');
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        this.open();
    }
    /**
     * @return {?}
     */
    onFocusIn() {
        if (!this.dropdownService.isAnimating) {
            this.open();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocusOut(e) {
        console.log(e);
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.dropdownService.setOpenState(false);
        }
    }
    // Reads the specified field from an item.
    /**
     * @param {?} object
     * @return {?}
     */
    readValue(object) {
        return Util.Object.readValue(object, this.searchService.optionsField);
    }
    /**
     * @private
     * @return {?}
     */
    onLocaleUpdate() {
        this._localeValues = this._localizationService.get().search;
    }
    /**
     * @private
     * @return {?}
     */
    open() {
        if (this.searchService.query.length > 0) {
            // Only open on click when there is a query entered.
            this.dropdownService.setOpenState(true);
        }
    }
}
FuiSearch.decorators = [
    { type: Component, args: [{
                selector: 'fui-search',
                template: `
<div class="ui input" [class.icon]="hasIcon" (click)="onClick($event)">
    <input class="prompt" type="text" [attr.placeholder]="placeholder" autocomplete="off" [(ngModel)]="query">
    <i *ngIf="hasIcon" class="search icon"></i>
</div>
<div class="results"
     fuiDropdownMenu
     [menuTransition]="transition"
     [menuTransitionDuration]="transitionDuration"
     menuSelectedItemClass="active">

    <fui-search-result *ngFor="let r of results"
                       class="item"
                       [value]="r"
                       [query]="query"
                       [formatter]="resultFormatter"
                       [template]="resultTemplate"
                       (click)="select(r)"></fui-search-result>

    <div *ngIf="results.length == 0" class="message empty">
        <div class="header">{{ localeValues.noResults.header }}</div>
        <div class="description">{{ localeValues.noResults.message }}</div>
    </div>
</div>
`,
                styles: [`
/* Ensures results div has margin. */
:host {
    display: inline-block;
    outline: 0;
}

/* Fixes positioning when results are pushed above the search. */
.results {
    margin-bottom: .5em;
}
`]
            }] }
];
/** @nocollapse */
FuiSearch.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: FuiLocalizationService }
];
FuiSearch.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.search',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    hasIcon: [{ type: Input }],
    resultTemplate: [{ type: Input }],
    retainSelectedResult: [{ type: Input }],
    maxResults: [{ type: Input }],
    onResultSelected: [{ type: Output, args: ['resultSelected',] }],
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    _menu: [{ type: ViewChild, args: [FuiDropdownMenu, { static: false },] }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    options: [{ type: Input }],
    optionsFilter: [{ type: Input }],
    optionsLookup: [{ type: Input }],
    optionsField: [{ type: Input }],
    searchDelay: [{ type: Input }],
    isSearching: [{ type: HostBinding, args: ['class.loading',] }],
    placeholder: [{ type: Input }],
    resultFormatter: [{ type: Input }],
    onFocusIn: [{ type: HostListener, args: ['focusin',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiSearch.prototype.dropdownService;
    /** @type {?} */
    FuiSearch.prototype.searchService;
    /** @type {?} */
    FuiSearch.prototype.hasClasses;
    /** @type {?} */
    FuiSearch.prototype.tabindex;
    /** @type {?} */
    FuiSearch.prototype.hasIcon;
    /** @type {?} */
    FuiSearch.prototype.localeOverrides;
    /** @type {?} */
    FuiSearch.prototype.resultTemplate;
    /** @type {?} */
    FuiSearch.prototype.retainSelectedResult;
    /** @type {?} */
    FuiSearch.prototype.maxResults;
    /** @type {?} */
    FuiSearch.prototype.selectedResult;
    /** @type {?} */
    FuiSearch.prototype.onResultSelected;
    /** @type {?} */
    FuiSearch.prototype.transition;
    /** @type {?} */
    FuiSearch.prototype.transitionDuration;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._menu;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._localeValues;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._resultFormatter;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiSearch.prototype._localizationService;
}
//# sourceMappingURL=data:application/json;base64,