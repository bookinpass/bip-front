/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Util } from '../../../misc/util/internal';
/**
 * @record
 * @template T
 */
function ICachedArray() { }
/**
 * @template T, U
 */
export class SearchService {
    /**
     * @param {?=} allowEmptyQuery
     */
    constructor(allowEmptyQuery = false) {
        this._options = [];
        this.optionsFilter = (/**
         * @param {?} os
         * @param {?} q
         * @return {?}
         */
        (os, q) => {
            // Convert the query string to a RegExp.
            /** @type {?} */
            const regex = this.toRegex(this._query);
            if (regex instanceof RegExp) {
                // Only update the results if the query was valid regex.
                // This avoids the results suddenly becoming empty if an invalid regex string is inputted.
                return os
                    // Filter on the options with a string match on the field we are testing.
                    .filter((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => Util.Object.readValue(o, this._optionsField)
                    .toString()
                    .match(regex)));
            }
            // Don't update since it wasn't a valid regex.
            return false;
        });
        // Set default values and reset.
        this.allowEmptyQuery = allowEmptyQuery;
        this.searchDelay = 0;
        this.reset();
    }
    /**
     * @return {?}
     */
    get hasItemLookup() {
        return !!this.optionsLookup && this.optionsLookup.length === 2;
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = options || [];
        // We cannot use both local & remote options simultaneously.
        this._optionsLookup = undefined;
        // Reset entire service with new options.
        this.reset();
    }
    /**
     * @return {?}
     */
    get optionsLookup() {
        return this._optionsLookup;
    }
    /**
     * @param {?} lookupFn
     * @return {?}
     */
    set optionsLookup(lookupFn) {
        this._optionsLookup = lookupFn;
        // As before, cannot use local & remote options simultaneously.
        this._options = [];
        this.reset();
    }
    /**
     * @return {?}
     */
    get optionsField() {
        return this._optionsField;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    set optionsField(field) {
        this._optionsField = field;
        // We need to reset otherwise we would now be showing invalid search results.
        this.reset();
    }
    /**
     * @return {?}
     */
    get results() {
        return this._results;
    }
    /**
     * @return {?}
     */
    get query() {
        return this._query;
    }
    /**
     * @return {?}
     */
    get isSearching() {
        return this._isSearching;
    }
    // Updates the query after the specified search delay.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    updateQueryDelayed(query, callback = (/**
     * @return {?}
     */
    () => {
    })) {
        this._query = query;
        clearTimeout(this._searchDelayTimeout);
        this._searchDelayTimeout = window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.updateQuery(query, callback);
        }), this.searchDelay);
    }
    // Updates the current search query.
    /**
     * @param {?} query
     * @param {?=} callback
     * @return {?}
     */
    updateQuery(query, callback = (/**
     * @return {?}
     */
    () => {
    })) {
        this._query = query;
        if (this._query === '' && !this.allowEmptyQuery) {
            // Don't update if the new query is empty (and we don't allow empty queries).
            // Don't reset so that when animating closed we don't get a judder.
            return callback();
        }
        if (this._resultsCache.hasOwnProperty(this._query)) {
            // If the query is already cached, make use of it.
            this._results = this._resultsCache[this._query];
            return callback();
        }
        if (this._optionsLookup) {
            this._isSearching = true;
            // Call the options lookup without a this context.
            /** @type {?} */
            const queryLookup = (/** @type {?} */ (this._optionsLookup.call(undefined, this._query)));
            queryLookup
                .then((/**
             * @param {?} results
             * @return {?}
             */
            results => {
                this._isSearching = false;
                this.updateResults(results);
                return callback();
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            error => {
                // Unset 'loading' state, and throw the returned error without updating the results.
                this._isSearching = false;
                return callback(error);
            }));
            return;
        }
        /** @type {?} */
        const filtered = this.optionsFilter.call(undefined, this._options, this._query);
        if (filtered) {
            this.updateResults(filtered);
        }
        return callback();
    }
    // tslint:disable-next-line:promise-function-async
    /**
     * @param {?} initial
     * @return {?}
     */
    initialLookup(initial) {
        if (initial instanceof Array) {
            return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this._optionsLookup)))))(undefined, initial)));
        }
        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this._optionsLookup)))))(undefined, initial)));
    }
    // Generates HTML for highlighted match text.
    /**
     * @param {?} text
     * @param {?} query
     * @return {?}
     */
    highlightMatches(text, query) {
        /** @type {?} */
        const regex = this.toRegex(query);
        if (regex instanceof RegExp) {
            return text.replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            match => `<b>${match}</b>`));
        }
        return text;
    }
    // Updates & caches the new set of results.
    /**
     * @private
     * @param {?} results
     * @return {?}
     */
    updateResults(results) {
        this._resultsCache[this._query] = results;
        this._results = results;
    }
    // Converts a query string to regex without throwing an error.
    /**
     * @private
     * @param {?} query
     * @return {?}
     */
    toRegex(query) {
        try {
            return new RegExp(query, 'i');
        }
        catch (e) {
            return query;
        }
    }
    // Resets the search back to a pristine state.
    /**
     * @private
     * @return {?}
     */
    reset() {
        this._results = [];
        this._resultsCache = {};
        this._isSearching = false;
        this.updateQuery('');
    }
}
if (false) {
    /** @type {?} */
    SearchService.prototype.optionsFilter;
    /** @type {?} */
    SearchService.prototype.allowEmptyQuery;
    /** @type {?} */
    SearchService.prototype.searchDelay;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._resultsCache;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._searchDelayTimeout;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._options;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._optionsLookup;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._optionsField;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._results;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._query;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype._isSearching;
}
//# sourceMappingURL=data:application/json;base64,