/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, ElementRef, QueryList } from '@angular/core';
import { FuiRadio } from '../components/radio';
import { Util } from '../../../misc/util/internal';
/**
 * @template T
 */
export class FuiRadioManager {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.isNested = false;
        this._radioSubs = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateNesting();
        this._subManagers.changes.subscribe((/**
         * @return {?}
         */
        () => this.updateNesting()));
        this.updateRadios();
        this._renderedRadios.changes.subscribe((/**
         * @return {?}
         */
        () => this.updateRadios()));
    }
    /**
     * @private
     * @return {?}
     */
    updateNesting() {
        this._subManagers
            .filter((/**
         * @param {?} m
         * @return {?}
         */
        m => m !== this))
            .forEach((/**
         * @param {?} m
         * @return {?}
         */
        m => m.isNested = true));
    }
    /**
     * @private
     * @return {?}
     */
    updateRadios() {
        this._radioSubs.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
        this._radioSubs = [];
        /** @type {?} */
        const groups = Util.Array.groupBy(this._renderedRadios.toArray(), 'name');
        Object
            .keys(groups)
            .map((/**
         * @param {?} k
         * @return {?}
         */
        k => groups[k]))
            .forEach((/**
         * @param {?} g
         * @return {?}
         */
        g => g
            .forEach((/**
         * @param {?} r
         * @return {?}
         */
        r => this._radioSubs
            .push(r.onCurrentValueChange
            .subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            if (!this.isNested) {
                g.forEach((/**
                 * @param {?} radio
                 * @return {?}
                 */
                radio => radio.writeValue(v)));
            }
        })))))));
    }
}
FuiRadioManager.decorators = [
    { type: Directive, args: [{
                selector: 'form:not([ngForm]):not([[ngForm]]),ngForm,[ngForm]'
            },] }
];
/** @nocollapse */
FuiRadioManager.ctorParameters = () => [
    { type: ElementRef }
];
FuiRadioManager.propDecorators = {
    _subManagers: [{ type: ContentChildren, args: [FuiRadioManager, { descendants: true },] }],
    _renderedRadios: [{ type: ContentChildren, args: [FuiRadio, { descendants: true },] }]
};
if (false) {
    /** @type {?} */
    FuiRadioManager.prototype.isNested;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._subManagers;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._renderedRadios;
    /**
     * @type {?}
     * @private
     */
    FuiRadioManager.prototype._radioSubs;
    /** @type {?} */
    FuiRadioManager.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvY2hlY2tib3gvZGlyZWN0aXZlcy9yYWRpby1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW1CLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFN0MsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7O0FBS2pELE1BQU0sT0FBTyxlQUFlOzs7O0lBWTFCLFlBQW1CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVNLGtCQUFrQjtRQUN2QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQyxDQUFDO0lBQ3BFLENBQUM7Ozs7O0lBRU8sYUFBYTtRQUNuQixJQUFJLENBQUMsWUFBWTthQUNkLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUM7YUFDdkIsT0FBTzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLEVBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7Y0FFZixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLENBQUM7UUFDekUsTUFBTTthQUNILElBQUksQ0FBQyxNQUFNLENBQUM7YUFDWixHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUM7YUFDbkIsT0FBTzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNaLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVO2FBQzFCLElBQUksQ0FBQyxDQUFDLENBQUMsb0JBQW9CO2FBQ3pCLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUksRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNsQixDQUFDLENBQUMsT0FBTzs7OztnQkFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQzthQUN6QztRQUNILENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBQyxDQUFDO0lBQ2hCLENBQUM7OztZQWxERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9EQUFvRDthQUMvRDs7OztZQVBxRCxVQUFVOzs7MkJBWTdELGVBQWUsU0FBQyxlQUFlLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDOzhCQUdwRCxlQUFlLFNBQUMsUUFBUSxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQzs7OztJQUw5QyxtQ0FBeUI7Ozs7O0lBRXpCLHVDQUNvRDs7Ozs7SUFFcEQsMENBQ2dEOzs7OztJQUVoRCxxQ0FBbUM7O0lBRXZCLGtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RnVpUmFkaW99IGZyb20gJy4uL2NvbXBvbmVudHMvcmFkaW8nO1xyXG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnZm9ybTpub3QoW25nRm9ybV0pOm5vdChbW25nRm9ybV1dKSxuZ0Zvcm0sW25nRm9ybV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlSYWRpb01hbmFnZXI8VD4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcclxuXHJcbiAgcHVibGljIGlzTmVzdGVkOiBib29sZWFuO1xyXG5cclxuICBAQ29udGVudENoaWxkcmVuKEZ1aVJhZGlvTWFuYWdlciwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcclxuICBwcml2YXRlIF9zdWJNYW5hZ2VyczogUXVlcnlMaXN0PEZ1aVJhZGlvTWFuYWdlcjxUPj47XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oRnVpUmFkaW8sIHtkZXNjZW5kYW50czogdHJ1ZX0pXHJcbiAgcHJpdmF0ZSBfcmVuZGVyZWRSYWRpb3M6IFF1ZXJ5TGlzdDxGdWlSYWRpbzxUPj47XHJcblxyXG4gIHByaXZhdGUgX3JhZGlvU3ViczogU3Vic2NyaXB0aW9uW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLmlzTmVzdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9yYWRpb1N1YnMgPSBbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnVwZGF0ZU5lc3RpbmcoKTtcclxuICAgIHRoaXMuX3N1Yk1hbmFnZXJzLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHRoaXMudXBkYXRlTmVzdGluZygpKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVJhZGlvcygpO1xyXG4gICAgdGhpcy5fcmVuZGVyZWRSYWRpb3MuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVSYWRpb3MoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZU5lc3RpbmcoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdWJNYW5hZ2Vyc1xyXG4gICAgICAuZmlsdGVyKG0gPT4gbSAhPT0gdGhpcylcclxuICAgICAgLmZvckVhY2gobSA9PiBtLmlzTmVzdGVkID0gdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVJhZGlvcygpOiB2b2lkIHtcclxuICAgIHRoaXMuX3JhZGlvU3Vicy5mb3JFYWNoKHMgPT4gcy51bnN1YnNjcmliZSgpKTtcclxuICAgIHRoaXMuX3JhZGlvU3VicyA9IFtdO1xyXG5cclxuICAgIGNvbnN0IGdyb3VwcyA9IFV0aWwuQXJyYXkuZ3JvdXBCeSh0aGlzLl9yZW5kZXJlZFJhZGlvcy50b0FycmF5KCksICduYW1lJyk7XHJcbiAgICBPYmplY3RcclxuICAgICAgLmtleXMoZ3JvdXBzKVxyXG4gICAgICAubWFwKGsgPT4gZ3JvdXBzW2tdKVxyXG4gICAgICAuZm9yRWFjaChnID0+IGdcclxuICAgICAgICAuZm9yRWFjaChyID0+IHRoaXMuX3JhZGlvU3Vic1xyXG4gICAgICAgICAgLnB1c2goci5vbkN1cnJlbnRWYWx1ZUNoYW5nZVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh2OiBUKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTmVzdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBnLmZvckVhY2gocmFkaW8gPT4gcmFkaW8ud3JpdGVWYWx1ZSh2KSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSkpKTtcclxuICB9XHJcbn1cclxuIl19