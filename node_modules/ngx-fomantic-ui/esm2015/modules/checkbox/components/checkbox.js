/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
export class FuiCheckbox {
    constructor() {
        this.isChecked = false;
        this.onCheckChange = new EventEmitter();
        this.onTouched = new EventEmitter();
        this.isDisabled = false;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get checkedAttribute() {
        return this.isChecked ? '' : undefined;
    }
    /**
     * @return {?}
     */
    get isDisabledAttribute() {
        return this.isDisabled ? 'disabled' : undefined;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseDown(e) {
        e.preventDefault();
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.isDisabled && !this.isReadonly) {
            this.toggle();
            this.focusCheckbox();
        }
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.onTouched.emit();
    }
    /**
     * @return {?}
     */
    toggle() {
        this.isChecked = !this.isChecked;
        this.onCheckChange.emit(this.isChecked);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.isChecked = value;
    }
    /**
     * @private
     * @return {?}
     */
    focusCheckbox() {
        this._checkboxElement.nativeElement.focus();
    }
}
FuiCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'fui-checkbox',
                exportAs: 'fuiCheckbox',
                template: `
<input class="hidden"
       type="checkbox"
       [attr.name]="name"
       [attr.checked]="checkedAttribute"
       [attr.disabled]="isDisabledAttribute"
       [(ngModel)]="isChecked"
       #checkbox>
<label>
    <ng-content></ng-content>
</label>
`
            }] }
];
/** @nocollapse */
FuiCheckbox.ctorParameters = () => [];
FuiCheckbox.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.checkbox',] }],
    name: [{ type: Input }],
    isChecked: [{ type: HostBinding, args: ['class.checked',] }],
    onCheckChange: [{ type: Output, args: ['checkChange',] }],
    onTouched: [{ type: Output, args: ['touched',] }],
    isDisabled: [{ type: Input }],
    isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
    _checkboxElement: [{ type: ViewChild, args: ['checkbox', { static: false },] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }]
};
if (false) {
    /** @type {?} */
    FuiCheckbox.prototype.hasClasses;
    /** @type {?} */
    FuiCheckbox.prototype.name;
    /** @type {?} */
    FuiCheckbox.prototype.isChecked;
    /** @type {?} */
    FuiCheckbox.prototype.onCheckChange;
    /** @type {?} */
    FuiCheckbox.prototype.onTouched;
    /** @type {?} */
    FuiCheckbox.prototype.isDisabled;
    /** @type {?} */
    FuiCheckbox.prototype.isReadonly;
    /**
     * @type {?}
     * @private
     */
    FuiCheckbox.prototype._checkboxElement;
}
export class FuiCheckboxValueAccessor extends CustomValueAccessor {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
    }
}
FuiCheckboxValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'fui-checkbox',
                host: {
                    '(checkChange)': 'onChange($event)',
                    '(touched)': 'onTouched()'
                },
                providers: [customValueAccessorFactory(FuiCheckboxValueAccessor)]
            },] }
];
/** @nocollapse */
FuiCheckboxValueAccessor.ctorParameters = () => [
    { type: FuiCheckbox }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2NoZWNrYm94L2NvbXBvbmVudHMvY2hlY2tib3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsSSxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsMEJBQTBCLEVBQTJCLE1BQU0sNkJBQTZCLENBQUM7QUFrQnRILE1BQU0sT0FBTyxXQUFXO0lBMEJ0QjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELElBQVcsZ0JBQWdCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFHTSxXQUFXLENBQUMsQ0FBYTtRQUM5QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQUdNLE9BQU87UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDeEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7OztJQUdNLFVBQVU7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBRU0sVUFBVSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyxhQUFhO1FBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7O1lBMUZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Q0FXWDthQUNBOzs7Ozt5QkFFRSxXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsZ0JBQWdCO21CQUc1QixLQUFLO3dCQUdMLFdBQVcsU0FBQyxlQUFlOzRCQUczQixNQUFNLFNBQUMsYUFBYTt3QkFHcEIsTUFBTSxTQUFDLFNBQVM7eUJBR2hCLEtBQUs7eUJBR0wsV0FBVyxTQUFDLGlCQUFpQixjQUM3QixLQUFLOytCQUVMLFNBQVMsU0FBQyxVQUFVLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDOzBCQXNCckMsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQztzQkFLcEMsWUFBWSxTQUFDLE9BQU87eUJBUXBCLFlBQVksU0FBQyxVQUFVOzs7O0lBekR4QixpQ0FFb0M7O0lBRXBDLDJCQUNvQjs7SUFFcEIsZ0NBQzBCOztJQUUxQixvQ0FDNEM7O0lBRTVDLGdDQUNxQzs7SUFFckMsaUNBQzJCOztJQUUzQixpQ0FFMkI7Ozs7O0lBQzNCLHVDQUNxQzs7QUE2RHZDLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxtQkFBeUM7Ozs7SUFDckYsWUFBWSxJQUFpQjtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDOzs7WUFYRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLElBQUksRUFBRTtvQkFDSixlQUFlLEVBQUUsa0JBQWtCO29CQUNuQyxXQUFXLEVBQUUsYUFBYTtpQkFDM0I7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUMsd0JBQXdCLENBQUMsQ0FBQzthQUNsRTs7OztZQUVtQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0N1c3RvbVZhbHVlQWNjZXNzb3IsIGN1c3RvbVZhbHVlQWNjZXNzb3JGYWN0b3J5LCBJQ3VzdG9tVmFsdWVBY2Nlc3Nvckhvc3R9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1jaGVja2JveCcsXHJcbiAgZXhwb3J0QXM6ICdmdWlDaGVja2JveCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuPGlucHV0IGNsYXNzPVwiaGlkZGVuXCJcclxuICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICBbYXR0ci5uYW1lXT1cIm5hbWVcIlxyXG4gICAgICAgW2F0dHIuY2hlY2tlZF09XCJjaGVja2VkQXR0cmlidXRlXCJcclxuICAgICAgIFthdHRyLmRpc2FibGVkXT1cImlzRGlzYWJsZWRBdHRyaWJ1dGVcIlxyXG4gICAgICAgWyhuZ01vZGVsKV09XCJpc0NoZWNrZWRcIlxyXG4gICAgICAgI2NoZWNrYm94PlxyXG48bGFiZWw+XHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbjwvbGFiZWw+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aUNoZWNrYm94IGltcGxlbWVudHMgSUN1c3RvbVZhbHVlQWNjZXNzb3JIb3N0PGJvb2xlYW4+IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnVpJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNoZWNrYm94JylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNoZWNrZWQnKVxyXG4gIHB1YmxpYyBpc0NoZWNrZWQ6IGJvb2xlYW47XHJcblxyXG4gIEBPdXRwdXQoJ2NoZWNrQ2hhbmdlJylcclxuICBwdWJsaWMgb25DaGVja0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG5cclxuICBAT3V0cHV0KCd0b3VjaGVkJylcclxuICBwdWJsaWMgb25Ub3VjaGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGlzRGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmVhZC1vbmx5JylcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpc1JlYWRvbmx5OiBib29sZWFuO1xyXG4gIEBWaWV3Q2hpbGQoJ2NoZWNrYm94Jywge3N0YXRpYzogZmFsc2V9KVxyXG4gIHByaXZhdGUgX2NoZWNrYm94RWxlbWVudDogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmlzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbkNoZWNrQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG4gICAgdGhpcy5vblRvdWNoZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzUmVhZG9ubHkgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmhhc0NsYXNzZXMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjaGVja2VkQXR0cmlidXRlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pc0NoZWNrZWQgPyAnJyA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNEaXNhYmxlZEF0dHJpYnV0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNEaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbk1vdXNlRG93bihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgcHVibGljIG9uQ2xpY2soKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCAmJiAhdGhpcy5pc1JlYWRvbmx5KSB7XHJcbiAgICAgIHRoaXMudG9nZ2xlKCk7XHJcbiAgICAgIHRoaXMuZm9jdXNDaGVja2JveCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXNvdXQnKVxyXG4gIHB1YmxpYyBvbkZvY3VzT3V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5vblRvdWNoZWQuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNDaGVja2VkID0gIXRoaXMuaXNDaGVja2VkO1xyXG4gICAgdGhpcy5vbkNoZWNrQ2hhbmdlLmVtaXQodGhpcy5pc0NoZWNrZWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuaXNDaGVja2VkID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvY3VzQ2hlY2tib3goKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jaGVja2JveEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdmdWktY2hlY2tib3gnLFxyXG4gIGhvc3Q6IHtcclxuICAgICcoY2hlY2tDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudCknLFxyXG4gICAgJyh0b3VjaGVkKSc6ICdvblRvdWNoZWQoKSdcclxuICB9LFxyXG4gIHByb3ZpZGVyczogW2N1c3RvbVZhbHVlQWNjZXNzb3JGYWN0b3J5KEZ1aUNoZWNrYm94VmFsdWVBY2Nlc3NvcildXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlDaGVja2JveFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBDdXN0b21WYWx1ZUFjY2Vzc29yPGJvb2xlYW4sIEZ1aUNoZWNrYm94PiB7XHJcbiAgY29uc3RydWN0b3IoaG9zdDogRnVpQ2hlY2tib3gpIHtcclxuICAgIHN1cGVyKGhvc3QpO1xyXG4gIH1cclxufVxyXG4iXX0=