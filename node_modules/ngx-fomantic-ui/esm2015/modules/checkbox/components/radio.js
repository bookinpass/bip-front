/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
/**
 * @template T
 */
export class FuiRadio {
    constructor() {
        this.isChecked = false;
        this.onCurrentValueChange = new EventEmitter();
        this.onTouched = new EventEmitter();
        this.isDisabled = false;
        this.isReadonly = false;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get checkedAttribute() {
        return this.isChecked ? '' : undefined;
    }
    /**
     * @return {?}
     */
    get isDisabledAttribute() {
        return this.isDisabled ? 'disabled' : undefined;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseDown(e) {
        e.preventDefault();
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.isDisabled && !this.isReadonly) {
            this.currentValue = this.value;
            this.onCurrentValueChange.emit(this.currentValue);
            this.update();
            this.focusRadio();
        }
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.onTouched.emit();
    }
    /**
     * @return {?}
     */
    update() {
        this.isChecked = this.currentValue === this.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.currentValue = value;
        this.update();
    }
    /**
     * @private
     * @return {?}
     */
    focusRadio() {
        this._radioElement.nativeElement.focus();
    }
}
FuiRadio.decorators = [
    { type: Component, args: [{
                selector: 'fui-radio-button',
                template: `
<input class="hidden"
       type="checkbox"
       [attr.name]="name"
       [attr.checked]="checkedAttribute"
       [attr.disabled]="isDisabledAttribute"
       [ngModel]="isChecked"
       (ngModel)="currentValue = value"
       #radio>
<label>
    <ng-content></ng-content>
</label>
`
            }] }
];
/** @nocollapse */
FuiRadio.ctorParameters = () => [];
FuiRadio.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.radio',] }, { type: HostBinding, args: ['class.checkbox',] }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    isChecked: [{ type: HostBinding, args: ['class.checked',] }],
    onCurrentValueChange: [{ type: Output, args: ['currentValueChange',] }],
    onTouched: [{ type: Output, args: ['touched',] }],
    isDisabled: [{ type: Input }],
    isReadonly: [{ type: HostBinding, args: ['class.read-only',] }, { type: Input }],
    _radioElement: [{ type: ViewChild, args: ['radio', { static: false },] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }]
};
if (false) {
    /** @type {?} */
    FuiRadio.prototype.hasClasses;
    /** @type {?} */
    FuiRadio.prototype.name;
    /** @type {?} */
    FuiRadio.prototype.value;
    /** @type {?} */
    FuiRadio.prototype.isChecked;
    /** @type {?} */
    FuiRadio.prototype.currentValue;
    /** @type {?} */
    FuiRadio.prototype.onCurrentValueChange;
    /** @type {?} */
    FuiRadio.prototype.onTouched;
    /** @type {?} */
    FuiRadio.prototype.isDisabled;
    /** @type {?} */
    FuiRadio.prototype.isReadonly;
    /**
     * @type {?}
     * @private
     */
    FuiRadio.prototype._radioElement;
}
/**
 * @template T
 */
export class FuiRadioValueAccessor extends CustomValueAccessor {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
    }
}
FuiRadioValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'fui-radio-button',
                host: {
                    '(currentValueChange)': 'onChange($event)',
                    '(touched)': 'onTouched()'
                },
                providers: [customValueAccessorFactory(FuiRadioValueAccessor)]
            },] }
];
/** @nocollapse */
FuiRadioValueAccessor.ctorParameters = () => [
    { type: FuiRadio }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2NoZWNrYm94L2NvbXBvbmVudHMvcmFkaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsSSxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsMEJBQTBCLEVBQTJCLE1BQU0sNkJBQTZCLENBQUM7Ozs7QUFrQnRILE1BQU0sT0FBTyxRQUFRO0lBaUNuQjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLFlBQVksRUFBSyxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUUxQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsSUFBVyxtQkFBbUI7UUFDNUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUdNLFdBQVcsQ0FBQyxDQUFhO1FBQzlCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBR00sT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7OztJQUdNLFVBQVU7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEQsQ0FBQzs7Ozs7SUFFTSxVQUFVLENBQUMsS0FBUTtRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNDLENBQUM7OztZQW5HRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Q0FZWDthQUNBOzs7Ozt5QkFFRSxXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsYUFBYSxjQUN6QixXQUFXLFNBQUMsZ0JBQWdCO21CQUc1QixLQUFLO29CQUdMLEtBQUs7d0JBR0wsV0FBVyxTQUFDLGVBQWU7bUNBSzNCLE1BQU0sU0FBQyxvQkFBb0I7d0JBRzNCLE1BQU0sU0FBQyxTQUFTO3lCQUdoQixLQUFLO3lCQUdMLFdBQVcsU0FBQyxpQkFBaUIsY0FDN0IsS0FBSzs0QkFHTCxTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzswQkFzQmxDLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7c0JBS3BDLFlBQVksU0FBQyxPQUFPO3lCQVVwQixZQUFZLFNBQUMsVUFBVTs7OztJQWxFeEIsOEJBR29DOztJQUVwQyx3QkFDb0I7O0lBRXBCLHlCQUNnQjs7SUFFaEIsNkJBQzBCOztJQUUxQixnQ0FBdUI7O0lBRXZCLHdDQUM2Qzs7SUFFN0MsNkJBQ3FDOztJQUVyQyw4QkFDMkI7O0lBRTNCLDhCQUUyQjs7Ozs7SUFFM0IsaUNBQ2tDOzs7OztBQStEcEMsTUFBTSxPQUFPLHFCQUF5QixTQUFRLG1CQUFtQzs7OztJQUMvRSxZQUFZLElBQWlCO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7OztZQVhGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixJQUFJLEVBQUU7b0JBQ0osc0JBQXNCLEVBQUUsa0JBQWtCO29CQUMxQyxXQUFXLEVBQUUsYUFBYTtpQkFDM0I7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUMscUJBQXFCLENBQUMsQ0FBQzthQUMvRDs7OztZQUVtQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0N1c3RvbVZhbHVlQWNjZXNzb3IsIGN1c3RvbVZhbHVlQWNjZXNzb3JGYWN0b3J5LCBJQ3VzdG9tVmFsdWVBY2Nlc3Nvckhvc3R9IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1yYWRpby1idXR0b24nLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjxpbnB1dCBjbGFzcz1cImhpZGRlblwiXHJcbiAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgW2F0dHIubmFtZV09XCJuYW1lXCJcclxuICAgICAgIFthdHRyLmNoZWNrZWRdPVwiY2hlY2tlZEF0dHJpYnV0ZVwiXHJcbiAgICAgICBbYXR0ci5kaXNhYmxlZF09XCJpc0Rpc2FibGVkQXR0cmlidXRlXCJcclxuICAgICAgIFtuZ01vZGVsXT1cImlzQ2hlY2tlZFwiXHJcbiAgICAgICAobmdNb2RlbCk9XCJjdXJyZW50VmFsdWUgPSB2YWx1ZVwiXHJcbiAgICAgICAjcmFkaW8+XHJcbjxsYWJlbD5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuPC9sYWJlbD5cclxuYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpUmFkaW88VD4gaW1wbGVtZW50cyBJQ3VzdG9tVmFsdWVBY2Nlc3Nvckhvc3Q8VD4ge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MudWknKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmFkaW8nKVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2hlY2tib3gnKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHZhbHVlOiBUO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNoZWNrZWQnKVxyXG4gIHB1YmxpYyBpc0NoZWNrZWQ6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBjdXJyZW50VmFsdWU6IFQ7XHJcblxyXG4gIEBPdXRwdXQoJ2N1cnJlbnRWYWx1ZUNoYW5nZScpXHJcbiAgcHVibGljIG9uQ3VycmVudFZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VD47XHJcblxyXG4gIEBPdXRwdXQoJ3RvdWNoZWQnKVxyXG4gIHB1YmxpYyBvblRvdWNoZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgaXNEaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5yZWFkLW9ubHknKVxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGlzUmVhZG9ubHk6IGJvb2xlYW47XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3JhZGlvJywge3N0YXRpYzogZmFsc2V9KVxyXG4gIHByaXZhdGUgX3JhZGlvRWxlbWVudDogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmlzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vbkN1cnJlbnRWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc1JlYWRvbmx5ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY2hlY2tlZEF0dHJpYnV0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNDaGVja2VkID8gJycgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzRGlzYWJsZWRBdHRyaWJ1dGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmlzRGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgb25Nb3VzZURvd24oZTogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQgJiYgIXRoaXMuaXNSZWFkb25seSkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgIHRoaXMub25DdXJyZW50VmFsdWVDaGFuZ2UuZW1pdCh0aGlzLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgIHRoaXMuZm9jdXNSYWRpbygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXNvdXQnKVxyXG4gIHB1YmxpYyBvbkZvY3VzT3V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5vblRvdWNoZWQuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNDaGVja2VkID0gdGhpcy5jdXJyZW50VmFsdWUgPT09IHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgd3JpdGVWYWx1ZSh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWx1ZTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvY3VzUmFkaW8oKTogdm9pZCB7XHJcbiAgICB0aGlzLl9yYWRpb0VsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdmdWktcmFkaW8tYnV0dG9uJyxcclxuICBob3N0OiB7XHJcbiAgICAnKGN1cnJlbnRWYWx1ZUNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50KScsXHJcbiAgICAnKHRvdWNoZWQpJzogJ29uVG91Y2hlZCgpJ1xyXG4gIH0sXHJcbiAgcHJvdmlkZXJzOiBbY3VzdG9tVmFsdWVBY2Nlc3NvckZhY3RvcnkoRnVpUmFkaW9WYWx1ZUFjY2Vzc29yKV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aVJhZGlvVmFsdWVBY2Nlc3NvcjxUPiBleHRlbmRzIEN1c3RvbVZhbHVlQWNjZXNzb3I8VCwgRnVpUmFkaW88VD4+IHtcclxuICBjb25zdHJ1Y3Rvcihob3N0OiBGdWlSYWRpbzxUPikge1xyXG4gICAgc3VwZXIoaG9zdCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==