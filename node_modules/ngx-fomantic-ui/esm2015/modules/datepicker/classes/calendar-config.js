/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CalendarMode } from '../services/calendar.service';
import { DateMappings, DatetimeMappings, MonthMappings, TimeMappings, YearMappings } from './calendar-mappings';
import { DatePrecision, DateUtil } from '../../../misc/util/internal';
/**
 * @abstract
 */
export class CalendarConfig {
    /**
     * @param {?} mode
     * @param {?} precision
     * @param {?} mappings
     * @param {?} fallback
     */
    constructor(mode, precision, mappings, fallback) {
        this.mode = mode;
        this.precision = precision;
        this.mappings = mappings;
        this.fallback = fallback;
    }
    /**
     * @param {?} providedDate
     * @return {?}
     */
    updateBounds(providedDate) {
        this.dateMinBound = DateUtil.startOf(DatePrecision.Year, new Date(), true);
        this.dateMinBound.setFullYear(0);
    }
}
if (false) {
    /** @type {?} */
    CalendarConfig.prototype.mode;
    /** @type {?} */
    CalendarConfig.prototype.precision;
    /** @type {?} */
    CalendarConfig.prototype.mappings;
    /** @type {?} */
    CalendarConfig.prototype.fallback;
    /** @type {?} */
    CalendarConfig.prototype.dateMinBound;
    /** @type {?} */
    CalendarConfig.prototype.dateMaxBound;
}
export class DateConfigBase extends CalendarConfig {
    /**
     * @param {?} precision
     * @param {?} mappings
     * @param {?} fallback
     */
    constructor(precision, mappings, fallback) {
        super(CalendarMode.DateOnly, precision, mappings, fallback);
    }
}
export class YearConfig extends DateConfigBase {
    constructor() {
        super(DatePrecision.Year, new YearMappings(), 'number');
    }
}
export class MonthConfig extends DateConfigBase {
    constructor() {
        super(DatePrecision.Month, new MonthMappings(), 'month');
    }
}
export class DateConfig extends DateConfigBase {
    constructor() {
        super(DatePrecision.Date, new DateMappings(), 'date');
    }
}
export class DatetimeConfig extends CalendarConfig {
    constructor() {
        super(CalendarMode.Both, DatePrecision.Minute, new DatetimeMappings(), 'datetime-local');
    }
}
export class TimeConfig extends CalendarConfig {
    constructor() {
        super(CalendarMode.TimeOnly, DatePrecision.Minute, new TimeMappings(), 'time');
    }
    /**
     * @param {?} providedDate
     * @return {?}
     */
    updateBounds(providedDate) {
        this.dateMaxBound = DateUtil.endOf(DatePrecision.Date, DateUtil.clone(providedDate));
        this.dateMinBound = DateUtil.previous(DatePrecision.Date, DateUtil.clone(this.dateMaxBound));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL2NsYXNzZXMvY2FsZW5kYXItY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFtQixZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNoSSxPQUFPLEVBQUMsYUFBYSxFQUFFLFFBQVEsRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7O0FBRXBFLE1BQU0sT0FBZ0IsY0FBYzs7Ozs7OztJQVVsQyxZQUFZLElBQWtCLEVBQUUsU0FBd0IsRUFBRSxRQUEwQixFQUFFLFFBQWdCO1FBQ3BHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLFlBQWtCO1FBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNGOzs7SUFwQkMsOEJBQTBCOztJQUMxQixtQ0FBZ0M7O0lBQ2hDLGtDQUFrQzs7SUFFbEMsa0NBQXdCOztJQUV4QixzQ0FBMkI7O0lBQzNCLHNDQUEyQjs7QUFlN0IsTUFBTSxPQUFPLGNBQWUsU0FBUSxjQUFjOzs7Ozs7SUFDaEQsWUFBWSxTQUF3QixFQUFFLFFBQTBCLEVBQUUsUUFBZ0I7UUFDaEYsS0FBSyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sVUFBVyxTQUFRLGNBQWM7SUFDNUM7UUFDRSxLQUFLLENBQ0gsYUFBYSxDQUFDLElBQUksRUFDbEIsSUFBSSxZQUFZLEVBQUUsRUFDbEIsUUFBUSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sV0FBWSxTQUFRLGNBQWM7SUFDN0M7UUFDRSxLQUFLLENBQ0gsYUFBYSxDQUFDLEtBQUssRUFDbkIsSUFBSSxhQUFhLEVBQUUsRUFDbkIsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sVUFBVyxTQUFRLGNBQWM7SUFDNUM7UUFDRSxLQUFLLENBQ0gsYUFBYSxDQUFDLElBQUksRUFDbEIsSUFBSSxZQUFZLEVBQUUsRUFDbEIsTUFBTSxDQUFDLENBQUM7SUFDWixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBZSxTQUFRLGNBQWM7SUFDaEQ7UUFDRSxLQUFLLENBQ0gsWUFBWSxDQUFDLElBQUksRUFDakIsYUFBYSxDQUFDLE1BQU0sRUFDcEIsSUFBSSxnQkFBZ0IsRUFBRSxFQUN0QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxVQUFXLFNBQVEsY0FBYztJQUM1QztRQUNFLEtBQUssQ0FDSCxZQUFZLENBQUMsUUFBUSxFQUNyQixhQUFhLENBQUMsTUFBTSxFQUNwQixJQUFJLFlBQVksRUFBRSxFQUNsQixNQUFNLENBQUMsQ0FBQztJQUNaLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLFlBQWtCO1FBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2FsZW5kYXJNb2RlfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWxlbmRhci5zZXJ2aWNlJztcclxuaW1wb3J0IHtDYWxlbmRhck1hcHBpbmdzLCBEYXRlTWFwcGluZ3MsIERhdGV0aW1lTWFwcGluZ3MsIE1vbnRoTWFwcGluZ3MsIFRpbWVNYXBwaW5ncywgWWVhck1hcHBpbmdzfSBmcm9tICcuL2NhbGVuZGFyLW1hcHBpbmdzJztcclxuaW1wb3J0IHtEYXRlUHJlY2lzaW9uLCBEYXRlVXRpbH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYWxlbmRhckNvbmZpZyB7XHJcbiAgcHVibGljIG1vZGU6IENhbGVuZGFyTW9kZTtcclxuICBwdWJsaWMgcHJlY2lzaW9uOiBEYXRlUHJlY2lzaW9uO1xyXG4gIHB1YmxpYyBtYXBwaW5nczogQ2FsZW5kYXJNYXBwaW5ncztcclxuXHJcbiAgcHVibGljIGZhbGxiYWNrOiBzdHJpbmc7XHJcblxyXG4gIHB1YmxpYyBkYXRlTWluQm91bmQ/OiBEYXRlO1xyXG4gIHB1YmxpYyBkYXRlTWF4Qm91bmQ/OiBEYXRlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihtb2RlOiBDYWxlbmRhck1vZGUsIHByZWNpc2lvbjogRGF0ZVByZWNpc2lvbiwgbWFwcGluZ3M6IENhbGVuZGFyTWFwcGluZ3MsIGZhbGxiYWNrOiBzdHJpbmcpIHtcclxuICAgIHRoaXMubW9kZSA9IG1vZGU7XHJcbiAgICB0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcclxuICAgIHRoaXMubWFwcGluZ3MgPSBtYXBwaW5ncztcclxuICAgIHRoaXMuZmFsbGJhY2sgPSBmYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVCb3VuZHMocHJvdmlkZWREYXRlOiBEYXRlKTogdm9pZCB7XHJcbiAgICB0aGlzLmRhdGVNaW5Cb3VuZCA9IERhdGVVdGlsLnN0YXJ0T2YoRGF0ZVByZWNpc2lvbi5ZZWFyLCBuZXcgRGF0ZSgpLCB0cnVlKTtcclxuICAgIHRoaXMuZGF0ZU1pbkJvdW5kLnNldEZ1bGxZZWFyKDApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVDb25maWdCYXNlIGV4dGVuZHMgQ2FsZW5kYXJDb25maWcge1xyXG4gIGNvbnN0cnVjdG9yKHByZWNpc2lvbjogRGF0ZVByZWNpc2lvbiwgbWFwcGluZ3M6IENhbGVuZGFyTWFwcGluZ3MsIGZhbGxiYWNrOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKENhbGVuZGFyTW9kZS5EYXRlT25seSwgcHJlY2lzaW9uLCBtYXBwaW5ncywgZmFsbGJhY2spO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFllYXJDb25maWcgZXh0ZW5kcyBEYXRlQ29uZmlnQmFzZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgRGF0ZVByZWNpc2lvbi5ZZWFyLFxyXG4gICAgICBuZXcgWWVhck1hcHBpbmdzKCksXHJcbiAgICAgICdudW1iZXInKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNb250aENvbmZpZyBleHRlbmRzIERhdGVDb25maWdCYXNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBEYXRlUHJlY2lzaW9uLk1vbnRoLFxyXG4gICAgICBuZXcgTW9udGhNYXBwaW5ncygpLFxyXG4gICAgICAnbW9udGgnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlQ29uZmlnIGV4dGVuZHMgRGF0ZUNvbmZpZ0Jhc2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXHJcbiAgICAgIERhdGVQcmVjaXNpb24uRGF0ZSxcclxuICAgICAgbmV3IERhdGVNYXBwaW5ncygpLFxyXG4gICAgICAnZGF0ZScpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGV0aW1lQ29uZmlnIGV4dGVuZHMgQ2FsZW5kYXJDb25maWcge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXHJcbiAgICAgIENhbGVuZGFyTW9kZS5Cb3RoLFxyXG4gICAgICBEYXRlUHJlY2lzaW9uLk1pbnV0ZSxcclxuICAgICAgbmV3IERhdGV0aW1lTWFwcGluZ3MoKSxcclxuICAgICAgJ2RhdGV0aW1lLWxvY2FsJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZUNvbmZpZyBleHRlbmRzIENhbGVuZGFyQ29uZmlnIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBDYWxlbmRhck1vZGUuVGltZU9ubHksXHJcbiAgICAgIERhdGVQcmVjaXNpb24uTWludXRlLFxyXG4gICAgICBuZXcgVGltZU1hcHBpbmdzKCksXHJcbiAgICAgICd0aW1lJyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlQm91bmRzKHByb3ZpZGVkRGF0ZTogRGF0ZSk6IHZvaWQge1xyXG4gICAgdGhpcy5kYXRlTWF4Qm91bmQgPSBEYXRlVXRpbC5lbmRPZihEYXRlUHJlY2lzaW9uLkRhdGUsIERhdGVVdGlsLmNsb25lKHByb3ZpZGVkRGF0ZSkpO1xyXG4gICAgdGhpcy5kYXRlTWluQm91bmQgPSBEYXRlVXRpbC5wcmV2aW91cyhEYXRlUHJlY2lzaW9uLkRhdGUsIERhdGVVdGlsLmNsb25lKHRoaXMuZGF0ZU1heEJvdW5kKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==