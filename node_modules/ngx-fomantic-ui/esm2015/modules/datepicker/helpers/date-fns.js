/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { format, parse } from 'date-fns';
import * as defaultLocale from 'date-fns/locale/en';
/**
 * @record
 */
function IDateFnsLocaleValues() { }
/**
 * @record
 */
function IDateFnsHelperOptions() { }
if (false) {
    /** @type {?} */
    IDateFnsHelperOptions.prototype.type;
}
/**
 * @record
 */
function IDateFnsCustomLocale() { }
if (false) {
    /** @type {?} */
    IDateFnsCustomLocale.prototype.localize;
    /** @type {?} */
    IDateFnsCustomLocale.prototype.match;
    /** @type {?|undefined} */
    IDateFnsCustomLocale.prototype.options;
}
/**
 * @param {?} values
 * @param {?} defaultType
 * @param {?=} indexCallback
 * @return {?}
 */
function buildLocalizeFn(values, defaultType, indexCallback) {
    return (/**
     * @param {?} dirtyIndex
     * @param {?=} __1
     * @return {?}
     */
    (dirtyIndex, { type } = { type: defaultType }) => {
        /** @type {?} */
        const index = indexCallback ? indexCallback(dirtyIndex) : dirtyIndex;
        return values[`${type}`][index];
    });
}
/**
 * @param {?} values
 * @param {?} defaultType
 * @return {?}
 */
function buildLocalizeArrayFn(values, defaultType) {
    return (/**
     * @param {?=} __0
     * @return {?}
     */
    ({ type } = { type: defaultType }) => values[`${type}`]);
}
/**
 * @param {?} patterns
 * @param {?} defaultType
 * @return {?}
 */
function buildMatchFn(patterns, defaultType) {
    return (/**
     * @param {?} dirtyString
     * @param {?=} __1
     * @return {?}
     */
    (dirtyString, { type } = { type: defaultType }) => dirtyString.match(`^(${patterns[`${type}`].join('|')})`));
}
/**
 * @param {?} patterns
 * @param {?} defaultType
 * @return {?}
 */
function buildParseFn(patterns, defaultType) {
    return (/**
     * @param {?} __0
     * @param {?=} __1
     * @return {?}
     */
    ([, result], { type } = { type: defaultType }) => (patterns[`${type}`] || patterns[defaultType])
        .map((/**
     * @param {?} p
     * @return {?}
     */
    p => new RegExp(`^${p}`)))
        .findIndex((/**
     * @param {?} pattern
     * @return {?}
     */
    pattern => pattern.test(result))));
}
export class DateFnsParser {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        this._weekStartsOn = (/** @type {?} */ (locale.firstDayOfWeek));
        /** @type {?} */
        const weekdayValues = {
            long: locale.weekdays,
            short: locale.weekdaysShort,
            narrow: locale.weekdaysNarrow
        };
        /** @type {?} */
        const monthValues = {
            long: locale.months,
            short: locale.monthsShort
        };
        /** @type {?} */
        const timeOfDayValues = {
            long: locale.timesOfDay,
            uppercase: locale.timesOfDayUppercase,
            lowercase: locale.timesOfDayLowercase
        };
        /** @type {?} */
        const timeOfDayMatchValues = {
            long: locale.timesOfDay,
            short: locale.timesOfDayUppercase.concat(locale.timesOfDayLowercase)
        };
        this._locale = (/** @type {?} */ (defaultLocale));
        this._locale.localize = Object.assign({}, this._locale.localize, {
            weekday: buildLocalizeFn(weekdayValues, 'long'),
            weekdays: buildLocalizeArrayFn(weekdayValues, 'long'),
            month: buildLocalizeFn(monthValues, 'long'),
            months: buildLocalizeArrayFn(monthValues, 'long'),
            timeOfDay: buildLocalizeFn(timeOfDayValues, 'long', (/**
             * @param {?} hours
             * @return {?}
             */
            (hours) => {
                return hours / 12 >= 1 ? 1 : 0;
            })),
            timesOfDay: buildLocalizeArrayFn(timeOfDayValues, 'long')
        });
        this._locale.match = Object.assign({}, this._locale.match, {
            weekdays: buildMatchFn(weekdayValues, 'long'),
            weekday: buildParseFn(weekdayValues, 'long'),
            months: buildMatchFn(monthValues, 'long'),
            month: buildParseFn(monthValues, 'long'),
            timesOfDay: buildMatchFn(timeOfDayMatchValues, 'long'),
            timeOfDay: buildParseFn(timeOfDayMatchValues, 'long')
        });
    }
    /**
     * @private
     * @return {?}
     */
    get _config() {
        return {
            weekStartsOn: this._weekStartsOn,
            locale: this._locale
        };
    }
    /**
     * @param {?} d
     * @param {?} f
     * @return {?}
     */
    format(d, f) {
        return format(d, f, this._config);
    }
    /**
     * @param {?} dS
     * @param {?} f
     * @param {?} bD
     * @return {?}
     */
    parse(dS, f, bD) {
        return parse(dS, this._config);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateFnsParser.prototype._weekStartsOn;
    /**
     * @type {?}
     * @private
     */
    DateFnsParser.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,