/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DateUtil, Util } from '../../../misc/util/internal';
import { CalendarItem } from '../directives/calendar-item';
import { DateComparer } from '../classes/date-comparer';
export class CalendarRange {
    /**
     * @param {?} start
     * @param {?} dates
     * @param {?} items
     * @param {?} grouped
     * @param {?} comparer
     */
    constructor(start, dates, items, grouped, comparer) {
        this.start = start;
        this.dates = dates;
        this.items = items;
        this.groupedItems = grouped;
        this._comparer = comparer;
    }
    /**
     * @return {?}
     */
    get inRange() {
        return this.items.filter((/**
         * @param {?} i
         * @return {?}
         */
        i => !i.isOutsideRange));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    find(item) {
        return this.items.find((/**
         * @param {?} i
         * @return {?}
         */
        i => this._comparer.equal(i.date, item.date)));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    findIndex(item) {
        if (!item) {
            return -1;
        }
        return this.items.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => this._comparer.equal(i.date, item.date)));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    containsDate(date) {
        return !!this.inRange.find((/**
         * @param {?} i
         * @return {?}
         */
        i => this._comparer.equal(i.date, date)));
    }
}
if (false) {
    /** @type {?} */
    CalendarRange.prototype.start;
    /** @type {?} */
    CalendarRange.prototype.dates;
    /** @type {?} */
    CalendarRange.prototype.items;
    /** @type {?} */
    CalendarRange.prototype.groupedItems;
    /**
     * @type {?}
     * @private
     */
    CalendarRange.prototype._comparer;
}
/**
 * @abstract
 */
export class CalendarRangeService {
    /**
     * @param {?} interval
     * @param {?} rows
     * @param {?} columns
     */
    constructor(interval, rows, columns) {
        this.interval = interval;
        this.marginal = (/** @type {?} */ (interval)) + 1;
        this.rows = rows;
        this.columns = columns;
    }
    /**
     * @return {?}
     */
    get dateComparer() {
        return new DateComparer(this.marginal, this.service.inFinalView);
    }
    /**
     * @return {?}
     */
    get length() {
        return this.rows * this.columns;
    }
    /**
     * @return {?}
     */
    get canMoveNext() {
        /** @type {?} */
        const firstItem = this.next.inRange[0];
        if (firstItem && this.service.maxDate) {
            return firstItem.date <= this.service.maxDate;
        }
        return true;
    }
    /**
     * @return {?}
     */
    get canMovePrevious() {
        /** @type {?} */
        const lastItem = this.previous.inRange.slice(-1).pop();
        if (lastItem && this.service.minDate) {
            return lastItem.date >= this.service.minDate;
        }
        return true;
    }
    /**
     * @param {?} service
     * @return {?}
     */
    loadService(service) {
        this.service = service;
        this.refresh();
    }
    /**
     * @return {?}
     */
    refresh() {
        this.current = this.calcRange(this.service.currentDate);
        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));
        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    /**
     * @param {?} forwards
     * @return {?}
     */
    move(forwards) {
        if (forwards) {
            return this.moveNext();
        }
        return this.movePrevious();
    }
    /**
     * @return {?}
     */
    moveNext() {
        DateUtil.next(this.interval, this.service.currentDate);
        this.previous = this.current;
        this.current = this.next;
        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    /**
     * @return {?}
     */
    movePrevious() {
        DateUtil.previous(this.interval, this.service.currentDate);
        this.next = this.current;
        this.current = this.previous;
        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    /**
     * @param {?} forwards
     * @return {?}
     */
    calc(forwards) {
        if (forwards) {
            return this.next;
        }
        return this.previous;
    }
    /**
     * @protected
     * @param {?} date
     * @return {?}
     */
    calcStart(date) {
        return DateUtil.startOf(this.interval, DateUtil.clone(date));
    }
    /**
     * @protected
     * @param {?} rangeStart
     * @return {?}
     */
    calcDates(rangeStart) {
        return Util.Array
            .range(this.length)
            .map((/**
         * @param {?} i
         * @return {?}
         */
        i => DateUtil.add(this.marginal, DateUtil.clone(rangeStart), i)));
    }
    /**
     * @protected
     * @param {?} dateRange
     * @param {?} baseDate
     * @return {?}
     */
    calcItems(dateRange, baseDate) {
        return dateRange.map((/**
         * @param {?} date
         * @return {?}
         */
        date => {
            /** @type {?} */
            const item = new CalendarItem(date);
            item.isDisabled = !this.dateComparer.between(item.date, this.service.minDate, this.service.maxDate);
            item.isActive = this.dateComparer.equal(item.date, this.service.selectedDate);
            item.isToday = this.dateComparer.equal(item.date, new Date());
            item.isSelectable = item.isDisabled;
            this.configureItem(item, baseDate);
            return item;
        }));
    }
    /**
     * @private
     * @param {?} startDate
     * @return {?}
     */
    calcRange(startDate) {
        /** @type {?} */
        const start = this.calcStart(startDate);
        if (this.service.inFinalView) {
            DateUtil.startOf(this.marginal, start, true);
        }
        /** @type {?} */
        const dates = this.calcDates(start);
        /** @type {?} */
        const items = this.calcItems(dates, startDate);
        return new CalendarRange(start, dates, items, Util.Array.group(items, this.columns), this.dateComparer);
    }
}
if (false) {
    /** @type {?} */
    CalendarRangeService.prototype.previous;
    /** @type {?} */
    CalendarRangeService.prototype.current;
    /** @type {?} */
    CalendarRangeService.prototype.next;
    /** @type {?} */
    CalendarRangeService.prototype.service;
    /** @type {?} */
    CalendarRangeService.prototype.interval;
    /** @type {?} */
    CalendarRangeService.prototype.marginal;
    /** @type {?} */
    CalendarRangeService.prototype.rows;
    /** @type {?} */
    CalendarRangeService.prototype.columns;
    /**
     * @abstract
     * @protected
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    CalendarRangeService.prototype.configureItem = function (item, baseDate) { };
}
//# sourceMappingURL=data:application/json;base64,