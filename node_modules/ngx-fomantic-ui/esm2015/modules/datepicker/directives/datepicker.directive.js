/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2 } from '@angular/core';
import { CustomValidator, customValidatorFactory, CustomValueAccessor, customValueAccessorFactory, KeyCode, PositioningPlacement, FuiComponentFactory } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { PopupConfig, PopupTrigger, FuiPopupComponentController } from '../../popup/internal';
import { DatepickerMode, FuiDatepicker } from '../components/datepicker';
import { DateConfig, DatetimeConfig, MonthConfig, TimeConfig, YearConfig } from '../classes/calendar-config';
export class FuiDatepickerDirective extends FuiPopupComponentController {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} componentFactory
     * @param {?} localizationService
     */
    constructor(renderer, element, componentFactory, localizationService) {
        super(renderer, element, componentFactory, FuiDatepicker, new PopupConfig({
            trigger: PopupTrigger.Focus,
            placement: PositioningPlacement.BottomLeft,
            transition: 'scale',
            transitionDuration: 200
        }));
        this.localizationService = localizationService;
        // This ensures the popup is drawn correctly (i.e. no border).
        this._renderer.addClass(this.popup.elementRef.nativeElement, 'ui');
        this._renderer.addClass(this.popup.elementRef.nativeElement, 'calendar');
        this.onLocaleUpdate();
        this.localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        () => this.onLocaleUpdate()));
        this.onSelectedDateChange = new EventEmitter();
        this.onValidatorChange = new EventEmitter();
        this.mode = DatepickerMode.Datetime;
    }
    /**
     * @param {?} placement
     * @return {?}
     */
    set placement(placement) {
        this.popup.config.placement = placement;
    }
    /**
     * @param {?} transition
     * @return {?}
     */
    set transition(transition) {
        this.popup.config.transition = transition;
    }
    /**
     * @param {?} duration
     * @return {?}
     */
    set transitionDuration(duration) {
        this.popup.config.transitionDuration = duration;
    }
    /**
     * @return {?}
     */
    get selectedDate() {
        return this._selectedDate;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    set selectedDate(date) {
        this._selectedDate = date;
        this.onSelectedDateChange.emit(date);
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    set mode(mode) {
        this._mode = mode || DatepickerMode.Datetime;
        switch (this._mode) {
            case DatepickerMode.Year:
                this.config = new YearConfig();
                break;
            case DatepickerMode.Month:
                this.config = new MonthConfig();
                break;
            case DatepickerMode.Date:
            default:
                this.config = new DateConfig();
                break;
            case DatepickerMode.Datetime:
                this.config = new DatetimeConfig();
                break;
            case DatepickerMode.Time:
                this.config = new TimeConfig();
                break;
        }
        this.writeValue(this.selectedDate);
    }
    /**
     * @return {?}
     */
    get localeValues() {
        return this.localizationService.override(this._localeValues, this.localeOverrides);
    }
    /**
     * @return {?}
     */
    popupOnOpen() {
        if (this.componentInstance) {
            this.componentInstance.service.config = this.config;
            this.componentInstance.service.localeValues = this.localeValues;
            this.componentInstance.service.currentDate = this.initialDate || new Date();
            this.componentInstance.service.selectedDate = this.selectedDate;
            this.componentInstance.service.maxDate = this.maxDate;
            this.componentInstance.service.minDate = this.minDate;
            if (this.firstDayOfWeek != undefined) {
                this.componentInstance.service.firstDayOfWeek = this.firstDayOfWeek;
            }
            this.componentInstance.service.reset();
            this.componentInstance.service.onDateChange.subscribe((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.selectedDate = d;
                this.close();
            }));
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ maxDate, minDate, mode }) {
        if (maxDate || minDate || mode) {
            this.onValidatorChange.emit();
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        /** @type {?} */
        const value = c.value;
        if (value != undefined) {
            // We post process the min & max date because sometimes this puts the date outside of the allowed range.
            if (this.minDate && value < this.minDate) {
                return { fuiMinDate: { required: this.minDate, actual: value } };
            }
            if (this.maxDate && value > this.maxDate) {
                return { fuiMaxDate: { required: this.maxDate, actual: value } };
            }
        }
        // Angular expects null
        // tslint:disable-next-line:no-null-keyword
        return null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.selectedDate = value;
        if (this.componentInstance) {
            this.componentInstance.service.selectedDate = value;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (e.keyCode === KeyCode.Escape) {
            this.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    onLocaleUpdate() {
        this._localeValues = this.localizationService.get().datepicker;
    }
}
FuiDatepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fuiDatepicker]',
                providers: [customValidatorFactory(FuiDatepickerDirective)]
            },] }
];
/** @nocollapse */
FuiDatepickerDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: FuiComponentFactory },
    { type: FuiLocalizationService }
];
FuiDatepickerDirective.propDecorators = {
    initialDate: [{ type: Input, args: ['pickerInitialDate',] }],
    maxDate: [{ type: Input, args: ['pickerMaxDate',] }],
    minDate: [{ type: Input, args: ['pickerMinDate',] }],
    firstDayOfWeek: [{ type: Input, args: ['pickerFirstDayOfWeek',] }],
    localeOverrides: [{ type: Input, args: ['pickerLocaleOverrides',] }],
    onSelectedDateChange: [{ type: Output, args: ['pickerSelectedDateChange',] }],
    onValidatorChange: [{ type: Output, args: ['pickerValidatorChange',] }],
    placement: [{ type: Input, args: ['pickerPlacement',] }],
    transition: [{ type: Input, args: ['pickerTransition',] }],
    transitionDuration: [{ type: Input, args: ['pickerTransitionDuration',] }],
    mode: [{ type: Input, args: ['pickerMode',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiDatepickerDirective.prototype.config;
    /** @type {?} */
    FuiDatepickerDirective.prototype.initialDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.maxDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.minDate;
    /** @type {?} */
    FuiDatepickerDirective.prototype.firstDayOfWeek;
    /** @type {?} */
    FuiDatepickerDirective.prototype.localeOverrides;
    /** @type {?} */
    FuiDatepickerDirective.prototype.onSelectedDateChange;
    /** @type {?} */
    FuiDatepickerDirective.prototype.onValidatorChange;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._selectedDate;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._mode;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerDirective.prototype._localeValues;
    /** @type {?} */
    FuiDatepickerDirective.prototype.localizationService;
}
export class FuiDatepickerDirectiveValueAccessor extends CustomValueAccessor {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
        this.host = host;
    }
}
FuiDatepickerDirectiveValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: '[fuiDatepicker]',
                host: { '(pickerSelectedDateChange)': 'onChange($event)' },
                providers: [customValueAccessorFactory(FuiDatepickerDirectiveValueAccessor)]
            },] }
];
/** @nocollapse */
FuiDatepickerDirectiveValueAccessor.ctorParameters = () => [
    { type: FuiDatepickerDirective }
];
if (false) {
    /** @type {?} */
    FuiDatepickerDirectiveValueAccessor.prototype.host;
}
export class FuiDatepickerDirectiveValidator extends CustomValidator {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
        this.host = host;
    }
}
FuiDatepickerDirectiveValidator.decorators = [
    { type: Directive, args: [{
                selector: '[fuiDatepicker]',
                host: { '(pickerValidatorChange)': 'onValidatorChange()' },
                providers: [customValidatorFactory(FuiDatepickerDirectiveValidator)]
            },] }
];
/** @nocollapse */
FuiDatepickerDirectiveValidator.ctorParameters = () => [
    { type: FuiDatepickerDirective }
];
if (false) {
    /** @type {?} */
    FuiDatepickerDirectiveValidator.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,