/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, HostBinding, HostListener, Input, Renderer2 } from '@angular/core';
import { DateUtil } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { PopupTrigger } from '../../popup/internal';
import { FuiDatepickerDirective, FuiDatepickerDirectiveValueAccessor } from './datepicker.directive';
import { DateParser, InternalDateParser } from '../classes/date-parser';
export class FuiDatepickerInputDirective {
    /**
     * @param {?} datepicker
     * @param {?} valueAccessor
     * @param {?} _renderer
     * @param {?} _element
     * @param {?} localizationService
     */
    constructor(datepicker, valueAccessor, _renderer, _element, localizationService) {
        this.datepicker = datepicker;
        this.valueAccessor = valueAccessor;
        this._renderer = _renderer;
        this._element = _element;
        this.useNativeOnMobile = true;
        this.fallbackActive = false;
        // Whenever the datepicker value updates, update the input text alongside it.
        this.datepicker.onSelectedDateChange.subscribe((/**
         * @return {?}
         */
        () => this.updateValue(this.selectedDateString)));
        localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        () => this.updateValue(this.selectedDateString)));
    }
    /**
     * @return {?}
     */
    get parser() {
        if (this.fallbackActive) {
            return new InternalDateParser(this.datepicker.mode, this.datepicker.localeValues);
        }
        return new DateParser(this.datepicker.localeValues.formats[this.datepicker.mode], this.datepicker.localeValues);
    }
    /**
     * @return {?}
     */
    get selectedDateString() {
        if (this.datepicker.selectedDate) {
            return this.parser.format(this.datepicker.selectedDate);
        }
    }
    /**
     * @return {?}
     */
    get type() {
        if (this.fallbackActive) {
            return this.datepicker.config.fallback;
        }
        return 'text';
    }
    /**
     * @return {?}
     */
    get max() {
        if (this.fallbackActive && this.datepicker.maxDate) {
            // Since HTML doesn't use a date object max is somewhat tricky.
            // Our Datepicker will always choose the 1st date on the provided precision,
            // meaning anything below the maxDate will work, hence endOf.
            /** @type {?} */
            const max = DateUtil.endOf(this.datepicker.config.precision, DateUtil.clone(this.datepicker.maxDate));
            return this.parser.format(max);
        }
    }
    /**
     * @return {?}
     */
    get min() {
        if (this.fallbackActive && this.datepicker.minDate) {
            // Since HTML doesn't use a date object min is somewhat tricky.
            // We use 1 minute before the next date at the configured precision since
            // our Datepicker picks the first available date at that precision.
            /** @type {?} */
            const min = DateUtil.clone(this.datepicker.minDate);
            return this.parser.format(min);
        }
    }
    /**
     * @return {?}
     */
    get useNativeOnMobile() {
        return this._useNativeOnMobile;
    }
    /**
     * @param {?} fallback
     * @return {?}
     */
    set useNativeOnMobile(fallback) {
        this._useNativeOnMobile = fallback;
        /** @type {?} */
        const isOnMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(navigator.userAgent);
        this.fallbackActive = this.useNativeOnMobile && isOnMobile;
    }
    /**
     * @return {?}
     */
    get fallbackActive() {
        return this._fallbackActive;
    }
    /**
     * @param {?} active
     * @return {?}
     */
    set fallbackActive(active) {
        this._fallbackActive = active;
        // If the fallback is active, then the trigger must be manual so the datepicker never opens.
        this.datepicker.popup.config.trigger = this.fallbackActive ? PopupTrigger.Manual : PopupTrigger.Focus;
        // Update the input value (this will insert the `T` as required).
        this.updateValue(this.selectedDateString);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    typeValue(value) {
        this._lastUpdateTyped = true;
        this._currentInputValue = value;
        if (!value) {
            // Delete the selected date if no date was entered manually.
            return this.datepicker.writeValue(undefined);
        }
        /** @type {?} */
        const parsed = this.parser.parse(value, this.datepicker.selectedDate);
        if (!isNaN(parsed.getTime()) && value === this.parser.format(parsed)) {
            return this.datepicker.writeValue(parsed);
        }
        return this.datepicker.writeValue(undefined);
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.valueAccessor.onTouched();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        // Only update the current value if it is different to what it's being updated to.
        // This is so that the editing position isn't changed when manually typing the date.
        if (!this._lastUpdateTyped) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value || '');
        }
        this._lastUpdateTyped = false;
    }
}
FuiDatepickerInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[fuiDatepicker]'
            },] }
];
/** @nocollapse */
FuiDatepickerInputDirective.ctorParameters = () => [
    { type: FuiDatepickerDirective, decorators: [{ type: Host }] },
    { type: FuiDatepickerDirectiveValueAccessor, decorators: [{ type: Host }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: FuiLocalizationService }
];
FuiDatepickerInputDirective.propDecorators = {
    type: [{ type: HostBinding, args: ['attr.type',] }],
    max: [{ type: HostBinding, args: ['attr.max',] }],
    min: [{ type: HostBinding, args: ['attr.min',] }],
    useNativeOnMobile: [{ type: Input, args: ['pickerUseNativeOnMobile',] }],
    typeValue: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._currentInputValue;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._lastUpdateTyped;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._useNativeOnMobile;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._fallbackActive;
    /** @type {?} */
    FuiDatepickerInputDirective.prototype.datepicker;
    /** @type {?} */
    FuiDatepickerInputDirective.prototype.valueAccessor;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiDatepickerInputDirective.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,