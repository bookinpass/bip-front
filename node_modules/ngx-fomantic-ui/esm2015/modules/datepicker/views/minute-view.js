/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision, DateUtil, Util } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarMode } from '../services/calendar.service';
import { CalendarRangeService } from '../services/calendar-range.service';
import { DateParser } from '../classes/date-parser';
export class CalendarRangeMinuteService extends CalendarRangeService {
    /**
     * @param {?} start
     * @return {?}
     */
    calcStart(start) {
        return DateUtil.startOf(DatePrecision.Hour, DateUtil.clone(start), true);
    }
    /**
     * @param {?} start
     * @return {?}
     */
    calcDates(start) {
        return Util.Array
            .range(this.length)
            .map((/**
         * @param {?} i
         * @return {?}
         */
        i => DateUtil.add(DatePrecision.Minute, DateUtil.clone(start), i * 5)));
    }
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    configureItem(item, baseDate) {
        item.humanReadable = new DateParser(this.service.localeValues.formats.time, this.service.localeValues).format(item.date);
        item.isOutsideRange = false;
    }
}
export class FuiCalendarMinuteView extends CalendarView {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer, CalendarViewType.Minute, new CalendarRangeMinuteService(DatePrecision.Hour, 4, 3));
    }
    /**
     * @return {?}
     */
    get date() {
        if (this.service.config.mode !== CalendarMode.TimeOnly) {
            // Set minutes and seconds to 0
            /** @type {?} */
            const dateTimeFormat = this.service.localeValues.formats.datetime.replace(/[ms]/g, '0');
            return new DateParser(dateTimeFormat, this.service.localeValues).format(this.currentDate);
        }
        else {
            // Set minutes and seconds to 0
            /** @type {?} */
            const timeFormat = this.service.localeValues.formats.time.replace(/[ms]/g, '0');
            return new DateParser(timeFormat, this.service.localeValues).format(this.currentDate);
        }
    }
}
FuiCalendarMinuteView.decorators = [
    { type: Component, args: [{
                selector: 'fui-calendar-minute-view',
                template: `
<table class="ui celled center aligned unstackable table three column minute">
<thead>
    <tr>
        <th colspan="4">
            <fui-calendar-view-title [ranges]="ranges" (zoomOut)="zoomOut()">
                {{ date }}
            </fui-calendar-view-title>
        </th>
    </tr>
</thead>
<tbody>
    <tr *ngFor="let group of ranges.current.groupedItems">
        <td class="link"
            *ngFor="let item of group"
            [calendarItem]="item"
            (click)="setDate(item)">{{ item.humanReadable }}
        </td>
    </tr>
</tbody>
</table>
`
            }] }
];
/** @nocollapse */
FuiCalendarMinuteView.ctorParameters = () => [
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludXRlLXZpZXcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZm9tYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2RhdGVwaWNrZXIvdmlld3MvbWludXRlLXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFFLE9BQU8sRUFBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRWxELE1BQU0sT0FBTywwQkFBMkIsU0FBUSxvQkFBb0I7Ozs7O0lBQzNELFNBQVMsQ0FBQyxLQUFXO1FBQzFCLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Ozs7SUFFTSxTQUFTLENBQUMsS0FBVztRQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDbEIsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUM7SUFDaEYsQ0FBQzs7Ozs7O0lBRU0sYUFBYSxDQUFDLElBQWtCLEVBQUUsUUFBYztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pILElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQTJCRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsWUFBWTs7OztJQUNyRCxZQUFZLFFBQW1CO1FBQzdCLEtBQUssQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksMEJBQTBCLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRyxDQUFDOzs7O0lBRUQsSUFBVyxJQUFJO1FBQ2IsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLFFBQVEsRUFBRTs7O2tCQUVoRCxjQUFjLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztZQUMvRixPQUFPLElBQUksVUFBVSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0Y7YUFBTTs7O2tCQUVDLFVBQVUsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO1lBQ3ZGLE9BQU8sSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN2RjtJQUNILENBQUM7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQlg7YUFDQTs7OztZQWpEa0IsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RhdGVQcmVjaXNpb24sIERhdGVVdGlsLCBVdGlsfSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge0NhbGVuZGFyVmlldywgQ2FsZW5kYXJWaWV3VHlwZX0gZnJvbSAnLi9jYWxlbmRhci12aWV3JztcclxuaW1wb3J0IHtDYWxlbmRhckl0ZW19IGZyb20gJy4uL2RpcmVjdGl2ZXMvY2FsZW5kYXItaXRlbSc7XHJcbmltcG9ydCB7Q2FsZW5kYXJNb2RlfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWxlbmRhci5zZXJ2aWNlJztcclxuaW1wb3J0IHtDYWxlbmRhclJhbmdlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY2FsZW5kYXItcmFuZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7RGF0ZVBhcnNlcn0gZnJvbSAnLi4vY2xhc3Nlcy9kYXRlLXBhcnNlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJSYW5nZU1pbnV0ZVNlcnZpY2UgZXh0ZW5kcyBDYWxlbmRhclJhbmdlU2VydmljZSB7XHJcbiAgcHVibGljIGNhbGNTdGFydChzdGFydDogRGF0ZSk6IERhdGUge1xyXG4gICAgcmV0dXJuIERhdGVVdGlsLnN0YXJ0T2YoRGF0ZVByZWNpc2lvbi5Ib3VyLCBEYXRlVXRpbC5jbG9uZShzdGFydCksIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbGNEYXRlcyhzdGFydDogRGF0ZSk6IERhdGVbXSB7XHJcbiAgICByZXR1cm4gVXRpbC5BcnJheVxyXG4gICAgICAucmFuZ2UodGhpcy5sZW5ndGgpXHJcbiAgICAgIC5tYXAoaSA9PiBEYXRlVXRpbC5hZGQoRGF0ZVByZWNpc2lvbi5NaW51dGUsIERhdGVVdGlsLmNsb25lKHN0YXJ0KSwgaSAqIDUpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjb25maWd1cmVJdGVtKGl0ZW06IENhbGVuZGFySXRlbSwgYmFzZURhdGU6IERhdGUpOiB2b2lkIHtcclxuICAgIGl0ZW0uaHVtYW5SZWFkYWJsZSA9IG5ldyBEYXRlUGFyc2VyKHRoaXMuc2VydmljZS5sb2NhbGVWYWx1ZXMuZm9ybWF0cy50aW1lLCB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzKS5mb3JtYXQoaXRlbS5kYXRlKTtcclxuICAgIGl0ZW0uaXNPdXRzaWRlUmFuZ2UgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWNhbGVuZGFyLW1pbnV0ZS12aWV3JyxcclxuICB0ZW1wbGF0ZTogYFxyXG48dGFibGUgY2xhc3M9XCJ1aSBjZWxsZWQgY2VudGVyIGFsaWduZWQgdW5zdGFja2FibGUgdGFibGUgdGhyZWUgY29sdW1uIG1pbnV0ZVwiPlxyXG48dGhlYWQ+XHJcbiAgICA8dHI+XHJcbiAgICAgICAgPHRoIGNvbHNwYW49XCI0XCI+XHJcbiAgICAgICAgICAgIDxmdWktY2FsZW5kYXItdmlldy10aXRsZSBbcmFuZ2VzXT1cInJhbmdlc1wiICh6b29tT3V0KT1cInpvb21PdXQoKVwiPlxyXG4gICAgICAgICAgICAgICAge3sgZGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2Z1aS1jYWxlbmRhci12aWV3LXRpdGxlPlxyXG4gICAgICAgIDwvdGg+XHJcbiAgICA8L3RyPlxyXG48L3RoZWFkPlxyXG48dGJvZHk+XHJcbiAgICA8dHIgKm5nRm9yPVwibGV0IGdyb3VwIG9mIHJhbmdlcy5jdXJyZW50Lmdyb3VwZWRJdGVtc1wiPlxyXG4gICAgICAgIDx0ZCBjbGFzcz1cImxpbmtcIlxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBncm91cFwiXHJcbiAgICAgICAgICAgIFtjYWxlbmRhckl0ZW1dPVwiaXRlbVwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZXREYXRlKGl0ZW0pXCI+e3sgaXRlbS5odW1hblJlYWRhYmxlIH19XHJcbiAgICAgICAgPC90ZD5cclxuICAgIDwvdHI+XHJcbjwvdGJvZHk+XHJcbjwvdGFibGU+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aUNhbGVuZGFyTWludXRlVmlldyBleHRlbmRzIENhbGVuZGFyVmlldyB7XHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgc3VwZXIocmVuZGVyZXIsIENhbGVuZGFyVmlld1R5cGUuTWludXRlLCBuZXcgQ2FsZW5kYXJSYW5nZU1pbnV0ZVNlcnZpY2UoRGF0ZVByZWNpc2lvbi5Ib3VyLCA0LCAzKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRhdGUoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLnNlcnZpY2UuY29uZmlnLm1vZGUgIT09IENhbGVuZGFyTW9kZS5UaW1lT25seSkge1xyXG4gICAgICAvLyBTZXQgbWludXRlcyBhbmQgc2Vjb25kcyB0byAwXHJcbiAgICAgIGNvbnN0IGRhdGVUaW1lRm9ybWF0OiBzdHJpbmcgPSB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzLmZvcm1hdHMuZGF0ZXRpbWUucmVwbGFjZSgvW21zXS9nLCAnMCcpO1xyXG4gICAgICByZXR1cm4gbmV3IERhdGVQYXJzZXIoZGF0ZVRpbWVGb3JtYXQsIHRoaXMuc2VydmljZS5sb2NhbGVWYWx1ZXMpLmZvcm1hdCh0aGlzLmN1cnJlbnREYXRlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFNldCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIDBcclxuICAgICAgY29uc3QgdGltZUZvcm1hdDogc3RyaW5nID0gdGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy5mb3JtYXRzLnRpbWUucmVwbGFjZSgvW21zXS9nLCAnMCcpO1xyXG4gICAgICByZXR1cm4gbmV3IERhdGVQYXJzZXIodGltZUZvcm1hdCwgdGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcykuZm9ybWF0KHRoaXMuY3VycmVudERhdGUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=