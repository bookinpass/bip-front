/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, QueryList, ViewChildren } from '@angular/core';
import { KeyCode } from '../../../misc/util/internal';
import { FuiCalendarItem } from '../directives/calendar-item';
import { CalendarService } from '../services/calendar.service';
/** @enum {number} */
const CalendarViewType = {
    Year: 0,
    Month: 1,
    Date: 2,
    Hour: 3,
    Minute: 4,
};
export { CalendarViewType };
CalendarViewType[CalendarViewType.Year] = 'Year';
CalendarViewType[CalendarViewType.Month] = 'Month';
CalendarViewType[CalendarViewType.Date] = 'Date';
CalendarViewType[CalendarViewType.Hour] = 'Hour';
CalendarViewType[CalendarViewType.Minute] = 'Minute';
/**
 * @abstract
 */
export class CalendarView {
    /**
     * @param {?} renderer
     * @param {?} viewType
     * @param {?} ranges
     */
    constructor(renderer, viewType, ranges) {
        this._type = viewType;
        this.ranges = ranges;
        this._documentKeyDownListener = renderer.listen('document', 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.onDocumentKeyDown(e)));
    }
    /**
     * @return {?}
     */
    get currentDate() {
        return this.service.currentDate;
    }
    /**
     * @return {?}
     */
    get selectedDate() {
        return this.service.selectedDate;
    }
    /**
     * @return {?}
     */
    get service() {
        return this._service;
    }
    /**
     * @param {?} service
     * @return {?}
     */
    set service(service) {
        this._service = service;
        this.ranges.loadService(service);
        this.service.onManualUpdate = (/**
         * @return {?}
         */
        () => {
            this.ranges.refresh();
            delete this._highlightedItem;
            this.autoHighlight();
        });
    }
    // Template Methods
    /**
     * @param {?} item
     * @return {?}
     */
    setDate(item) {
        this.service.changeDate(item.date, this._type);
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.service.zoomOut(this._type);
    }
    // Keyboard Control
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._renderedItems.changes.subscribe((/**
         * @return {?}
         */
        () => this.onRenderedItemsChanged()));
        this.onRenderedItemsChanged();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._documentKeyDownListener();
    }
    /**
     * @private
     * @return {?}
     */
    onRenderedItemsChanged() {
        this._renderedItems.forEach((/**
         * @param {?} i
         * @return {?}
         */
        i => i.onFocussed.subscribe((/**
         * @param {?} hasFocus
         * @return {?}
         */
        (hasFocus) => {
            if (hasFocus) {
                this.highlightItem(i.item);
            }
        }))));
        this.autoHighlight();
        this.highlightItem(this._highlightedItem);
    }
    /**
     * @private
     * @return {?}
     */
    autoHighlight() {
        /** @type {?} */
        let date = this.selectedDate && this.ranges.current.containsDate(this.selectedDate) ? this.selectedDate : this.currentDate;
        if (this._highlightedItem && this.ranges.current.containsDate(this._highlightedItem.date)) {
            date = this._highlightedItem.date;
        }
        /** @type {?} */
        const initiallyHighlighted = this.ranges.current.items.find((/**
         * @param {?} i
         * @return {?}
         */
        i => this.ranges.dateComparer.equal(i.date, date)));
        if (initiallyHighlighted && !initiallyHighlighted.isDisabled) {
            this._highlightedItem = initiallyHighlighted;
        }
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    highlightItem(item) {
        if (item) {
            this._renderedItems.forEach((/**
             * @param {?} i
             * @return {?}
             */
            i => i.hasFocus = false));
            /** @type {?} */
            const rendered = this._renderedItems.find((/**
             * @param {?} ri
             * @return {?}
             */
            ri => ri.item === item));
            if (rendered && !rendered.hasFocus) {
                rendered.hasFocus = true;
                rendered.changeDetector.detectChanges();
            }
            this._highlightedItem = item;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    onDocumentKeyDown(e) {
        if (this._highlightedItem && e.keyCode === KeyCode.Enter) {
            this.setDate(this._highlightedItem);
            return;
        }
        if (!this._highlightedItem) {
            this.autoHighlight();
        }
        /** @type {?} */
        const index = this.ranges.current.findIndex(this._highlightedItem);
        /** @type {?} */
        let isMovingForward = true;
        /** @type {?} */
        let delta = 0;
        switch (e.keyCode) {
            case KeyCode.Right:
                delta += 1;
                break;
            case KeyCode.Left:
                delta -= 1;
                isMovingForward = false;
                break;
            case KeyCode.Down:
                delta += this.ranges.columns;
                break;
            case KeyCode.Up:
                delta -= this.ranges.columns;
                isMovingForward = false;
                break;
            default:
                return;
        }
        // Stop these keypresses being captured elsewhere.
        e.preventDefault();
        /** @type {?} */
        let nextItem = this.ranges.current.items[index + delta];
        if (nextItem && nextItem.isDisabled) {
            return;
        }
        if (nextItem && !nextItem.isOutsideRange) {
            return this.highlightItem(nextItem);
        }
        if (nextItem && nextItem.isOutsideRange) {
            if (index + delta >= this.ranges.current.inRange.length) {
                isMovingForward = true;
            }
        }
        if (!nextItem) {
            /** @type {?} */
            let adjustedIndex = this.ranges.current.findIndex(this._highlightedItem);
            /** @type {?} */
            const nextItems = this.ranges.calc(isMovingForward).inRange;
            if (isMovingForward) {
                adjustedIndex -= this.ranges.current.inRange.length;
            }
            else {
                adjustedIndex += nextItems.length;
            }
            nextItem = nextItems[adjustedIndex + delta];
            if (nextItem.isDisabled) {
                return;
            }
        }
        this.ranges.move(isMovingForward);
        this._highlightedItem = this.ranges.current.find(nextItem);
    }
}
CalendarView.propDecorators = {
    _renderedItems: [{ type: ViewChildren, args: [FuiCalendarItem,] }],
    service: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CalendarView.prototype.ranges;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._type;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._renderedItems;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._highlightedItem;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._documentKeyDownListener;
    /**
     * @type {?}
     * @private
     */
    CalendarView.prototype._service;
}
//# sourceMappingURL=data:application/json;base64,