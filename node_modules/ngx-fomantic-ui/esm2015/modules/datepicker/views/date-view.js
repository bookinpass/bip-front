/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision, DateUtil } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
import { DateParser } from '../classes/date-parser';
export class CalendarRangeDateService extends CalendarRangeService {
    /**
     * @param {?} start
     * @return {?}
     */
    calcStart(start) {
        /** @type {?} */
        const monthStart = DateUtil.startOf(DatePrecision.Month, DateUtil.clone(start));
        monthStart.setDate((1 - monthStart.getDay() + this.service.firstDayOfWeek - 7) % 7);
        return monthStart;
    }
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    configureItem(item, baseDate) {
        item.humanReadable = item.date.getDate().toString();
        item.isOutsideRange = item.date.getMonth() !== baseDate.getMonth();
        item.isSelectable = item.isDisabled;
    }
}
export class FuiCalendarDateView extends CalendarView {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer, CalendarViewType.Date, new CalendarRangeDateService(DatePrecision.Month, 6, 7));
    }
    /**
     * @return {?}
     */
    get days() {
        /** @type {?} */
        const days = this.service.localeValues.weekdaysNarrow;
        return days.map((/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => days[(i + this.service.firstDayOfWeek) % days.length]));
    }
    /**
     * @return {?}
     */
    get date() {
        return new DateParser(this.service.localeValues.formats.month, this.service.localeValues).format(this.currentDate);
    }
}
FuiCalendarDateView.decorators = [
    { type: Component, args: [{
                selector: 'fui-calendar-date-view',
                template: `
<table class="ui celled center aligned unstackable table seven column day">
<thead>
    <tr>
        <th colspan="7">
            <fui-calendar-view-title [ranges]="ranges" (zoomOut)="zoomOut()">
                {{ date }}
            </fui-calendar-view-title>
        </th>
    </tr>
    <tr>
        <th *ngFor="let day of days">{{ day }}</th>
    </tr>
</thead>
<tbody>
    <tr *ngFor="let group of ranges.current.groupedItems">
        <td class="link"
            *ngFor="let item of group"
            [calendarItem]="item"
            (click)="setDate(item)">{{ item.humanReadable }}
        </td>
    </tr>
</tbody>
</table>
`
            }] }
];
/** @nocollapse */
FuiCalendarDateView.ctorParameters = () => [
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL3ZpZXdzL2RhdGUtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUVwRSxPQUFPLEVBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDL0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRWxELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxvQkFBb0I7Ozs7O0lBQ3pELFNBQVMsQ0FBQyxLQUFXOztjQUNwQixVQUFVLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0UsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBRU0sYUFBYSxDQUFDLElBQWtCLEVBQUUsUUFBYztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBOEJELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxZQUFZOzs7O0lBQ25ELFlBQVksUUFBbUI7UUFDN0IsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7O2NBQ1AsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWM7UUFDckQsT0FBTyxJQUFJLENBQUMsR0FBRzs7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDO0lBQ25GLENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JILENBQUM7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F3Qlg7YUFDQTs7OztZQWhEa0IsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RhdGVQcmVjaXNpb24sIERhdGVVdGlsfSBmcm9tICcuLi8uLi8uLi9taXNjL3V0aWwvaW50ZXJuYWwnO1xyXG5pbXBvcnQge0NhbGVuZGFySXRlbX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9jYWxlbmRhci1pdGVtJztcclxuaW1wb3J0IHtDYWxlbmRhclZpZXcsIENhbGVuZGFyVmlld1R5cGV9IGZyb20gJy4vY2FsZW5kYXItdmlldyc7XHJcbmltcG9ydCB7Q2FsZW5kYXJSYW5nZVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2NhbGVuZGFyLXJhbmdlLnNlcnZpY2UnO1xyXG5pbXBvcnQge0RhdGVQYXJzZXJ9IGZyb20gJy4uL2NsYXNzZXMvZGF0ZS1wYXJzZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyUmFuZ2VEYXRlU2VydmljZSBleHRlbmRzIENhbGVuZGFyUmFuZ2VTZXJ2aWNlIHtcclxuICBwdWJsaWMgY2FsY1N0YXJ0KHN0YXJ0OiBEYXRlKTogRGF0ZSB7XHJcbiAgICBjb25zdCBtb250aFN0YXJ0ID0gRGF0ZVV0aWwuc3RhcnRPZihEYXRlUHJlY2lzaW9uLk1vbnRoLCBEYXRlVXRpbC5jbG9uZShzdGFydCkpO1xyXG4gICAgbW9udGhTdGFydC5zZXREYXRlKCgxIC0gbW9udGhTdGFydC5nZXREYXkoKSArIHRoaXMuc2VydmljZS5maXJzdERheU9mV2VlayAtIDcpICUgNyk7XHJcbiAgICByZXR1cm4gbW9udGhTdGFydDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjb25maWd1cmVJdGVtKGl0ZW06IENhbGVuZGFySXRlbSwgYmFzZURhdGU6IERhdGUpOiB2b2lkIHtcclxuICAgIGl0ZW0uaHVtYW5SZWFkYWJsZSA9IGl0ZW0uZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKTtcclxuICAgIGl0ZW0uaXNPdXRzaWRlUmFuZ2UgPSBpdGVtLmRhdGUuZ2V0TW9udGgoKSAhPT0gYmFzZURhdGUuZ2V0TW9udGgoKTtcclxuICAgIGl0ZW0uaXNTZWxlY3RhYmxlID0gaXRlbS5pc0Rpc2FibGVkO1xyXG4gIH1cclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktY2FsZW5kYXItZGF0ZS12aWV3JyxcclxuICB0ZW1wbGF0ZTogYFxyXG48dGFibGUgY2xhc3M9XCJ1aSBjZWxsZWQgY2VudGVyIGFsaWduZWQgdW5zdGFja2FibGUgdGFibGUgc2V2ZW4gY29sdW1uIGRheVwiPlxyXG48dGhlYWQ+XHJcbiAgICA8dHI+XHJcbiAgICAgICAgPHRoIGNvbHNwYW49XCI3XCI+XHJcbiAgICAgICAgICAgIDxmdWktY2FsZW5kYXItdmlldy10aXRsZSBbcmFuZ2VzXT1cInJhbmdlc1wiICh6b29tT3V0KT1cInpvb21PdXQoKVwiPlxyXG4gICAgICAgICAgICAgICAge3sgZGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2Z1aS1jYWxlbmRhci12aWV3LXRpdGxlPlxyXG4gICAgICAgIDwvdGg+XHJcbiAgICA8L3RyPlxyXG4gICAgPHRyPlxyXG4gICAgICAgIDx0aCAqbmdGb3I9XCJsZXQgZGF5IG9mIGRheXNcIj57eyBkYXkgfX08L3RoPlxyXG4gICAgPC90cj5cclxuPC90aGVhZD5cclxuPHRib2R5PlxyXG4gICAgPHRyICpuZ0Zvcj1cImxldCBncm91cCBvZiByYW5nZXMuY3VycmVudC5ncm91cGVkSXRlbXNcIj5cclxuICAgICAgICA8dGQgY2xhc3M9XCJsaW5rXCJcclxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZ3JvdXBcIlxyXG4gICAgICAgICAgICBbY2FsZW5kYXJJdGVtXT1cIml0ZW1cIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwic2V0RGF0ZShpdGVtKVwiPnt7IGl0ZW0uaHVtYW5SZWFkYWJsZSB9fVxyXG4gICAgICAgIDwvdGQ+XHJcbiAgICA8L3RyPlxyXG48L3Rib2R5PlxyXG48L3RhYmxlPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlDYWxlbmRhckRhdGVWaWV3IGV4dGVuZHMgQ2FsZW5kYXJWaWV3IHtcclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlciwgQ2FsZW5kYXJWaWV3VHlwZS5EYXRlLCBuZXcgQ2FsZW5kYXJSYW5nZURhdGVTZXJ2aWNlKERhdGVQcmVjaXNpb24uTW9udGgsIDYsIDcpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGF5cygpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBkYXlzID0gdGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy53ZWVrZGF5c05hcnJvdztcclxuICAgIHJldHVybiBkYXlzLm1hcCgoZCwgaSkgPT4gZGF5c1soaSArIHRoaXMuc2VydmljZS5maXJzdERheU9mV2VlaykgJSBkYXlzLmxlbmd0aF0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkYXRlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gbmV3IERhdGVQYXJzZXIodGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy5mb3JtYXRzLm1vbnRoLCB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzKS5mb3JtYXQodGhpcy5jdXJyZW50RGF0ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==