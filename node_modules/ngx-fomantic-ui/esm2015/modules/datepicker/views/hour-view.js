/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
import { DateParser } from '../classes/date-parser';
export class CalendarRangeHourService extends CalendarRangeService {
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    configureItem(item, baseDate) {
        // Set minutes and seconds to 0
        /** @type {?} */
        const customFormat = this.service.localeValues.formats.time.replace(/[ms]/g, '0');
        item.humanReadable = new DateParser(customFormat, this.service.localeValues).format(item.date);
        item.isOutsideRange = false;
    }
}
export class FuiCalendarHourView extends CalendarView {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer, CalendarViewType.Hour, new CalendarRangeHourService(DatePrecision.Date, 6, 4));
    }
    /**
     * @return {?}
     */
    get date() {
        return new DateParser(this.service.localeValues.formats.date, this.service.localeValues).format(this.currentDate);
    }
}
FuiCalendarHourView.decorators = [
    { type: Component, args: [{
                selector: 'fui-calendar-hour-view',
                template: `
<table class="ui celled center aligned unstackable table four column hour">
<thead *ngIf="service.config.mode != 1">
    <tr>
        <th colspan="4">
            <fui-calendar-view-title [ranges]="ranges" (zoomOut)="zoomOut()">
                {{ date }}
            </fui-calendar-view-title>
        </th>
    </tr>
</thead>
<tbody>
    <tr *ngFor="let group of ranges.current.groupedItems">
        <td class="link"
            *ngFor="let item of group"
            [calendarItem]="item"
            (click)="setDate(item)">{{ item.humanReadable }}
        </td>
    </tr>
</tbody>
</table>
`
            }] }
];
/** @nocollapse */
FuiCalendarHourView.ctorParameters = () => [
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG91ci12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL3ZpZXdzL2hvdXItdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFbEQsTUFBTSxPQUFPLHdCQUF5QixTQUFRLG9CQUFvQjs7Ozs7O0lBQ3pELGFBQWEsQ0FBQyxJQUFrQixFQUFFLFFBQWM7OztjQUUvQyxZQUFZLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztRQUN6RixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksVUFBVSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBMkJELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxZQUFZOzs7O0lBRW5ELFlBQVksUUFBbUI7UUFDN0IsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BILENBQUM7OztZQWpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQlg7YUFDQTs7OztZQXhDa0IsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RhdGVQcmVjaXNpb259IGZyb20gJy4uLy4uLy4uL21pc2MvdXRpbC9pbnRlcm5hbCc7XHJcbmltcG9ydCB7Q2FsZW5kYXJWaWV3LCBDYWxlbmRhclZpZXdUeXBlfSBmcm9tICcuL2NhbGVuZGFyLXZpZXcnO1xyXG5pbXBvcnQge0NhbGVuZGFySXRlbX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9jYWxlbmRhci1pdGVtJztcclxuaW1wb3J0IHtDYWxlbmRhclJhbmdlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY2FsZW5kYXItcmFuZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7RGF0ZVBhcnNlcn0gZnJvbSAnLi4vY2xhc3Nlcy9kYXRlLXBhcnNlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJSYW5nZUhvdXJTZXJ2aWNlIGV4dGVuZHMgQ2FsZW5kYXJSYW5nZVNlcnZpY2Uge1xyXG4gIHB1YmxpYyBjb25maWd1cmVJdGVtKGl0ZW06IENhbGVuZGFySXRlbSwgYmFzZURhdGU6IERhdGUpOiB2b2lkIHtcclxuICAgIC8vIFNldCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIDBcclxuICAgIGNvbnN0IGN1c3RvbUZvcm1hdDogc3RyaW5nID0gdGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy5mb3JtYXRzLnRpbWUucmVwbGFjZSgvW21zXS9nLCAnMCcpO1xyXG4gICAgaXRlbS5odW1hblJlYWRhYmxlID0gbmV3IERhdGVQYXJzZXIoY3VzdG9tRm9ybWF0LCB0aGlzLnNlcnZpY2UubG9jYWxlVmFsdWVzKS5mb3JtYXQoaXRlbS5kYXRlKTtcclxuICAgIGl0ZW0uaXNPdXRzaWRlUmFuZ2UgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWNhbGVuZGFyLWhvdXItdmlldycsXHJcbiAgdGVtcGxhdGU6IGBcclxuPHRhYmxlIGNsYXNzPVwidWkgY2VsbGVkIGNlbnRlciBhbGlnbmVkIHVuc3RhY2thYmxlIHRhYmxlIGZvdXIgY29sdW1uIGhvdXJcIj5cclxuPHRoZWFkICpuZ0lmPVwic2VydmljZS5jb25maWcubW9kZSAhPSAxXCI+XHJcbiAgICA8dHI+XHJcbiAgICAgICAgPHRoIGNvbHNwYW49XCI0XCI+XHJcbiAgICAgICAgICAgIDxmdWktY2FsZW5kYXItdmlldy10aXRsZSBbcmFuZ2VzXT1cInJhbmdlc1wiICh6b29tT3V0KT1cInpvb21PdXQoKVwiPlxyXG4gICAgICAgICAgICAgICAge3sgZGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2Z1aS1jYWxlbmRhci12aWV3LXRpdGxlPlxyXG4gICAgICAgIDwvdGg+XHJcbiAgICA8L3RyPlxyXG48L3RoZWFkPlxyXG48dGJvZHk+XHJcbiAgICA8dHIgKm5nRm9yPVwibGV0IGdyb3VwIG9mIHJhbmdlcy5jdXJyZW50Lmdyb3VwZWRJdGVtc1wiPlxyXG4gICAgICAgIDx0ZCBjbGFzcz1cImxpbmtcIlxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBncm91cFwiXHJcbiAgICAgICAgICAgIFtjYWxlbmRhckl0ZW1dPVwiaXRlbVwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZXREYXRlKGl0ZW0pXCI+e3sgaXRlbS5odW1hblJlYWRhYmxlIH19XHJcbiAgICAgICAgPC90ZD5cclxuICAgIDwvdHI+XHJcbjwvdGJvZHk+XHJcbjwvdGFibGU+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aUNhbGVuZGFySG91clZpZXcgZXh0ZW5kcyBDYWxlbmRhclZpZXcge1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlciwgQ2FsZW5kYXJWaWV3VHlwZS5Ib3VyLCBuZXcgQ2FsZW5kYXJSYW5nZUhvdXJTZXJ2aWNlKERhdGVQcmVjaXNpb24uRGF0ZSwgNiwgNCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkYXRlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gbmV3IERhdGVQYXJzZXIodGhpcy5zZXJ2aWNlLmxvY2FsZVZhbHVlcy5mb3JtYXRzLmRhdGUsIHRoaXMuc2VydmljZS5sb2NhbGVWYWx1ZXMpLmZvcm1hdCh0aGlzLmN1cnJlbnREYXRlKTtcclxuICB9XHJcbn1cclxuIl19