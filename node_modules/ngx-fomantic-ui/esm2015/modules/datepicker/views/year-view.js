/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2 } from '@angular/core';
import { DatePrecision, DateUtil, Util } from '../../../misc/util/internal';
import { CalendarView, CalendarViewType } from './calendar-view';
import { CalendarRangeService } from '../services/calendar-range.service';
export class CalendarRangeYearService extends CalendarRangeService {
    /**
     * @param {?} item
     * @param {?} baseDate
     * @return {?}
     */
    configureItem(item, baseDate) {
        item.humanReadable = Util.String.padLeft(item.date.getFullYear().toString(), 4, '0');
        item.isOutsideRange = item.date.getFullYear() >= this.calcStart(baseDate).getFullYear() + 10;
    }
}
export class FuiCalendarYearView extends CalendarView {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer, CalendarViewType.Year, new CalendarRangeYearService(DatePrecision.Decade, 4, 3));
    }
    /**
     * @return {?}
     */
    get decadeStart() {
        return DateUtil
            .startOf(DatePrecision.Decade, DateUtil.clone(this.service.currentDate))
            .getFullYear();
    }
    /**
     * @param {?} year
     * @return {?}
     */
    pad(year) {
        return Util.String.padLeft(year.toString(), 4, '0');
    }
}
FuiCalendarYearView.decorators = [
    { type: Component, args: [{
                selector: 'fui-calendar-year-view',
                template: `
<table class="ui celled center aligned unstackable table three column year">
<thead>
    <tr>
        <th colspan="3">
            <fui-calendar-view-title [ranges]="ranges" (zoomOut)="zoomOut()">
                {{ pad(decadeStart) }} - {{ pad(decadeStart + 10) }}
            </fui-calendar-view-title>
        </th>
    </tr>
</thead>
<tbody>
    <tr *ngFor="let group of ranges.current.groupedItems">
        <td class="link"
            *ngFor="let item of group"
            [calendarItem]="item"
            (click)="setDate(item)">{{ item.humanReadable }}
        </td>
    </tr>
</tbody>
</table>
`
            }] }
];
/** @nocollapse */
FuiCalendarYearView.ctorParameters = () => [
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhci12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9kYXRlcGlja2VyL3ZpZXdzL3llYXItdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDMUUsT0FBTyxFQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRS9ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBRXhFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxvQkFBb0I7Ozs7OztJQUN6RCxhQUFhLENBQUMsSUFBa0IsRUFBRSxRQUFjO1FBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQy9GLENBQUM7Q0FDRjtBQTJCRCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsWUFBWTs7OztJQUNuRCxZQUFZLFFBQW1CO1FBQzdCLEtBQUssQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksd0JBQXdCLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDOzs7O0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sUUFBUTthQUNaLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN2RSxXQUFXLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVNLEdBQUcsQ0FBQyxJQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7WUF0Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJYO2FBQ0E7Ozs7WUFyQ2tCLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtEYXRlUHJlY2lzaW9uLCBEYXRlVXRpbCwgVXRpbH0gZnJvbSAnLi4vLi4vLi4vbWlzYy91dGlsL2ludGVybmFsJztcclxuaW1wb3J0IHtDYWxlbmRhclZpZXcsIENhbGVuZGFyVmlld1R5cGV9IGZyb20gJy4vY2FsZW5kYXItdmlldyc7XHJcbmltcG9ydCB7Q2FsZW5kYXJJdGVtfSBmcm9tICcuLi9kaXJlY3RpdmVzL2NhbGVuZGFyLWl0ZW0nO1xyXG5pbXBvcnQge0NhbGVuZGFyUmFuZ2VTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWxlbmRhci1yYW5nZS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclJhbmdlWWVhclNlcnZpY2UgZXh0ZW5kcyBDYWxlbmRhclJhbmdlU2VydmljZSB7XHJcbiAgcHVibGljIGNvbmZpZ3VyZUl0ZW0oaXRlbTogQ2FsZW5kYXJJdGVtLCBiYXNlRGF0ZTogRGF0ZSk6IHZvaWQge1xyXG4gICAgaXRlbS5odW1hblJlYWRhYmxlID0gVXRpbC5TdHJpbmcucGFkTGVmdChpdGVtLmRhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpLCA0LCAnMCcpO1xyXG4gICAgaXRlbS5pc091dHNpZGVSYW5nZSA9IGl0ZW0uZGF0ZS5nZXRGdWxsWWVhcigpID49IHRoaXMuY2FsY1N0YXJ0KGJhc2VEYXRlKS5nZXRGdWxsWWVhcigpICsgMTA7XHJcbiAgfVxyXG59XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1jYWxlbmRhci15ZWFyLXZpZXcnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbjx0YWJsZSBjbGFzcz1cInVpIGNlbGxlZCBjZW50ZXIgYWxpZ25lZCB1bnN0YWNrYWJsZSB0YWJsZSB0aHJlZSBjb2x1bW4geWVhclwiPlxyXG48dGhlYWQ+XHJcbiAgICA8dHI+XHJcbiAgICAgICAgPHRoIGNvbHNwYW49XCIzXCI+XHJcbiAgICAgICAgICAgIDxmdWktY2FsZW5kYXItdmlldy10aXRsZSBbcmFuZ2VzXT1cInJhbmdlc1wiICh6b29tT3V0KT1cInpvb21PdXQoKVwiPlxyXG4gICAgICAgICAgICAgICAge3sgcGFkKGRlY2FkZVN0YXJ0KSB9fSAtIHt7IHBhZChkZWNhZGVTdGFydCArIDEwKSB9fVxyXG4gICAgICAgICAgICA8L2Z1aS1jYWxlbmRhci12aWV3LXRpdGxlPlxyXG4gICAgICAgIDwvdGg+XHJcbiAgICA8L3RyPlxyXG48L3RoZWFkPlxyXG48dGJvZHk+XHJcbiAgICA8dHIgKm5nRm9yPVwibGV0IGdyb3VwIG9mIHJhbmdlcy5jdXJyZW50Lmdyb3VwZWRJdGVtc1wiPlxyXG4gICAgICAgIDx0ZCBjbGFzcz1cImxpbmtcIlxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBncm91cFwiXHJcbiAgICAgICAgICAgIFtjYWxlbmRhckl0ZW1dPVwiaXRlbVwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJzZXREYXRlKGl0ZW0pXCI+e3sgaXRlbS5odW1hblJlYWRhYmxlIH19XHJcbiAgICAgICAgPC90ZD5cclxuICAgIDwvdHI+XHJcbjwvdGJvZHk+XHJcbjwvdGFibGU+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIEZ1aUNhbGVuZGFyWWVhclZpZXcgZXh0ZW5kcyBDYWxlbmRhclZpZXcge1xyXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyLCBDYWxlbmRhclZpZXdUeXBlLlllYXIsIG5ldyBDYWxlbmRhclJhbmdlWWVhclNlcnZpY2UoRGF0ZVByZWNpc2lvbi5EZWNhZGUsIDQsIDMpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZGVjYWRlU3RhcnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBEYXRlVXRpbFxyXG4gICAgICAuc3RhcnRPZihEYXRlUHJlY2lzaW9uLkRlY2FkZSwgRGF0ZVV0aWwuY2xvbmUodGhpcy5zZXJ2aWNlLmN1cnJlbnREYXRlKSlcclxuICAgICAgLmdldEZ1bGxZZWFyKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGFkKHllYXI6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gVXRpbC5TdHJpbmcucGFkTGVmdCh5ZWFyLnRvU3RyaW5nKCksIDQsICcwJyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==