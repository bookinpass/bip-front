/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, HostListener } from '@angular/core';
import { CalendarService } from './../services/calendar.service';
import { DatetimeConfig } from '../classes/calendar-config';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
/** @type {?} */
export const DatepickerMode = {
    Year: (/** @type {?} */ ('year')),
    Month: (/** @type {?} */ ('month')),
    Date: (/** @type {?} */ ('date')),
    Datetime: (/** @type {?} */ ('datetime')),
    Time: (/** @type {?} */ ('time'))
};
export class FuiDatepicker {
    /**
     * @param {?} localizationService
     */
    constructor(localizationService) {
        this.service = new CalendarService(new DatetimeConfig(), localizationService.get().datepicker);
        this.hasClasses = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseDown(e) {
        e.preventDefault();
    }
}
FuiDatepicker.decorators = [
    { type: Component, args: [{
                selector: 'fui-datepicker',
                template: `
<ng-container [ngSwitch]="service.currentView">
    <fui-calendar-year-view [service]="service" *ngSwitchCase="0"></fui-calendar-year-view>
    <fui-calendar-month-view [service]="service" *ngSwitchCase="1"></fui-calendar-month-view>
    <fui-calendar-date-view [service]="service" *ngSwitchCase="2"></fui-calendar-date-view>
    <fui-calendar-hour-view [service]="service" *ngSwitchCase="3"></fui-calendar-hour-view>
    <fui-calendar-minute-view [service]="service" *ngSwitchCase="4"></fui-calendar-minute-view>
</ng-container>
`,
                styles: [`
:host {
    user-select: none;
}
`]
            }] }
];
/** @nocollapse */
FuiDatepicker.ctorParameters = () => [
    { type: FuiLocalizationService }
];
FuiDatepicker.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['class.calendar',] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiDatepicker.prototype.hasClasses;
    /** @type {?} */
    FuiDatepicker.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZGF0ZXBpY2tlci9jb21wb25lbnRzL2RhdGVwaWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDBDQUEwQyxDQUFDOztBQUloRixNQUFNLE9BQU8sY0FBYyxHQUFHO0lBQzVCLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0lBQzlCLEtBQUssRUFBRSxtQkFBQSxPQUFPLEVBQWtCO0lBQ2hDLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0lBQzlCLFFBQVEsRUFBRSxtQkFBQSxVQUFVLEVBQWtCO0lBQ3RDLElBQUksRUFBRSxtQkFBQSxNQUFNLEVBQWtCO0NBQy9CO0FBbUJELE1BQU0sT0FBTyxhQUFhOzs7O0lBUXhCLFlBQVksbUJBQTJDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxjQUFjLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7OztJQUdNLFdBQVcsQ0FBQyxDQUFhO1FBQzlCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7WUFsQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRTs7Ozs7Ozs7Q0FRWDt5QkFDVTs7OztDQUlWO2FBQ0E7Ozs7WUE1Qk8sc0JBQXNCOzs7eUJBOEIzQixXQUFXLFNBQUMsVUFBVSxjQUN0QixXQUFXLFNBQUMsY0FBYyxjQUMxQixXQUFXLFNBQUMsZ0JBQWdCOzBCQVc1QixZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBYnJDLG1DQUdvQzs7SUFFcEMsZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NhbGVuZGFyU2VydmljZX0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9jYWxlbmRhci5zZXJ2aWNlJztcclxuaW1wb3J0IHtEYXRldGltZUNvbmZpZ30gZnJvbSAnLi4vY2xhc3Nlcy9jYWxlbmRhci1jb25maWcnO1xyXG5pbXBvcnQge0Z1aUxvY2FsaXphdGlvblNlcnZpY2V9IGZyb20gJy4uLy4uLy4uL2JlaGF2aW9ycy9sb2NhbGl6YXRpb24vaW50ZXJuYWwnO1xyXG5cclxuZXhwb3J0IHR5cGUgRGF0ZXBpY2tlck1vZGUgPSAneWVhcicgfCAnbW9udGgnIHwgJ2RhdGUnIHwgJ2RhdGV0aW1lJyB8ICd0aW1lJztcclxuXHJcbmV4cG9ydCBjb25zdCBEYXRlcGlja2VyTW9kZSA9IHtcclxuICBZZWFyOiAneWVhcicgYXMgRGF0ZXBpY2tlck1vZGUsXHJcbiAgTW9udGg6ICdtb250aCcgYXMgRGF0ZXBpY2tlck1vZGUsXHJcbiAgRGF0ZTogJ2RhdGUnIGFzIERhdGVwaWNrZXJNb2RlLFxyXG4gIERhdGV0aW1lOiAnZGF0ZXRpbWUnIGFzIERhdGVwaWNrZXJNb2RlLFxyXG4gIFRpbWU6ICd0aW1lJyBhcyBEYXRlcGlja2VyTW9kZVxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmdWktZGF0ZXBpY2tlcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuPG5nLWNvbnRhaW5lciBbbmdTd2l0Y2hdPVwic2VydmljZS5jdXJyZW50Vmlld1wiPlxyXG4gICAgPGZ1aS1jYWxlbmRhci15ZWFyLXZpZXcgW3NlcnZpY2VdPVwic2VydmljZVwiICpuZ1N3aXRjaENhc2U9XCIwXCI+PC9mdWktY2FsZW5kYXIteWVhci12aWV3PlxyXG4gICAgPGZ1aS1jYWxlbmRhci1tb250aC12aWV3IFtzZXJ2aWNlXT1cInNlcnZpY2VcIiAqbmdTd2l0Y2hDYXNlPVwiMVwiPjwvZnVpLWNhbGVuZGFyLW1vbnRoLXZpZXc+XHJcbiAgICA8ZnVpLWNhbGVuZGFyLWRhdGUtdmlldyBbc2VydmljZV09XCJzZXJ2aWNlXCIgKm5nU3dpdGNoQ2FzZT1cIjJcIj48L2Z1aS1jYWxlbmRhci1kYXRlLXZpZXc+XHJcbiAgICA8ZnVpLWNhbGVuZGFyLWhvdXItdmlldyBbc2VydmljZV09XCJzZXJ2aWNlXCIgKm5nU3dpdGNoQ2FzZT1cIjNcIj48L2Z1aS1jYWxlbmRhci1ob3VyLXZpZXc+XHJcbiAgICA8ZnVpLWNhbGVuZGFyLW1pbnV0ZS12aWV3IFtzZXJ2aWNlXT1cInNlcnZpY2VcIiAqbmdTd2l0Y2hDYXNlPVwiNFwiPjwvZnVpLWNhbGVuZGFyLW1pbnV0ZS12aWV3PlxyXG48L25nLWNvbnRhaW5lcj5cclxuYCxcclxuICBzdHlsZXM6IFtgXHJcbjpob3N0IHtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcbmBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlEYXRlcGlja2VyIHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnVpJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYWxlbmRhcicpXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0NsYXNzZXM6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBzZXJ2aWNlOiBDYWxlbmRhclNlcnZpY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvblNlcnZpY2U6IEZ1aUxvY2FsaXphdGlvblNlcnZpY2UpIHtcclxuICAgIHRoaXMuc2VydmljZSA9IG5ldyBDYWxlbmRhclNlcnZpY2UobmV3IERhdGV0aW1lQ29uZmlnKCksIGxvY2FsaXphdGlvblNlcnZpY2UuZ2V0KCkuZGF0ZXBpY2tlcik7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uTW91c2VEb3duKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcbn1cclxuIl19