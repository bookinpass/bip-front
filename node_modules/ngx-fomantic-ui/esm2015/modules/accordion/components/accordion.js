/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, HostBinding, Input, QueryList } from '@angular/core';
import { FuiAccordionPanel } from './accordion-panel';
import { FuiAccordionService } from '../services/accordion.service';
export class FuiAccordion {
    constructor() {
        // Accordion service is unique to each set of panels.
        this._service = new FuiAccordionService();
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get closeOthers() {
        return this._service.closeOthers;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set closeOthers(value) {
        this._service.closeOthers = value;
    }
    /**
     * @param {?} transition
     * @return {?}
     */
    set transition(transition) {
        this._service.transition = transition;
    }
    /**
     * @param {?} duration
     * @return {?}
     */
    set transitionDuration(duration) {
        this._service.transitionDuration = duration;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updatePanels();
        // Reconnect panels after they have updated.
        this._panels.changes.subscribe((/**
         * @return {?}
         */
        () => this.updatePanels()));
    }
    /**
     * @return {?}
     */
    updatePanels() {
        this._panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => this._service.addPanel(p)));
    }
}
FuiAccordion.decorators = [
    { type: Component, args: [{
                selector: 'fui-accordion',
                template: `
<ng-content></ng-content>
`,
                styles: [`
/* Fix for general styling issues */
:host {
    display: block;
}

/* Fix for styled border issue */
:host.styled fui-accordion-panel:first-child .title {
    border-top: none
}
`]
            }] }
];
/** @nocollapse */
FuiAccordion.ctorParameters = () => [];
FuiAccordion.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.accordion',] }],
    _panels: [{ type: ContentChildren, args: [FuiAccordionPanel,] }],
    closeOthers: [{ type: Input }],
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FuiAccordion.prototype.hasClasses;
    /**
     * @type {?}
     * @protected
     */
    FuiAccordion.prototype._service;
    /**
     * @type {?}
     * @protected
     */
    FuiAccordion.prototype._panels;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9hY2NvcmRpb24vY29tcG9uZW50cy9hY2NvcmRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBbUIsU0FBUyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQW1CbEUsTUFBTSxPQUFPLFlBQVk7SUFRdkI7UUFDRSxxREFBcUQ7UUFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7UUFFMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELElBQ1csV0FBVztRQUNwQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRUQsSUFBVyxXQUFXLENBQUMsS0FBYztRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQzs7Ozs7SUFFRCxJQUNXLFVBQVUsQ0FBQyxVQUFrQjtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCxJQUNXLGtCQUFrQixDQUFDLFFBQWdCO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsUUFBUSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFTSxrQkFBa0I7UUFDdkIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUMsQ0FBQztJQUM1RCxDQUFDOzs7O0lBRU0sWUFBWTtRQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBNURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOztDQUVYO3lCQUNVOzs7Ozs7Ozs7O0NBVVY7YUFDQTs7Ozs7eUJBRUUsV0FBVyxTQUFDLFVBQVUsY0FDdEIsV0FBVyxTQUFDLGlCQUFpQjtzQkFHN0IsZUFBZSxTQUFDLGlCQUFpQjswQkFVakMsS0FBSzt5QkFTTCxLQUFLO2lDQUtMLEtBQUs7Ozs7SUE1Qk4sa0NBRW9DOzs7OztJQUNwQyxnQ0FBd0M7Ozs7O0lBQ3hDLCtCQUNnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIEhvc3RCaW5kaW5nLCBJbnB1dCwgUXVlcnlMaXN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGdWlBY2NvcmRpb25QYW5lbH0gZnJvbSAnLi9hY2NvcmRpb24tcGFuZWwnO1xyXG5pbXBvcnQge0Z1aUFjY29yZGlvblNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2FjY29yZGlvbi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZnVpLWFjY29yZGlvbicsXHJcbiAgdGVtcGxhdGU6IGBcclxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG5gLFxyXG4gIHN0eWxlczogW2BcclxuLyogRml4IGZvciBnZW5lcmFsIHN0eWxpbmcgaXNzdWVzICovXHJcbjpob3N0IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4vKiBGaXggZm9yIHN0eWxlZCBib3JkZXIgaXNzdWUgKi9cclxuOmhvc3Quc3R5bGVkIGZ1aS1hY2NvcmRpb24tcGFuZWw6Zmlyc3QtY2hpbGQgLnRpdGxlIHtcclxuICAgIGJvcmRlci10b3A6IG5vbmVcclxufVxyXG5gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnVpQWNjb3JkaW9uIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy51aScpXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY2NvcmRpb24nKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG4gIHByb3RlY3RlZCBfc2VydmljZTogRnVpQWNjb3JkaW9uU2VydmljZTtcclxuICBAQ29udGVudENoaWxkcmVuKEZ1aUFjY29yZGlvblBhbmVsKVxyXG4gIHByb3RlY3RlZCBfcGFuZWxzOiBRdWVyeUxpc3Q8RnVpQWNjb3JkaW9uUGFuZWw+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIEFjY29yZGlvbiBzZXJ2aWNlIGlzIHVuaXF1ZSB0byBlYWNoIHNldCBvZiBwYW5lbHMuXHJcbiAgICB0aGlzLl9zZXJ2aWNlID0gbmV3IEZ1aUFjY29yZGlvblNlcnZpY2UoKTtcclxuXHJcbiAgICB0aGlzLmhhc0NsYXNzZXMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IGNsb3NlT3RoZXJzKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NlcnZpY2UuY2xvc2VPdGhlcnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGNsb3NlT3RoZXJzKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9zZXJ2aWNlLmNsb3NlT3RoZXJzID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzZXQgdHJhbnNpdGlvbih0cmFuc2l0aW9uOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3NlcnZpY2UudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzZXQgdHJhbnNpdGlvbkR1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX3NlcnZpY2UudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGRhdGVQYW5lbHMoKTtcclxuXHJcbiAgICAvLyBSZWNvbm5lY3QgcGFuZWxzIGFmdGVyIHRoZXkgaGF2ZSB1cGRhdGVkLlxyXG4gICAgdGhpcy5fcGFuZWxzLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHRoaXMudXBkYXRlUGFuZWxzKCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZVBhbmVscygpOiB2b2lkIHtcclxuICAgIHRoaXMuX3BhbmVscy5mb3JFYWNoKHAgPT4gdGhpcy5fc2VydmljZS5hZGRQYW5lbChwKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==