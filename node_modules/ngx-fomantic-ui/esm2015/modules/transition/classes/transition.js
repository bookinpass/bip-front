/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const TransitionDirection = {
    In: 0,
    Out: 1,
    Either: 2,
    Static: 3,
};
export { TransitionDirection };
TransitionDirection[TransitionDirection.In] = 'In';
TransitionDirection[TransitionDirection.Out] = 'Out';
TransitionDirection[TransitionDirection.Either] = 'Either';
TransitionDirection[TransitionDirection.Static] = 'Static';
export class Transition {
    /**
     * @param {?} name
     * @param {?=} duration
     * @param {?=} direction
     * @param {?=} onComplete
     */
    constructor(name, duration = 250, direction = TransitionDirection.Either, onComplete = (/**
     * @return {?}
     */
    () => {
    })) {
        this.type = name;
        // We set a minimum duration of 1ms, to give the appearance of an immediate transition
        // whilst allowing positioning calculations to happen without a visible flicker.
        this.duration = Math.max(duration, 1);
        this.direction = direction;
        this.classes = this.type.split(' ');
        this.onComplete = onComplete;
    }
    // Converts TransitionDirection to class name.
    /**
     * @return {?}
     */
    get directionClass() {
        switch (this.direction) {
            case TransitionDirection.In:
                return 'in';
            case TransitionDirection.Out:
                return 'out';
        }
        return '';
    }
}
if (false) {
    /** @type {?} */
    Transition.prototype.type;
    /** @type {?} */
    Transition.prototype.duration;
    /** @type {?} */
    Transition.prototype.direction;
    /** @type {?} */
    Transition.prototype.classes;
    /** @type {?} */
    Transition.prototype.onComplete;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvdHJhbnNpdGlvbi9jbGFzc2VzL3RyYW5zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBRUUsS0FBRTtJQUNGLE1BQUc7SUFDSCxTQUFNO0lBQ04sU0FBTTs7Ozs7OztBQUdSLE1BQU0sT0FBTyxVQUFVOzs7Ozs7O0lBVXJCLFlBQVksSUFBWSxFQUNaLFdBQW1CLEdBQUcsRUFDdEIsWUFBaUMsbUJBQW1CLENBQUMsTUFBTSxFQUMzRDs7O0lBQTJCLEdBQUcsRUFBRTtJQUNoQyxDQUFDLENBQUE7UUFFWCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixzRkFBc0Y7UUFDdEYsZ0ZBQWdGO1FBQ2hGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUdELElBQVcsY0FBYztRQUN2QixRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdEIsS0FBSyxtQkFBbUIsQ0FBQyxFQUFFO2dCQUN6QixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssbUJBQW1CLENBQUMsR0FBRztnQkFDMUIsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FDRjs7O0lBckNDLDBCQUE2Qjs7SUFFN0IsOEJBQWlDOztJQUVqQywrQkFBc0M7O0lBRXRDLDZCQUFrQzs7SUFDbEMsZ0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUG9zc2libGUgZGlyZWN0aW9ucyBmb3IgYSB0cmFuc2l0aW9uLlxyXG5leHBvcnQgZW51bSBUcmFuc2l0aW9uRGlyZWN0aW9uIHtcclxuICBJbixcclxuICBPdXQsXHJcbiAgRWl0aGVyLFxyXG4gIFN0YXRpY1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbiB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGR1cmF0aW9uOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBkaXJlY3Rpb246IFRyYW5zaXRpb25EaXJlY3Rpb247XHJcbiAgLy8gU3RvcmVzIHRoZSBpbmRpdmlkdWFsIGNsYXNzZXMgZm9yIHRoZSB0cmFuc2l0aW9uLCBlLmcuIFwiZmFkZSBvdXRcIiAtPiBbXCJmYWRlXCIsIFwib3V0XCJdLlxyXG4gIHB1YmxpYyByZWFkb25seSBjbGFzc2VzOiBzdHJpbmdbXTtcclxuICBwdWJsaWMgb25Db21wbGV0ZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLFxyXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBudW1iZXIgPSAyNTAsXHJcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiBUcmFuc2l0aW9uRGlyZWN0aW9uID0gVHJhbnNpdGlvbkRpcmVjdGlvbi5FaXRoZXIsXHJcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCgpID0+IHZvaWQpID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgIH0pIHtcclxuXHJcbiAgICB0aGlzLnR5cGUgPSBuYW1lO1xyXG5cclxuICAgIC8vIFdlIHNldCBhIG1pbmltdW0gZHVyYXRpb24gb2YgMW1zLCB0byBnaXZlIHRoZSBhcHBlYXJhbmNlIG9mIGFuIGltbWVkaWF0ZSB0cmFuc2l0aW9uXHJcbiAgICAvLyB3aGlsc3QgYWxsb3dpbmcgcG9zaXRpb25pbmcgY2FsY3VsYXRpb25zIHRvIGhhcHBlbiB3aXRob3V0IGEgdmlzaWJsZSBmbGlja2VyLlxyXG4gICAgdGhpcy5kdXJhdGlvbiA9IE1hdGgubWF4KGR1cmF0aW9uLCAxKTtcclxuXHJcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgIHRoaXMuY2xhc3NlcyA9IHRoaXMudHlwZS5zcGxpdCgnICcpO1xyXG4gICAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnRzIFRyYW5zaXRpb25EaXJlY3Rpb24gdG8gY2xhc3MgbmFtZS5cclxuICBwdWJsaWMgZ2V0IGRpcmVjdGlvbkNsYXNzKCk6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgVHJhbnNpdGlvbkRpcmVjdGlvbi5JbjpcclxuICAgICAgICByZXR1cm4gJ2luJztcclxuICAgICAgY2FzZSBUcmFuc2l0aW9uRGlyZWN0aW9uLk91dDpcclxuICAgICAgICByZXR1cm4gJ291dCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxufVxyXG4iXX0=