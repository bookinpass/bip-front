/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { TransitionController } from '../classes/transition-controller';
export class FuiTransition {
    /**
     * @param {?} _renderer
     * @param {?} _element
     * @param {?} _changeDetector
     */
    constructor(_renderer, _element, _changeDetector) {
        this._renderer = _renderer;
        this._element = _element;
        this._changeDetector = _changeDetector;
        this.transitionClass = true;
    }
    /**
     * @param {?} tC
     * @return {?}
     */
    set fuiTransition(tC) {
        // Set the transition controller (e.g. '<div [fuiTransition]="transitionController"></div>').
        this.setTransitionController(tC);
    }
    /**
     * @return {?}
     */
    get isVisible() {
        if (this._controller) {
            return this._controller.isVisible;
        }
        return false;
    }
    /**
     * @return {?}
     */
    get isHidden() {
        if (this._controller) {
            return this._controller.isHidden;
        }
        return false;
    }
    // Initialises the controller with the injected renderer and elementRef.
    /**
     * @param {?} transitionController
     * @return {?}
     */
    setTransitionController(transitionController) {
        this._controller = transitionController;
        this._controller.registerRenderer(this._renderer);
        this._controller.registerElement(this._element.nativeElement);
        this._controller.registerChangeDetector(this._changeDetector);
    }
}
FuiTransition.decorators = [
    { type: Directive, args: [{
                selector: '[fuiTransition]',
                exportAs: 'transition'
            },] }
];
/** @nocollapse */
FuiTransition.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
FuiTransition.propDecorators = {
    transitionClass: [{ type: HostBinding, args: ['class.transition',] }],
    fuiTransition: [{ type: Input }],
    isVisible: [{ type: HostBinding, args: ['class.visible',] }],
    isHidden: [{ type: HostBinding, args: ['class.hidden',] }]
};
if (false) {
    /** @type {?} */
    FuiTransition.prototype.transitionClass;
    /**
     * @type {?}
     * @private
     */
    FuiTransition.prototype._controller;
    /**
     * @type {?}
     * @protected
     */
    FuiTransition.prototype._renderer;
    /**
     * @type {?}
     * @protected
     */
    FuiTransition.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiTransition.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvdHJhbnNpdGlvbi9kaXJlY3RpdmVzL3RyYW5zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBTXRFLE1BQU0sT0FBTyxhQUFhOzs7Ozs7SUFNeEIsWUFBc0IsU0FBb0IsRUFBWSxRQUFvQixFQUFVLGVBQWtDO1FBQWhHLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBSi9HLG9CQUFlLEdBQUcsSUFBSSxDQUFDO0lBSzlCLENBQUM7Ozs7O0lBRUQsSUFDVyxhQUFhLENBQUMsRUFBd0I7UUFDL0MsNkZBQTZGO1FBQzdGLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsSUFDVyxTQUFTO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7O0lBRUQsSUFDVyxRQUFRO1FBQ2pCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFHTSx1QkFBdUIsQ0FBQyxvQkFBMEM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztRQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7OztZQXpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFLFlBQVk7YUFDdkI7Ozs7WUFOcUUsU0FBUztZQUF6QyxVQUFVO1lBQXhDLGlCQUFpQjs7OzhCQVF0QixXQUFXLFNBQUMsa0JBQWtCOzRCQVE5QixLQUFLO3dCQU1MLFdBQVcsU0FBQyxlQUFlO3VCQVEzQixXQUFXLFNBQUMsY0FBYzs7OztJQXRCM0Isd0NBQzhCOzs7OztJQUU5QixvQ0FBMEM7Ozs7O0lBRTlCLGtDQUE4Qjs7Ozs7SUFBRSxpQ0FBOEI7Ozs7O0lBQUUsd0NBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VHJhbnNpdGlvbkNvbnRyb2xsZXJ9IGZyb20gJy4uL2NsYXNzZXMvdHJhbnNpdGlvbi1jb250cm9sbGVyJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2Z1aVRyYW5zaXRpb25dJyxcclxuICBleHBvcnRBczogJ3RyYW5zaXRpb24nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlUcmFuc2l0aW9uIHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRyYW5zaXRpb24nKVxyXG4gIHB1YmxpYyB0cmFuc2l0aW9uQ2xhc3MgPSB0cnVlO1xyXG4gIC8vIEVhY2ggdHJhbnNpdGlvbiBtdXN0IGhhdmUgYSBjb250cm9sbGVyIGFzc29jaWF0ZWQgdGhhdCBkaXNwYXRjaGVzIHRoZSB0cmFuc2l0aW9ucy5cclxuICBwcml2YXRlIF9jb250cm9sbGVyOiBUcmFuc2l0aW9uQ29udHJvbGxlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBwcm90ZWN0ZWQgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgX2NoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc2V0IGZ1aVRyYW5zaXRpb24odEM6IFRyYW5zaXRpb25Db250cm9sbGVyKSB7XHJcbiAgICAvLyBTZXQgdGhlIHRyYW5zaXRpb24gY29udHJvbGxlciAoZS5nLiAnPGRpdiBbZnVpVHJhbnNpdGlvbl09XCJ0cmFuc2l0aW9uQ29udHJvbGxlclwiPjwvZGl2PicpLlxyXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uQ29udHJvbGxlcih0Qyk7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnZpc2libGUnKVxyXG4gIHB1YmxpYyBnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuX2NvbnRyb2xsZXIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xsZXIuaXNWaXNpYmxlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oaWRkZW4nKVxyXG4gIHB1YmxpYyBnZXQgaXNIaWRkZW4oKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5fY29udHJvbGxlcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5fY29udHJvbGxlci5pc0hpZGRlbjtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIEluaXRpYWxpc2VzIHRoZSBjb250cm9sbGVyIHdpdGggdGhlIGluamVjdGVkIHJlbmRlcmVyIGFuZCBlbGVtZW50UmVmLlxyXG4gIHB1YmxpYyBzZXRUcmFuc2l0aW9uQ29udHJvbGxlcih0cmFuc2l0aW9uQ29udHJvbGxlcjogVHJhbnNpdGlvbkNvbnRyb2xsZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2NvbnRyb2xsZXIgPSB0cmFuc2l0aW9uQ29udHJvbGxlcjtcclxuICAgIHRoaXMuX2NvbnRyb2xsZXIucmVnaXN0ZXJSZW5kZXJlcih0aGlzLl9yZW5kZXJlcik7XHJcbiAgICB0aGlzLl9jb250cm9sbGVyLnJlZ2lzdGVyRWxlbWVudCh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgdGhpcy5fY29udHJvbGxlci5yZWdpc3RlckNoYW5nZURldGVjdG9yKHRoaXMuX2NoYW5nZURldGVjdG9yKTtcclxuICB9XHJcbn1cclxuIl19