/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostBinding, HostListener, Input, Renderer2 } from '@angular/core';
import { SidebarTransition } from '../services/sidebar.service';
export class FuiSidebarSibling {
    /**
     * @param {?} _renderer
     * @param {?} _element
     */
    constructor(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this.canCloseSidebar = true;
        this.isDimmedWhenVisible = false;
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get isVisible() {
        if (!this.service) {
            return false;
        }
        return this.service.isVisible;
    }
    /**
     * @return {?}
     */
    get isDimmed() {
        if (!this.service) {
            return false;
        }
        return this.service.isVisible && this.isDimmedWhenVisible;
    }
    /**
     * @return {?}
     */
    get service() {
        return this._service;
    }
    /**
     * @param {?} service
     * @return {?}
     */
    set service(service) {
        this._service = service;
        setTimeout((/**
         * @return {?}
         */
        () => this.updateTransform()));
        this._service.isVisibleChange.subscribe((/**
         * @return {?}
         */
        () => this.updateTransform()));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.canCloseSidebar && this.service.isVisible && !this.service.wasJustOpened) {
            this.service.setVisibleState(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateTransform() {
        this._renderer.removeStyle(this._element.nativeElement, 'transform');
        this._renderer.removeStyle(this._element.nativeElement, '-webkit-transform');
        if (this.service.isVisible &&
            this.service.transition !== SidebarTransition.Overlay &&
            this.service.transition !== SidebarTransition.ScaleDown) {
            /** @type {?} */
            const translate = `translate3d(${this.service.width}px, ${this.service.height}px, 0)`;
            this._renderer.setStyle(this._element.nativeElement, 'transform', translate);
            this._renderer.setStyle(this._element.nativeElement, '-webkit-transform', translate);
        }
    }
}
FuiSidebarSibling.decorators = [
    { type: Component, args: [{
                selector: 'fui-sidebar-sibling',
                template: `
                   <ng-content></ng-content>`,
                styles: [`
                   :host {
                       display: block;
                   }
               `]
            }] }
];
/** @nocollapse */
FuiSidebarSibling.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FuiSidebarSibling.propDecorators = {
    isDimmedWhenVisible: [{ type: Input }],
    hasClasses: [{ type: HostBinding, args: ['class.pusher',] }],
    canCloseSidebar: [{ type: Input }],
    isVisible: [{ type: HostBinding, args: ['class.visible',] }],
    isDimmed: [{ type: HostBinding, args: ['class.dimmed',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiSidebarSibling.prototype.isDimmedWhenVisible;
    /** @type {?} */
    FuiSidebarSibling.prototype.hasClasses;
    /** @type {?} */
    FuiSidebarSibling.prototype.canCloseSidebar;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._service;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiSidebarSibling.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1zaWJsaW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZvbWFudGljLXVpLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zaWRlYmFyL2NvbXBvbmVudHMvc2lkZWJhci1zaWJsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFpQixpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBWTlFLE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBUzVCLFlBQW9CLFNBQW9CLEVBQVUsUUFBb0I7UUFBbEQsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVk7UUFGL0Qsb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFHNUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztRQUVqQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsSUFDVyxTQUFTO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxJQUNXLFFBQVE7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQzVELENBQUM7Ozs7SUFJRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFBVyxPQUFPLENBQUMsT0FBdUI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFFeEIsVUFBVTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUM7SUFDeEUsQ0FBQzs7Ozs7SUFHTSxPQUFPLENBQUMsS0FBaUI7UUFDOUIsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDakYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7OztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUU3RSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUztZQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxpQkFBaUIsQ0FBQyxPQUFPO1lBQ3JELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLGlCQUFpQixDQUFDLFNBQVMsRUFBRTs7a0JBRW5ELFNBQVMsR0FBRyxlQUFlLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxRQUFRO1lBQ3JGLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM3RSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN0RjtJQUNILENBQUM7OztZQXpFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFOzZDQUNpQzt5QkFDbEM7Ozs7Z0JBSUs7YUFDZjs7OztZQVpnRSxTQUFTO1lBQXZELFVBQVU7OztrQ0FlMUIsS0FBSzt5QkFFTCxXQUFXLFNBQUMsY0FBYzs4QkFFMUIsS0FBSzt3QkFTTCxXQUFXLFNBQUMsZUFBZTt1QkFRM0IsV0FBVyxTQUFDLGNBQWM7c0JBcUIxQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBMUNqQyxnREFDb0M7O0lBQ3BDLHVDQUNvQzs7SUFDcEMsNENBQzhCOzs7OztJQXdCOUIscUNBQWlDOzs7OztJQXRCckIsc0NBQTRCOzs7OztJQUFFLHFDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtTaWRlYmFyU2VydmljZSwgU2lkZWJhclRyYW5zaXRpb259IGZyb20gJy4uL3NlcnZpY2VzL3NpZGViYXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Z1aS1zaWRlYmFyLXNpYmxpbmcnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcclxuICBzdHlsZXM6IFtgXHJcbiAgICAgICAgICAgICAgICAgICA6aG9zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlTaWRlYmFyU2libGluZyB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGlzRGltbWVkV2hlblZpc2libGU6IGJvb2xlYW47XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5wdXNoZXInKVxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNDbGFzc2VzOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGNhbkNsb3NlU2lkZWJhciA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMuaXNEaW1tZWRXaGVuVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuaGFzQ2xhc3NlcyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnZpc2libGUnKVxyXG4gIHB1YmxpYyBnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLnNlcnZpY2UpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5pc1Zpc2libGU7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpbW1lZCcpXHJcbiAgcHVibGljIGdldCBpc0RpbW1lZCgpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5zZXJ2aWNlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuaXNWaXNpYmxlICYmIHRoaXMuaXNEaW1tZWRXaGVuVmlzaWJsZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3NlcnZpY2U6IFNpZGViYXJTZXJ2aWNlO1xyXG5cclxuICBwdWJsaWMgZ2V0IHNlcnZpY2UoKTogU2lkZWJhclNlcnZpY2Uge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHNlcnZpY2Uoc2VydmljZTogU2lkZWJhclNlcnZpY2UpIHtcclxuICAgIHRoaXMuX3NlcnZpY2UgPSBzZXJ2aWNlO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVUcmFuc2Zvcm0oKSk7XHJcbiAgICB0aGlzLl9zZXJ2aWNlLmlzVmlzaWJsZUNoYW5nZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVUcmFuc2Zvcm0oKSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNhbkNsb3NlU2lkZWJhciAmJiB0aGlzLnNlcnZpY2UuaXNWaXNpYmxlICYmICF0aGlzLnNlcnZpY2Uud2FzSnVzdE9wZW5lZCkge1xyXG4gICAgICB0aGlzLnNlcnZpY2Uuc2V0VmlzaWJsZVN0YXRlKGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlVHJhbnNmb3JtKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJyk7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICctd2Via2l0LXRyYW5zZm9ybScpO1xyXG5cclxuICAgIGlmICh0aGlzLnNlcnZpY2UuaXNWaXNpYmxlICYmXHJcbiAgICAgIHRoaXMuc2VydmljZS50cmFuc2l0aW9uICE9PSBTaWRlYmFyVHJhbnNpdGlvbi5PdmVybGF5ICYmXHJcbiAgICAgIHRoaXMuc2VydmljZS50cmFuc2l0aW9uICE9PSBTaWRlYmFyVHJhbnNpdGlvbi5TY2FsZURvd24pIHtcclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IGB0cmFuc2xhdGUzZCgke3RoaXMuc2VydmljZS53aWR0aH1weCwgJHt0aGlzLnNlcnZpY2UuaGVpZ2h0fXB4LCAwKWA7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSk7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJy13ZWJraXQtdHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19