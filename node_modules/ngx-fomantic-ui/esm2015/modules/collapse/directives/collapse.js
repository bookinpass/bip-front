/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
export class FuiCollapse {
    /**
     * @param {?} _element
     * @param {?} _renderer
     */
    constructor(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this._pristine = true;
        // Collapse animation duration is 350ms by default.
        this.collapseDuration = 350;
        this._isExpanded = false;
        this._isCollapsing = false;
    }
    // Set when the collapse is closed, and not animating.
    /**
     * @return {?}
     */
    get isCollapsed() {
        return !this.isExpanded && !this.isCollapsing;
    }
    /**
     * @return {?}
     */
    get fuiCollapse() {
        return this._isExpanded;
    }
    // Sets the state of the collapse, `true` is collapsed.
    /**
     * @param {?} value
     * @return {?}
     */
    set fuiCollapse(value) {
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    // Set when the collapse is open, and not animating.
    /**
     * @return {?}
     */
    get isExpanded() {
        return this._isExpanded;
    }
    // Set when the collapse is animating.
    /**
     * @return {?}
     */
    get isCollapsing() {
        return this._isCollapsing;
    }
    /**
     * @private
     * @return {?}
     */
    get _animationDuration() {
        return this._pristine ? 0 : this.collapseDuration;
    }
    /**
     * @return {?}
     */
    hide() {
        this._isCollapsing = true;
        this._isExpanded = false;
        // Forcibly hide the overflow so that content is not visible past the boundaries of its container.
        this._renderer.setStyle(this._element.nativeElement, 'overflow', 'hidden');
        // Animate the host element from its scroll height to 0.
        this.animate(this._element.nativeElement.scrollHeight, 0, false, (/**
         * @return {?}
         */
        () => {
            this._isCollapsing = false;
        }));
    }
    /**
     * @return {?}
     */
    show() {
        this._isCollapsing = true;
        // Animate the host element from its offset height to its scroll height.
        this.animate(this._element.nativeElement.offsetHeight, this._element.nativeElement.scrollHeight, true, (/**
         * @return {?}
         */
        () => {
            // Remove the overflow override to enable user styling once again.
            this._renderer.removeStyle(this._element.nativeElement, 'overflow');
            this._isCollapsing = false;
            this._isExpanded = true;
        }));
    }
    /**
     * @private
     * @param {?} startHeight
     * @param {?} endHeight
     * @param {?=} removeOnComplete
     * @param {?=} callback
     * @return {?}
     */
    animate(startHeight, endHeight, removeOnComplete = false, callback = (/**
     * @return {?}
     */
    () => {
    })) {
        /** @type {?} */
        const heightFrames = [
            {
                offset: 0,
                height: `${startHeight}px`
            },
            {
                offset: 1,
                height: `${endHeight}px`
            }
        ];
        if (removeOnComplete) {
            heightFrames.push({
                offset: 1,
                height: `auto`
            });
        }
        // Animate the collapse using the web animations API.
        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
        this._element.nativeElement.animate(heightFrames, {
            delay: 0,
            // Disable animation on 1st collapse / expansion.
            duration: this._animationDuration,
            iterations: 1,
            easing: 'ease',
            fill: 'both'
        });
        if (this._pristine) {
            // Remove pristine flag when first hit.
            this._pristine = false;
        }
        setTimeout((/**
         * @return {?}
         */
        () => callback()), this.collapseDuration);
    }
}
FuiCollapse.decorators = [
    { type: Directive, args: [{
                selector: '[fuiCollapse]'
            },] }
];
/** @nocollapse */
FuiCollapse.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FuiCollapse.propDecorators = {
    collapseDuration: [{ type: Input }],
    isCollapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
    fuiCollapse: [{ type: Input }],
    isExpanded: [{ type: HostBinding, args: ['class.expanded',] }],
    isCollapsing: [{ type: HostBinding, args: ['class.collapsing',] }]
};
if (false) {
    /** @type {?} */
    FuiCollapse.prototype.collapseDuration;
    /**
     * @type {?}
     * @private
     */
    FuiCollapse.prototype._pristine;
    /**
     * @type {?}
     * @private
     */
    FuiCollapse.prototype._isExpanded;
    /**
     * @type {?}
     * @private
     */
    FuiCollapse.prototype._isCollapsing;
    /**
     * @type {?}
     * @private
     */
    FuiCollapse.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FuiCollapse.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,