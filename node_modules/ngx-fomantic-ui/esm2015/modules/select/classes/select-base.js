/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, ContentChildren, EventEmitter, HostBinding, HostListener, Input, Output, QueryList, TemplateRef, ViewChild } from '@angular/core';
import { DropdownService, FuiDropdownMenu } from '../../dropdown/internal';
import { SearchService } from '../../search/internal';
import { HandledEvent, KeyCode, Util } from '../../../misc/util/internal';
import { FuiSelectOption } from '../components/select-option';
import { FuiSelectSearch } from '../directives/select-search';
/**
 * @record
 * @template T
 */
export function IOptionContext() { }
if (false) {
    /** @type {?|undefined} */
    IOptionContext.prototype.query;
}
// We use generic type T to smenuTransitionDurationpecify the type of the options we are working with,
// and U to specify the type of the property of the option used as the value.
/**
 * @abstract
 * @template T, U
 */
export class FuiSelectBase {
    /**
     * @param {?} _element
     * @param {?} _localizationService
     */
    constructor(_element, _localizationService) {
        this._element = _element;
        this._localizationService = _localizationService;
        this.dropdownService = new DropdownService();
        // We do want an empty query to return all results.
        this.searchService = new SearchService(true);
        this.isSearchable = false;
        this.onLocaleUpdate();
        this._localizationService.onLanguageUpdate.subscribe((/**
         * @return {?}
         */
        () => this.onLocaleUpdate()));
        this._renderedSubscriptions = [];
        this.icon = 'dropdown';
        this.transition = 'slide down';
        this.transitionDuration = 200;
        this.onTouched = new EventEmitter();
        this.hasClasses = true;
    }
    /**
     * @return {?}
     */
    get isActive() {
        return this.dropdownService.isOpen;
    }
    /**
     * @return {?}
     */
    get isVisible() {
        return this._menu.isVisible;
    }
    /**
     * @return {?}
     */
    get hasSearchClass() {
        return this.isSearchable && !this.isSearchExternal;
    }
    /**
     * @return {?}
     */
    get isSearching() {
        return this.searchService.isSearching;
    }
    /**
     * @return {?}
     */
    get isClearing() {
        return this.isClearable;
    }
    /**
     * @return {?}
     */
    get searchInput() {
        return this._manualSearch || this._internalSearch;
    }
    /**
     * @return {?}
     */
    get tabindex() {
        if (this.isDisabled) {
            // If disabled, remove from tabindex.
            return -1;
        }
        if (this.dropdownService.isOpen && this.isSearchExternal) {
            // If open & in menu search, remove from tabindex (as input always autofocusses).
            return -1;
        }
        if (this._tabIndex != undefined) {
            // If custom tabindex, default to that.
            return this._tabIndex;
        }
        if (this.hasSearchClass) {
            // If search input enabled, tab goes to input.
            return -1;
        }
        // Otherwise, return default of 0.
        return 0;
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        return this.dropdownService.isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isDisabled(value) {
        this.dropdownService.isDisabled = !!value;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        if (options) {
            this.searchService.options = options;
            this.optionsUpdateHook();
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    set optionsFilter(filter) {
        if (filter) {
            this.searchService.optionsFilter = filter;
            this.optionsUpdateHook();
        }
    }
    /**
     * @param {?} lookup
     * @return {?}
     */
    set optionsLookup(lookup) {
        if (lookup) {
            this.searchService.optionsLookup = lookup;
            this.optionsUpdateHook();
        }
    }
    /**
     * @return {?}
     */
    get filteredOptions() {
        return this.searchService.results;
    }
    // Deprecated
    /**
     * @return {?}
     */
    get availableOptions() {
        return this.filteredOptions;
    }
    /**
     * @return {?}
     */
    get query() {
        return this.isSearchable ? this.searchService.query : undefined;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    set query(query) {
        if (query != undefined) {
            this.queryUpdateHook();
            this.updateQuery(query);
            // Update the rendered text as query has changed.
            this._renderedOptions.forEach((/**
             * @param {?} ro
             * @return {?}
             */
            ro => this.initialiseRenderedOption(ro)));
            if (this.searchInput) {
                this.searchInput.query = query;
            }
        }
    }
    /**
     * @return {?}
     */
    get labelField() {
        return this.searchService.optionsField;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    set labelField(field) {
        this.searchService.optionsField = field;
    }
    /**
     * @return {?}
     */
    get labelGetter() {
        // Helper function to retrieve the label from an item.
        return (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            /** @type {?} */
            const label = Util.Object.readValue(obj, this.labelField);
            if (label != undefined) {
                return label.toString();
            }
            return '';
        });
    }
    /**
     * @return {?}
     */
    get valueGetter() {
        // Helper function to retrieve the value from an item.
        return (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => Util.Object.readValue(obj, this.valueField));
    }
    /**
     * @return {?}
     */
    get configuredFormatter() {
        if (this._optionFormatter) {
            return (/**
             * @param {?} o
             * @return {?}
             */
            o => (/** @type {?} */ (this._optionFormatter))(o, this.isSearchable ? this.query : undefined));
        }
        else if (this.searchService.optionsLookup) {
            return (/**
             * @param {?} o
             * @return {?}
             */
            o => this.labelGetter(o));
        }
        else {
            return (/**
             * @param {?} o
             * @return {?}
             */
            o => this.searchService.highlightMatches(this.labelGetter(o), this.query || ''));
        }
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set optionFormatter(formatter) {
        this._optionFormatter = formatter;
    }
    /**
     * @return {?}
     */
    get localeValues() {
        return this._localizationService.override(this._localeValues, this.localeOverrides);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._menu.service = this.dropdownService;
        // We manually specify the menu items to the menu because the @ContentChildren doesn't pick up our dynamically rendered items.
        this._menu.items = this._renderedOptions;
        this._menu.parentElement = this._element;
        if (this._manualSearch) {
            this.isSearchable = true;
            this.isSearchExternal = true;
        }
        if (this.searchInput) {
            this.searchInput.onQueryUpdated.subscribe((/**
             * @param {?} q
             * @return {?}
             */
            (q) => this.query = q));
            this.searchInput.onQueryKeyDown.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => this.onQueryInputKeydown(e)));
        }
        // We must call this immediately as changes doesn't fire when you subscribe.
        this.onAvailableOptionsRendered();
        this._renderedOptions.changes.subscribe((/**
         * @return {?}
         */
        () => this.onAvailableOptionsRendered()));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onCaretClick(e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            if (!this.dropdownService.isAnimating) {
                this.dropdownService.setOpenState(!this.dropdownService.isOpen);
                this.focus();
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        if (!e.eventHandled && !this.dropdownService.isAnimating) {
            e.eventHandled = true;
            // If the dropdown is searchable, clicking should keep it open, otherwise we toggle the open state.
            this.dropdownService.setOpenState(this.isSearchable ? true : !this.dropdownService.isOpen);
            // Immediately focus the search input whenever clicking on the select.
            this.focus();
        }
    }
    /**
     * @return {?}
     */
    onFocusIn() {
        if (!this.dropdownService.isOpen && !this.dropdownService.isAnimating) {
            this.dropdownService.setOpenState(true);
            this.focus();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocusOut(e) {
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.dropdownService.setOpenState(false);
            this.onTouched.emit();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyPress(e) {
        if (e.keyCode === KeyCode.Enter) {
            // Enables support for focussing and opening with the keyboard alone.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this._element.nativeElement.click();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (!this.dropdownService.isOpen && e.keyCode === KeyCode.Down) {
            // Enables support for focussing and opening with the keyboard alone.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this._element.nativeElement.click();
            e.preventDefault();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onQueryInputKeydown(event) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._renderedSubscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    optionsUpdateHook() {
    }
    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.
    /**
     * @protected
     * @return {?}
     */
    queryUpdateHook() {
    }
    /**
     * @protected
     * @param {?} query
     * @return {?}
     */
    updateQuery(query) {
        // Update the query then open the dropdown, as after keyboard input it should always be open.
        this.searchService.updateQuery(query, (/**
         * @return {?}
         */
        () => this.dropdownService.setOpenState(true)));
    }
    /**
     * @protected
     * @param {?=} delayed
     * @return {?}
     */
    resetQuery(delayed = true) {
        // The search delay is set to the transition duration to ensure results
        // aren't rendered as the select closes as that causes a sudden flash.
        if (delayed) {
            this.searchService.searchDelay = this._menu.menuTransitionDuration;
            this.searchService.updateQueryDelayed('');
        }
        else {
            this.searchService.updateQuery('');
        }
        if (this.searchInput) {
            this.searchInput.query = '';
        }
    }
    /**
     * @protected
     * @return {?}
     */
    onAvailableOptionsRendered() {
        // Unsubscribe from all previous subscriptions to avoid memory leaks on large selects.
        this._renderedSubscriptions.forEach((/**
         * @param {?} rs
         * @return {?}
         */
        rs => rs.unsubscribe()));
        this._renderedSubscriptions = [];
        this._renderedOptions.forEach((/**
         * @param {?} ro
         * @return {?}
         */
        ro => {
            // Slightly delay initialisation to avoid change after checked errors. TODO - look into avoiding this!
            setTimeout((/**
             * @return {?}
             */
            () => this.initialiseRenderedOption(ro)));
            this._renderedSubscriptions.push(ro.onSelected.subscribe((/**
             * @return {?}
             */
            () => this.selectOption(ro.value))));
        }));
        // If no options have been provided, autogenerate them from the rendered ones.
        if (this.searchService.options.length === 0 && !this.searchService.optionsLookup) {
            this.options = this._renderedOptions.map((/**
             * @param {?} ro
             * @return {?}
             */
            ro => ro.value));
        }
    }
    /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    initialiseRenderedOption(option) {
        option.usesTemplate = !!this.optionTemplate;
        option.formatter = this.configuredFormatter;
        if (option.usesTemplate) {
            this.drawTemplate(option.templateSibling, option.value);
        }
        option.changeDetector.markForCheck();
    }
    /**
     * @protected
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    findOption(options, value) {
        // Tries to find an option in options array
        return options.find((/**
         * @param {?} o
         * @return {?}
         */
        o => value === this.valueGetter(o)));
    }
    /**
     * @protected
     * @return {?}
     */
    focus() {
        if (this.isSearchable && this.searchInput) {
            // Focusses the search input only when searchable.
            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
            this.searchInput.focus();
        }
        else {
            this._element.nativeElement.focus();
        }
    }
    // Helper that draws the provided template beside the provided ViewContainerRef.
    /**
     * @protected
     * @param {?} siblingRef
     * @param {?} value
     * @return {?}
     */
    drawTemplate(siblingRef, value) {
        siblingRef.clear();
        // Use of `$implicit` means use of <ng-template let-option> syntax is supported.
        siblingRef.createEmbeddedView(this.optionTemplate, {
            $implicit: value,
            query: this.query
        });
    }
    /**
     * @private
     * @return {?}
     */
    onLocaleUpdate() {
        this._localeValues = this._localizationService.get().select;
    }
}
FuiSelectBase.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.ui',] }, { type: HostBinding, args: ['class.dropdown',] }],
    isClearable: [{ type: Input }],
    isSearchable: [{ type: Input }],
    valueField: [{ type: Input }],
    optionTemplate: [{ type: Input }],
    icon: [{ type: Input }],
    transition: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    onTouched: [{ type: Output, args: ['touched',] }],
    _menu: [{ type: ViewChild, args: [FuiDropdownMenu, { static: true },] }],
    _renderedOptions: [{ type: ContentChildren, args: [FuiSelectOption, { descendants: true },] }],
    _internalSearch: [{ type: ViewChild, args: [FuiSelectSearch, { static: false },] }],
    _manualSearch: [{ type: ContentChild, args: [FuiSelectSearch, { static: false },] }],
    _tabIndex: [{ type: Input, args: ['tabindex',] }],
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    isVisible: [{ type: HostBinding, args: ['class.visible',] }],
    hasSearchClass: [{ type: HostBinding, args: ['class.search',] }],
    isSearching: [{ type: HostBinding, args: ['class.loading',] }],
    isClearing: [{ type: HostBinding, args: ['class.clearable',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
    options: [{ type: Input }],
    optionsFilter: [{ type: Input }],
    optionsLookup: [{ type: Input }],
    labelField: [{ type: Input }],
    optionFormatter: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onFocusIn: [{ type: HostListener, args: ['focusin',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout', ['$event'],] }],
    onKeyPress: [{ type: HostListener, args: ['keypress', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiSelectBase.prototype.dropdownService;
    /** @type {?} */
    FuiSelectBase.prototype.searchService;
    /** @type {?} */
    FuiSelectBase.prototype.hasClasses;
    /** @type {?} */
    FuiSelectBase.prototype.isClearable;
    /** @type {?} */
    FuiSelectBase.prototype.isSearchable;
    /** @type {?} */
    FuiSelectBase.prototype.isSearchExternal;
    /** @type {?} */
    FuiSelectBase.prototype.valueField;
    /** @type {?} */
    FuiSelectBase.prototype.optionTemplate;
    /** @type {?} */
    FuiSelectBase.prototype.localeOverrides;
    /** @type {?} */
    FuiSelectBase.prototype.icon;
    /** @type {?} */
    FuiSelectBase.prototype.transition;
    /** @type {?} */
    FuiSelectBase.prototype.transitionDuration;
    /** @type {?} */
    FuiSelectBase.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._menu;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._renderedOptions;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._renderedSubscriptions;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._internalSearch;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._manualSearch;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._optionFormatter;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._localeValues;
    /**
     * @type {?}
     * @private
     */
    FuiSelectBase.prototype._element;
    /**
     * @type {?}
     * @protected
     */
    FuiSelectBase.prototype._localizationService;
    /**
     * @abstract
     * @param {?} option
     * @return {?}
     */
    FuiSelectBase.prototype.selectOption = function (option) { };
}
//# sourceMappingURL=data:application/json;base64,