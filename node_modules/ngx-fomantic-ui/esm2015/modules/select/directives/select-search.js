/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Renderer2 } from '@angular/core';
export class FuiSelectSearch {
    /**
     * @param {?} _renderer
     * @param {?} _element
     */
    constructor(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this.onQueryUpdated = new EventEmitter();
        this.onQueryKeyDown = new EventEmitter();
        this.hasClasses = true;
        this.autoComplete = 'off';
    }
    /**
     * @param {?} query
     * @return {?}
     */
    set query(query) {
        this._renderer.setProperty(this._element.nativeElement, 'value', query);
    }
    /**
     * @param {?} query
     * @return {?}
     */
    updateQuery(query) {
        this.onQueryUpdated.emit(query);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        this.onQueryKeyDown.emit(e);
    }
    /**
     * @return {?}
     */
    focus() {
        // Slightly delay to support in menu search.
        this._element.nativeElement.focus();
        setTimeout((/**
         * @return {?}
         */
        () => this._element.nativeElement.focus()));
    }
}
FuiSelectSearch.decorators = [
    { type: Directive, args: [{
                selector: 'input[fuiSelectSearch]'
            },] }
];
/** @nocollapse */
FuiSelectSearch.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FuiSelectSearch.propDecorators = {
    hasClasses: [{ type: HostBinding, args: ['class.search',] }],
    autoComplete: [{ type: HostBinding, args: ['attr.autocomplete',] }],
    updateQuery: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FuiSelectSearch.prototype.hasClasses;
    /** @type {?} */
    FuiSelectSearch.prototype.autoComplete;
    /** @type {?} */
    FuiSelectSearch.prototype.onQueryUpdated;
    /** @type {?} */
    FuiSelectSearch.prototype.onQueryKeyDown;
    /**
     * @type {?}
     * @private
     */
    FuiSelectSearch.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FuiSelectSearch.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LXNlYXJjaC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mb21hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2VsZWN0L2RpcmVjdGl2ZXMvc2VsZWN0LXNlYXJjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBS3hHLE1BQU0sT0FBTyxlQUFlOzs7OztJQVMxQixZQUFvQixTQUFvQixFQUFVLFFBQW9CO1FBQWxELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBQ3BFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDO1FBRXhELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsSUFBVyxLQUFLLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7Ozs7SUFHTSxXQUFXLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUdNLFNBQVMsQ0FBQyxDQUFnQjtRQUMvQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7O0lBRU0sS0FBSztRQUNWLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxVQUFVOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDO0lBQ3hELENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjthQUNuQzs7OztZQUp1RSxTQUFTO1lBQTlELFVBQVU7Ozt5QkFNMUIsV0FBVyxTQUFDLGNBQWM7MkJBRzFCLFdBQVcsU0FBQyxtQkFBbUI7MEJBaUIvQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7d0JBSzdDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUF6Qm5DLHFDQUNvQzs7SUFFcEMsdUNBQ3FDOztJQUNyQyx5Q0FBNEM7O0lBQzVDLHlDQUFtRDs7Ozs7SUFFdkMsb0NBQTRCOzs7OztJQUFFLG1DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2lucHV0W2Z1aVNlbGVjdFNlYXJjaF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGdWlTZWxlY3RTZWFyY2gge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2VhcmNoJylcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzQ2xhc3NlczogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmF1dG9jb21wbGV0ZScpXHJcbiAgcHVibGljIHJlYWRvbmx5IGF1dG9Db21wbGV0ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBvblF1ZXJ5VXBkYXRlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgcHVibGljIG9uUXVlcnlLZXlEb3duOiBFdmVudEVtaXR0ZXI8S2V5Ym9hcmRFdmVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMub25RdWVyeVVwZGF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICAgIHRoaXMub25RdWVyeUtleURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPEtleWJvYXJkRXZlbnQ+KCk7XHJcblxyXG4gICAgdGhpcy5oYXNDbGFzc2VzID0gdHJ1ZTtcclxuICAgIHRoaXMuYXV0b0NvbXBsZXRlID0gJ29mZic7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgcXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudC50YXJnZXQudmFsdWUnXSlcclxuICBwdWJsaWMgdXBkYXRlUXVlcnkocXVlcnk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5vblF1ZXJ5VXBkYXRlZC5lbWl0KHF1ZXJ5KTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5vblF1ZXJ5S2V5RG93bi5lbWl0KGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZvY3VzKCk6IHZvaWQge1xyXG4gICAgLy8gU2xpZ2h0bHkgZGVsYXkgdG8gc3VwcG9ydCBpbiBtZW51IHNlYXJjaC5cclxuICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==