/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Directive, ElementRef, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { CustomValueAccessor, customValueAccessorFactory } from '../../../misc/util/internal';
import { FuiLocalizationService } from '../../../behaviors/localization/internal';
import { FuiSelectBase } from '../classes/select-base';
/**
 * @template T, U
 */
export class FuiSelect extends FuiSelectBase {
    /**
     * @param {?} element
     * @param {?} localizationService
     */
    constructor(element, localizationService) {
        super(element, localizationService);
        this.selectedOptionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder || this.localeValues.single.placeholder;
    }
    /**
     * @param {?} placeholder
     * @return {?}
     */
    set placeholder(placeholder) {
        this._placeholder = placeholder;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    selectOption(option) {
        // Choose and emit the selected option.
        this.selectedOption = option;
        this.selectedOptionChange.emit(this.valueGetter(option));
        this.dropdownService.setOpenState(false);
        this.resetQuery();
        this.drawSelectedOption();
        // Automatically refocus the search input for better keyboard accessibility.
        this.focus();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value != undefined) {
            if (this.searchService.options.length > 0) {
                // If the options have already been loaded, we can immediately match the ngModel value to an option.
                this.selectedOption = this.findOption(this.searchService.options, value);
                this.drawSelectedOption();
            }
            if (this.selectedOption == undefined) {
                if (this.valueField && this.searchService.hasItemLookup) {
                    // If the search service has a selected lookup function, make use of that to load the initial value.
                    this.searchService
                        .initialLookup(value)
                        .then((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => {
                        this.selectedOption = i;
                        this.drawSelectedOption();
                    }));
                }
                else {
                    // Otherwise, cache the written value for when options are set.
                    this._writtenOption = value;
                }
            }
        }
        else {
            this.selectedOption = undefined;
            this.drawSelectedOption();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onRemoveClick(e) {
        if (!e.eventHandled) {
            e.eventHandled = true;
            this.selectedOption = undefined;
            this.selectedOptionChange.emit(undefined);
            this._renderedOptions.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => o.isActive = false));
        }
    }
    /**
     * @protected
     * @return {?}
     */
    optionsUpdateHook() {
        if (!this._writtenOption && this.selectedOption) {
            // We need to check the option still exists.
            this.writeValue(this.valueGetter(this.selectedOption));
        }
        if (this._writtenOption && this.searchService.options.length > 0) {
            // If there was an value written by ngModel before the options had been loaded, this runs to fix it.
            this.selectedOption = this.findOption(this.searchService.options, this._writtenOption);
            if (this.selectedOption) {
                this._writtenOption = undefined;
                this.drawSelectedOption();
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    queryUpdateHook() {
        // When the query is updated, we just abandon the current selection.
        this.selectedOption = undefined;
    }
    /**
     * @protected
     * @param {?} option
     * @return {?}
     */
    initialiseRenderedOption(option) {
        super.initialiseRenderedOption(option);
        // Boldens the item so it appears selected in the dropdown.
        option.isActive = option.value === this.selectedOption;
    }
    /**
     * @private
     * @return {?}
     */
    drawSelectedOption() {
        // Updates the active class on the newly selected option.
        if (this._renderedOptions) {
            this.onAvailableOptionsRendered();
        }
        if (this.selectedOption != undefined && this.optionTemplate) {
            this.drawTemplate(this._optionTemplateSibling, this.selectedOption);
        }
    }
}
FuiSelect.decorators = [
    { type: Component, args: [{
                selector: 'fui-select',
                template: `
                   <!-- Query input -->
                   <input fuiSelectSearch
                          type="text"
                          [hidden]="!isSearchable || isSearchExternal">

                   <!-- Placeholder text -->
                   <div *ngIf="selectedOption == undefined" class="default text" [class.filtered]="query">{{ placeholder }}</div>
                   <!-- Selected item -->
                   <div class="text" [class.filtered]="query || selectedOption == undefined">
                       <span #optionTemplateSibling></span>
                       <span *ngIf="!optionTemplate && selectedOption != undefined"
                             [innerHTML]="configuredFormatter(selectedOption)"></span>
                   </div>
                   <!-- Dropdown icon -->
                   <i *ngIf="selectedOption && !isSearching && isClearable" class="times icon"
                      (click)="onRemoveClick($event)"></i>
                   <i *ngIf="!selectedOption || !isClearable" class="{{ icon }} icon" (click)="onCaretClick($event)"></i>
                   <!-- Select dropdown menu -->
                   <div class="menu"
                        fuiDropdownMenu
                        [menuTransition]="transition"
                        [menuTransitionDuration]="transitionDuration"
                        [menuAutoSelectFirst]="isSearchable">

                       <ng-content></ng-content>
                       <div *ngIf="isSearchable && availableOptions.length === 0" class="message">
                           {{ localeValues.noResultsMessage }}
                       </div>
                   </div>
               `,
                styles: [`
                   :host .times.icon {
                       position: absolute;
                       width: auto;
                       height: auto;
                       line-height: 1.21428571em;
                       top: .78571429em;
                       right: 1em;
                       margin: -.78571429em;
                       opacity: .6;
                       font-size: 1.07142857em;
                       padding: .6em;
                       -webkit-transition: opacity .1s ease;
                       transition: opacity .1s ease;
                       z-index: 3;
                   }

                   :host .times.icon.larger {
                       padding: .91666667em;
                       font-size: .85714286em;
                   }

                   :host .times.icon:hover {
                       opacity: 1;
                   }
               `]
            }] }
];
/** @nocollapse */
FuiSelect.ctorParameters = () => [
    { type: ElementRef },
    { type: FuiLocalizationService }
];
FuiSelect.propDecorators = {
    selectedOptionChange: [{ type: Output }],
    _optionTemplateSibling: [{ type: ViewChild, args: ['optionTemplateSibling', { read: ViewContainerRef, static: false },] }],
    placeholder: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FuiSelect.prototype.selectedOption;
    /** @type {?} */
    FuiSelect.prototype.selectedOptionChange;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._writtenOption;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._optionTemplateSibling;
    /**
     * @type {?}
     * @private
     */
    FuiSelect.prototype._placeholder;
}
// Value accessor directive for the select to support ngModel.
/**
 * @template T, U
 */
export class FuiSelectValueAccessor extends CustomValueAccessor {
    /**
     * @param {?} host
     */
    constructor(host) {
        super(host);
    }
}
FuiSelectValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'fui-select',
                host: {
                    '(selectedOptionChange)': 'onChange($event)',
                    '(touched)': 'onTouched()'
                },
                providers: [customValueAccessorFactory(FuiSelectValueAccessor)]
            },] }
];
/** @nocollapse */
FuiSelectValueAccessor.ctorParameters = () => [
    { type: FuiSelect }
];
//# sourceMappingURL=data:application/json;base64,